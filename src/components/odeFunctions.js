// odeFunctions.js
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Sigmoidal reduction parameters
let L = 2800;
let t0 = 4;
let k = 0.9;

// Function to generate evenly spaced values
let linspace = (start, end, num) => {
    let arr = [];
    let step = (end - start) / (num - 1);
    for (let i = 0; i < num; i++) {
        arr.push(start + step * i);
    }
    return arr;
};

// Generate time intervals for 12 hours with 120 steps
let sigmoid_time = linspace(0, 12, 120);

// Sigmoid function
let sigmoid = (x) => 1 / (1 + Math.exp(-x));

// Compute adjusted sigmoidal intake pattern
let adjusted_sigmoid_intake_pattern = sigmoid_time.map(t => L - (L * sigmoid(k * (t - t0))));

// Create the feed pulse object
let feed_pulse = {
    var: Array(sigmoid_time.length).fill("intake"),
    time: sigmoid_time,
    value: adjusted_sigmoid_intake_pattern,
    method: Array(sigmoid_time.length).fill("replace")
};

// Interpolation function
let interpolate = (x, y) => {
    return (xi) => {
        if (xi <= x[0]) {
            return y[0];
        } else if (xi >= x[x.length - 1]) {
            return y[y.length - 1];
        } else {
            for (let i = 0; i < x.length - 1; i++) {
                if (xi >= x[i] && xi <= x[i + 1]) {
                    let xDiff = x[i + 1] - x[i];
                    let yDiff = y[i + 1] - y[i];
                    return y[i] + ((xi - x[i]) * yDiff) / xDiff;
                }
            }
        }
    };
};

// Create the interpolation function
let interpolated_intake = interpolate(feed_pulse.time, feed_pulse.value);

// Function to get the intake value based on time
let _intake = (t) => {
    return interpolated_intake(t % 12);
};

// Example usage
console.log(_intake(2));  // Should give the interpolated intake value at time 2 hours
console.log(_intake(14)); // Should give the interpolated intake value at time 2 hours (14 % 12)


///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


const feed_pulse_3NOP_7_29_24_prelim = [
    { "var": "intake", "time": 0.0, "value": 472.249255, "method": "replace" },
    { "var": "intake", "time": 2.0, "value": 540.235932, "method": "replace" },
    { "var": "intake", "time": 4.0, "value": 358.164118, "method": "replace" },
    { "var": "intake", "time": 6.0, "value": 1.814358, "method": "replace" },
    { "var": "intake", "time": 8.0, "value": 2324.307071, "method": "replace" },
    { "var": "intake", "time": 10.0, "value": 212.345673, "method": "replace" },
    { "var": "intake", "time": 12.0, "value": 678.123456, "method": "replace" },
    { "var": "intake", "time": 14.0, "value": 987.654321, "method": "replace" },
    { "var": "intake", "time": 16.0, "value": 1234.56789, "method": "replace" },
    { "var": "intake", "time": 18.0, "value": 432.987654, "method": "replace" },
    { "var": "intake", "time": 20.0, "value": 567.890123, "method": "replace" },
    { "var": "intake", "time": 22.0, "value": 345.678912, "method": "replace" },
    { "var": "intake", "time": 24.0, "value": 987.123456, "method": "replace" }
];

function _sigmoid(x) {
    return 1 / (1 + Math.exp(-x));
}

const seq2_0_002 = Array.from({length: Math.floor((9.98 - (-10)) / 0.02) + 1}, (_, i) => -10 + (i * 0.02));
const smooth_up2_0_002 = seq2_0_002.map(_sigmoid);
const smooth_down2_0_002 = smooth_up2_0_002.map(x => -x + 1);

function getPattern(smoothArray, val1, val2) {
    return smoothArray.map(x => x * (val1 - val2) + val2);
}

const intake_pattern1_0_002 = getPattern(smooth_up2_0_002, feed_pulse_3NOP_7_29_24_prelim[0].value, feed_pulse_3NOP_7_29_24_prelim[11].value);
const intake_pattern2_0_002 = getPattern(smooth_up2_0_002, feed_pulse_3NOP_7_29_24_prelim[1].value, feed_pulse_3NOP_7_29_24_prelim[0].value);
const intake_pattern3_0_002 = getPattern(smooth_down2_0_002, feed_pulse_3NOP_7_29_24_prelim[1].value, feed_pulse_3NOP_7_29_24_prelim[2].value);
const intake_pattern4_0_002 = getPattern(smooth_down2_0_002, feed_pulse_3NOP_7_29_24_prelim[2].value, feed_pulse_3NOP_7_29_24_prelim[3].value);
const intake_pattern5_0_002 = getPattern(smooth_up2_0_002, feed_pulse_3NOP_7_29_24_prelim[4].value, feed_pulse_3NOP_7_29_24_prelim[3].value);
const intake_pattern6_0_002 = getPattern(smooth_down2_0_002, feed_pulse_3NOP_7_29_24_prelim[4].value, feed_pulse_3NOP_7_29_24_prelim[5].value);
const intake_pattern7_0_002 = getPattern(smooth_up2_0_002, feed_pulse_3NOP_7_29_24_prelim[6].value, feed_pulse_3NOP_7_29_24_prelim[5].value);
const intake_pattern8_0_002 = getPattern(smooth_up2_0_002, feed_pulse_3NOP_7_29_24_prelim[7].value, feed_pulse_3NOP_7_29_24_prelim[6].value);
const intake_pattern9_0_002 = getPattern(smooth_up2_0_002, feed_pulse_3NOP_7_29_24_prelim[8].value, feed_pulse_3NOP_7_29_24_prelim[7].value);
const intake_pattern10_0_002 = getPattern(smooth_down2_0_002, feed_pulse_3NOP_7_29_24_prelim[8].value, feed_pulse_3NOP_7_29_24_prelim[9].value);
const intake_pattern11_0_002 = getPattern(smooth_down2_0_002, feed_pulse_3NOP_7_29_24_prelim[9].value, feed_pulse_3NOP_7_29_24_prelim[10].value);
const intake_pattern12_0_002 = getPattern(smooth_down2_0_002, feed_pulse_3NOP_7_29_24_prelim[10].value, feed_pulse_3NOP_7_29_24_prelim[11].value);

const intake_pattern_compiled_3NOP_0_002 = [
    ...intake_pattern5_0_002, ...intake_pattern6_0_002, ...intake_pattern7_0_002,
    ...intake_pattern8_0_002, ...intake_pattern9_0_002, ...intake_pattern10_0_002,
    ...intake_pattern11_0_002, ...intake_pattern12_0_002, ...intake_pattern1_0_002,
    ...intake_pattern2_0_002, ...intake_pattern3_0_002, ...intake_pattern4_0_002
];

// Duplicate and extend to cover full 24.0 time range
const feed_pulse_3NOP_7_29_24_0_002_48HR_RUN = [
    ...intake_pattern_compiled_3NOP_0_002.map((value, i) => ({
        "var": "intake",
        "time": i * 0.001,
        "value": value,
        "method": "replace"
    })),
    ...intake_pattern_compiled_3NOP_0_002.map((value, i) => ({
        "var": "intake",
        "time": 12.0 + i * 0.001,
        "value": value,
        "method": "replace"
    }))
];


function processTime(t, feed_pulse_3NOP_7_29_24_0_002_48HR_RUN) {
    // Step 1: Round t to 3 decimal places
    t = Math.round(t * 1000) / 1000;
    
    // Step 2: Multiply t by 1000
    t = Math.round(t * 1000);

    // Step 3: Cap t at 23975 if it exceeds that value
    if (t > 23975) {
        t = 23975;
    }

    // Step 4: Access the intake value at index t
    const intake = feed_pulse_3NOP_7_29_24_0_002_48HR_RUN[t].value;

    return intake;
}



///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////



let J_NAD_AcPr = 1.0;
let JAmNgBa = 0.00861;
let JAmUrAm = 0.00621;
let JBaNgPo = 2.1865671641791042;
let JFaUBfAm = 1.345e-05;
let JFaUPoMi = 2e-07;
let JFnPoNg = 2.73135593220339;
let JPsNgPo = 0.01465;
let JSpSp = 0.4;
let JSpVFA = 0.2;
let JWsPsAmBa = 0.0165;
let J_Hplus_LaLactate = 1e-08;
let J_Hplus_AcAcetate = 1e-08;
let J_Hplus_BuButyrate = 1e-08;
let J_Hplus_PrPropionate = 1e-08;
let J_Hplus_CO2Bicarb = 1e-08;
let JWsPsAmBf = 0.0165;
let JWsPsAmFn = 0.0165;
let JWsPsAmPo = 0.0165;
let JPiNgPo = 0.01465;
let JBfNgPo = 2.1865671641791042;
let JPoNgPo = 2.1865671641791042;
let JPsNgBa = 0.00861;
let JAmNgBf = 0.00861;
let JPsNgBf = 0.00861;
let JSaSa = 0.4;
let JSfSf = 0.4;
let JAmNgFn = 0.00861;
let JPsNgFn = 0.00861;
let JSfnSfn = 0.4;
let KdLa = 0.00013803842646028844;
let KdAc = 1.7538805018417585e-05;
let KdBu = 1.5135612484362051e-05;
let KdPr = 1.3365955165464412e-05;
let KdCO2 = 1.8197008586099822e-08;
let M_NAD_Ac = 9.0;
let MAcAcAb = 0.0791;
let MAcetateAcetateAb = 0.3626533898305085;
let MAcLaBa = 0.0064;
let MLaSa = 0.0034;
let MAmAmAb = 0.0132;
let MAmBa = 0.0081;
let MAmFn = 0.0336;
let maxInsolFSGperminEat = 0.001258591;
let maxInsolFSGperminRum = 0.000396599;
let maxInsolFSGpermolGas = 0.1;
let maxInsolFSGpermolInsol = 0.010000000000000002;
let MBaPo = 138.776;
let MBuBuAb = 0.4934;
let MButyrateButyrateAb = 2.262113559322034;
let MFaUFaSBa = 0.0015691868758915836;
let MFaUFaSBf = 1.13e-05;
let MFaUFaSFn = 0.0015691868758915836;
let MFdBfWs = 0.353;
let MFdFnWs = 0.0016133333333333334;
let MFdPo = 0.0249;
let MFdSp = 0.46799999999999997;
let MH2MeCH4 = 7.6e-07;
let MInsolFSGFermGas = 0.06;
let MInsolFSGHydrolysis = 0.06;
let MInsolFSGRumFn = 0.05422496;
let KMInsolFSGEat = 0.5;
let KMInsolFSGRum = 0.4;
let MLaAmBa = 0.002;
let MLactateLactateAb = 0.04584745762711864;
let MLaFn = 0.00049;
let MLaLaAb = 0.01;
let MLaNgBa = 0.00056;
let MLaPo = 0.004;
let MLaPsBa = 0.0032;
let MLaSp = 0.008;
let MpHAmAb = 7.5;
let MpHBf = 5.97;
let MPiPiPsBa = 0.281;
let MPiPiPsFn = 0.281;
let MPiPo = 0.184;
let MPropionatePropionateAb = 0.178;
let MPrPrAb = 0.112;
let MPsFn = 0.00112;
let MPsPo = 0.16;
let MPsWs = 0.1344;
let MPsWsNg = 0.1156;
let MSfnFn = 0.54048;
let MSfnNg = 0.032428799999999994;
let MSiBaWs = 0.442;
let MSiFnWs = 0.0049382716049382715;
let MSiPo = 0.624;
let MSiSp = 0.46799999999999997;
let MTgWsFaU = 0.0007937229929497385;
let MVaLaPoFlDe = 0.0054;
let MWsAmBa = 0.047700000000000006;
let MWsAmBaLa = 0.09;
let MWsFn = 0.006;
let MWsNgBa = 0.18;
let MWsNgFn = 0.00036;
let MWsPo = 0.11099999999999999;
let MWsPoPoFl = 0.037;
let MWsPsBa = 0.0744;
let MWsPsBaLa = 0.14;
let MWsSa = 0.0804;
let MWsSaLa = 0.15;
let MWsSfn = 0.00249;
let MSaPsBaAc = 8.060671722643553;
let MSaPsBaBu = 7.258536585365853;
let MSaPsBaAcPr = 7.743384046870067;
let MSaPsBaLa = 11.391375101708709;
let MSaAmBaAc = 5.167930660888408;
let MSaAmBaBu = 4.653658536585366;
let MSaAmBaAcPr = 4.964508320372342;
let MSaAmBaLa = 7.323026851098454;
let MSaNgBaAc = 19.50162513542795;
let MSaNgBaBu = 17.560975609756095;
let MSaNgBaAcPr = 18.73399366178242;
let MSaNgBaLa = 14.646053702196909;
let MSaFaUBaAc = 19.50162513542795;
let MSaFaUBaBu = 17.560975609756095;
let MSaFaUBaAcPr = 18.73399366178242;
let MSaFaUBaLa = 14.646053702196909;
let MSaFaSBaAc = 19.50162513542795;
let MSaFaSBaBu = 17.560975609756095;
let MSaFaSBaAcPr = 18.73399366178242;
let MSaFaSBaLa = 14.646053702196909;
let MSpPiPoAc = 12.026002166847235;
let MSpPiPoBu = 10.829268292682926;
let MSpPiPoLa = 9.03173311635476;
let MWsSp = 0.22499999999999998;
let MPsWsBf = 0.0672;
let MPsWsNgBf = 0.0867;
let MWsNgBf = 0.135;
let MAmBf = 0.00405;
let MSfNgBfAc = 14.626218851570965;
let MSfNgBfBu = 13.170731707317074;
let MSfNgBfAcPr = 14.050495246336817;
let MSfFaUBfAc = 14.626218851570965;
let MSfFaUBfBu = 13.170731707317074;
let MSfFaUBfAcPr = 14.050495246336817;
let MSfFaSBfAc = 14.626218851570965;
let MSfFaSBfBu = 13.170731707317074;
let MSfFaSBfAcPr = 14.050495246336817;
let MBfPo = 138.776;
let MPiPiPsBf = 0.281;
let MWsSf = 0.0804;
let MWsPsBf = 0.0744;
let MSfPsBfAc = 8.060671722643553;
let MSfPsBfBu = 7.258536585365853;
let MSfPsBfAcPr = 7.743384046870067;
let MFnPo = 138.776;
let MPoPo = 138.776;
let MWsAmBf = 0.047700000000000006;
let MSfAmBfAc = 5.167930660888408;
let MSfAmBfBu = 4.653658536585366;
let MSfAmBfAcPr = 4.964508320372342;
let MAcLaFn = 0.0064;
let MAcLaPo = 0.0064;
let MCO2CO2Bicarb = 1.0;
let VmaxAcAcAb = 0.0676296;
let VmaxAcetateAcetateAb = 0.0004200596273291925;
let VmaxAmAmAb = 0.04583333333333334;
let VmaxAmBa = 0.00044;
let VmaxAmBaLa = 0.007166666666666666;
let VmaxAmFn = 6.195e-05;
let VmaxBaPo = 0.16082291666666676;
let VmaxBuBuAb = 1.070523;
let VmaxButyrateButyrateAb = 0.006649211180124223;
let VmaxFaUFaSBa = 0.0018913678315909206;
let VmaxFaUFaSBf = 0.00121794;
let VmaxFaUFaSFn = 7.880699298295502e-05;
let VmaxFdFn = 0.208152;
let VmaxFdPo = 0.00027777777777777767;
let VmaxFdSp = 0.000169753086419753;
let VmaxFdWs = 0.0068583333333333335;
let VmaxH2MeCH4 = 0.315;
let VmaxLaBa = 0.0154375;
let VmaxLactateLactateAb = 2.0703933747412008e-07;
let VmaxLaFn = 1.74e-06;
let VmaxLaLaAb = 3.3333333333333335e-05;
let VmaxLaPo = 0.007;
let VmaxLaSa = 0.00504166666666665;
let VmaxLaSp = 0.00204166666666667;
let VmaxPiPo = 0.0004166666666666675;
let VmaxPiPs = 0.0024;
let VmaxPiPsFn = 0.00025152720579084674;
let VmaxPoFlPoFlDe = 0.1708333333333333;
let VmaxPoPoFl = 0.27406742341142565;
let VmaxPropionatePropionateAb = 0.0012944906832298136;
let VmaxPrPrAb = 0.208413;
let VmaxPsBa = 0.00047999999999999996;
let VmaxPsBaLa = 0.00770833333333333;
let VmaxPsFn = 0.00038055;
let VmaxPsLa = 0.00192708333333333;
let VmaxPsPo = 0.0004166666666666675;
let VmaxPsVFABa = 0.00019999999999999998;
let VmaxSfnFn = 0.277959856;
let VmaxSiFn = 0.2092565302585036;
let VmaxSiPo = 0.0005;
let VmaxSiSp = 0.00030555555555555566;
let VmaxSiWs = 0.009079166666666668;
let VmaxTgWsFaU = 0.0001317759400977254;
let VmaxUrAm = 6.875e-05;
let VmaxWsBa = 0.0017145833333333325;
let VmaxWsFn = 0.0030857000000000002;
let VmaxWsPo = 0.0008055555555555566;
let VmaxWsSa = 0.00073611111111111;
let VmaxWsSaLa = 0.00729166666666667;
let VmaxWsSfn = 0.25606;
let VmaxWsSp = 0.00030555555555555566;
let VmaxBaPoAmBu = 0.016082291666666675;
let VmaxAmBaSaAcPr = 7.333333333333334e-05;
let VmaxWsFaUBfAcPr = 0.00017145833333333325;
let VmaxSaNgBaAc = 0.18576200794510644;
let VmaxSaNgBaBu = 0.16727642276422755;
let VmaxSaNgBaAcPr = 0.17844996277369127;
let VmaxSaNgBaLa = 0.1395104420938432;
let VmaxSpNgPoAc = 0.08727579150114373;
let VmaxSpNgPoBu = 0.07859078590785919;
let VmaxSpNgPoLa = 0.06554561070427639;
let VmaxWsBf = 0.00228611111111111;
let VmaxSfNgBfAc = 0.2476826772601419;
let VmaxSfNgBfBu = 0.2230352303523034;
let VmaxSfNgBfAcPr = 0.237933283698255;
let VmaxAmBf = 0.0007333333333333333;
let VmaxPsBf = 0.0007999999999999999;
let VmaxBfPo = 0.16082291666666676;
let VmaxWsSf = 0.00073611111111111;
let VmaxPsVFABf = 0.00019999999999999998;
let VmaxFnPo = 0.16082291666666676;
let VmaxPoPo = 0.16082291666666676;
let RFaSAmBa = 0.08176839197738163;
let RFaSAmFn = 0.014175851262857494;
let RFaSBaPo = 0.0005375513568322241;
let RFaSPsBa = 0.10318797074900343;
let RFaSPsFn = 0.013439443405046714;
let RFaSPsPo = 0.08023154579585434;
let RFaUAmBa = 0.010106205750013461;
let RFaUAmFn = 0.04498695894319271;
let RFaUBaPo = 0.00023925696228948705;
let RFaUPsBa = 0.012753569418416155;
let RFaUPsFn = 0.042649974063026855;
let RFaUPsPo = 0.03570999437156523;
let RLaAmFn = 5.145287364985372;
let RLaPsFn = 4.877999709661456;
let RSfnAmFn = 102.99721907508496;
let RSfnPsFn = 97.64671418806755;
let RWsAmFn = 1.1433971922189716;
let RWsPsFn = 1.0839999354803236;
let RFdPiPoAc = 1.1687219730941705;
let RFdPiPoBu = 1.5179372197309418;
let RFdPiPoLa = 2.2163677130044843;
let RFdBaPoAc = 0.007830437219730943;
let RFdBaPoBu = 0.01017017937219731;
let RFdBaPoLa = 0.014849663677130046;
let RLaBaPoAcBu = 0.11311883408071749;
let RSaPsBaAc = 152.35138553524203;
let RSaPsBaBu = 170.76816508075396;
let RSaPsBaAcPr = 159.63621436976945;
let RSaPsBaLa = 198.43079733544477;
let RSaAmBaAc = 207.0389040545293;
let RSaAmBaBu = 220.93326759664743;
let RSaAmBaAcPr = 212.5348736359046;
let RSaAmBaLa = 241.80307646462958;
let RSpPiPoAc = 126.62209892677903;
let RSpPiPoBu = 148.0914360713114;
let RSpPiPoLa = 180.3391141582168;
let RSpBaPoAc = 0.8483680628094196;
let RSpBaPoBu = 0.9922126216777863;
let RSpBaPoLa = 1.2082720648600527;
let RWsPsBaAc = 1.406203288490284;
let RWsPsBaBu = 1.750373692077728;
let RWsPsBaAcPr = 1.5338170336406847;
let RWsPsBaLa = 2.4387144992526157;
let RWsAmBaAc = 1.9109690844233054;
let RWsAmBaBu = 2.264565992865636;
let RWsAmBaAcPr = 2.042078050474956;
let RWsAmBaLa = 2.971759809750297;
let RLaPsBaAcPr = 12.888979480907732;
let RLaPsBaAcBu = 16.893871449925264;
let RLaAmBaAcPr = 13.70824775699924;
let RLaAmBaAcBu = 17.82282996432818;
let RLaPiPoAcBu = 16.883408071748878;
let RWsPsBfAc = 1.406203288490284;
let RWsPsBfBu = 1.750373692077728;
let RWsPsBfAcPr = 1.5338170336406847;
let RWsAmBfAc = 1.9109690844233054;
let RWsAmBfBu = 2.264565992865636;
let RWsAmBfAcPr = 2.042078050474956;
let RSfPsBfAc = 152.35138553524203;
let RSfPsBfBu = 170.76816508075396;
let RSfPsBfAcPr = 159.63621436976945;
let RSfAmBfAc = 207.0389040545293;
let RSfAmBfBu = 220.93326759664743;
let RSfAmBfAcPr = 212.5348736359046;
let RLaPsPoAcBu = 16.883408071748878;
let RLaBfPoAcBu = 0.11311883408071749;
let RLaFnPoAcBu = 0.11311883408071749;
let RLaPoPoAcBu = 0.11311883408071749;
let RFaUPsBf = 0.012753569418416155;
let RFaUAmBf = 0.010106205750013461;
let RFaSPsBf = 0.10318797074900343;
let RFaSAmBf = 0.08176839197738163;
let ThetapHAmAb = 8;
let ThetapHBf = 23;
let ThetaSpPiPo = 2;
let ThetaSpSpPo = 10;
let ThetaVaLaPoFlDe = 4;
let ThetaSaSaBa = 10;
let ThetaSfSfBf = 10;
let ThetaSfnSfnFn = 10;
let YAcSfn = 0.022202486678507993;
let YAmPs = 1.257;
let YBaAm = 118.91;
let YBaPs = 149.48;
let YBicarbSalBicarb = 0.07804;
let YBuSfn = 0.011101243339253997;
let YCH4H2ME = 0.25;
let YFaSSfn = 0.0001360139968801186;
let YFaSTg = 0.21299999999999997;
let YFaSWsFn = 0.012252140838961081;
let YFaUPoDe = 5.544000000000001e-05;
let YFaUSfn = 0.00043163941126961487;
let YFaUTg = 2.7239999999999998;
let YFaUWsFn = 0.038882078167166906;
let YFnAm = 136.986301369863;
let YFnPs = 129.87012987012986;
let YHplusBuButyrate = 1.0;
let YHplusCO2Bicarb = 1.0;
let YHplusLaLactate = 1.0;
let YLaBa = 0.0134;
let YLaSfn = 0.022202486678507993;
let YMEPo = 0.1;
let YPrLa = 0.6666666666666666;
let YPsPoDe = 0.0067;
let YPsSalPs = 0.001;
let YSfnLa = 20.286016;
let YSfnWs = 90.08;
let YWsPoDe = 0.000111;
let YWsSpDe = 0.0062;
let YBaAmWsAc = 35.672999999999995;
let YLaSaPsBa = 0.024579999999999998;
let YFaUWsBaAc = 0.030221376869023094;
let YFaUWsBaBu = 0.029919163100332866;
let YFaUWsBaAcPr = 0.030108610537422264;
let YFaUWsBaLa = 0.029332512843463592;
let YFaUSaBaAc = 0.00027894330850108316;
let YFaUSaBaBu = 0.00030667142177841184;
let YFaUSaBaAcPr = 0.0002892896194254595;
let YFaUSaBaLa = 0.0003604965828461675;
let YFaULaBaAcPr = 0.02260376333129543;
let YFaULaBaAcBu = 0.02077719659745338;
let YFaUWsPoAc = 0.587198528137374;
let YFaUWsPoBu = 0.49086126961483595;
let YFaUWsPoLa = 0.3695896618276413;
let YFaUSpPoAc = 0.005419842414707963;
let YFaUSpPoBu = 0.005031328013552068;
let YFaUSpPoLa = 0.004542256943861711;
let YFaULaPoAcBu = 0.05972456512423861;
let YFaSWsBaAc = 0.26738539491054897;
let YFaSWsBaBu = 0.26471154096144345;
let YFaSWsBaAcPr = 0.26638768821312153;
let YFaSWsBaLa = 0.25952111858965043;
let YFaSSaBaAc = 0.002467967195024367;
let YFaSSaBaBu = 0.0027132932948547954;
let YFaSSaBaAcPr = 0.0025595067845133324;
let YFaSSaBaLa = 0.0031895145474668033;
let YFaSLaBaAcPr = 0.1999881147373543;
let YFaSLaBaAcBu = 0.18382745900100242;
let YFaSWsPoAc = 1.442668169263774;
let YFaSWsPoBu = 1.2059804227439357;
let YFaSWsPoLa = 0.9080323183013166;
let YFaSSpPoAc = 0.013315827202304634;
let YFaSSpPoBu = 0.01236129933312534;
let YFaSSpPoLa = 0.01115971719192318;
let YFaSLaPoAcBu = 0.14673526056199981;
let YPoPiWs = 149.47683109118088;
let YPoBaWs = 1.0014947683109119;
let YAcSaPsBaAc = 0.01846;
let YAcSaPsBaAcPr = 0.006405468164794007;
let YAcSpPiPoAc = 0.01846;
let YBuSaPsBaBu = 0.01025;
let YPrSaPsBaAcPr = 0.012810936329588013;
let YSaBaWsAc = 108.34236186348862;
let YSpPoWsAc = 108.34236186348862;
let YSaBaWsBu = 97.5609756097561;
let YSpPoWsBu = 97.5609756097561;
let YSaBaWsAcPr = 104.0777425654579;
let YSaBaWsLa = 81.36696501220506;
let YSpPoWsLa = 81.36696501220506;
let YSaBaLaAcPr = 23.11555676970601;
let YSaBaLaAcBu = 18.13894431344096;
let YSpPoLaAcBu = 18.13894431344096;
let YWsPsFerm = 0.9057971014492754;
let YH2MiAA = 0.00058;
let YBfPs = 149.48;
let YBfAm = 118.91;
let YPoPsWs = 149.47683109118088;
let YPoBfWs = 1.0014947683109119;
let YPoFnWs = 1.0014947683109119;
let YPoPoWs = 1.0014947683109119;
let YPsBaDe = 0.0067;
let YPsBfDe = 0.0067;
let YPsFnDe = 0.0067;
let YFaUWsBfAc = 0.030221376869023094;
let YFaUWsBfBu = 0.029919163100332866;
let YFaUWsBfAcPr = 0.030108610537422264;
let YFaSWsBfAc = 0.26738539491054897;
let YFaSWsBfBu = 0.26471154096144345;
let YFaSWsBfAcPr = 0.26638768821312153;
let YSfBfWsAc = 108.34236186348862;
let YSfBfWsBu = 97.5609756097561;
let YSfBfWsAcPr = 104.0777425654579;
let YFaUSfBfAc = 0.00027894330850108316;
let YFaUSfBfBu = 0.00030667142177841184;
let YFaUSfBfAcPr = 0.0002892896194254595;
let YFaSSfBfAc = 0.002467967195024367;
let YFaSSfBfBu = 0.0027132932948547954;
let YFaSSfBfAcPr = 0.0025595067845133324;
let YAcSfPsBfAc = 0.01846;
let YAcSfPsBfAcPr = 0.006405468164794007;
let YBuSfPsBfBu = 0.01025;
let YBuSfnPsFnBu = 0.011101243339253997;
let YBuSpPsBaPo = 0.01025;
let YPrSfPsBfAcPr = 0.012810936329588013;
let KH2Em = 8.1;
let KCO2Em = 8.1;
let KFlExLa = 0.013048299999999999;
let KFlExAc = 0.013048299999999999;
let KFlExPr = 0.013048299999999999;
let KFlExBu = 0.013048299999999999;
let KFlExBicarb = 0.9133809999999999;
let KFlExHplus = 0.130483;
let FSG_CP = 10.786198;
let FSG_NDF = 0.0;
let kNDFProcess = 1.013487;
let kPiProcess = 1.096373;
let optimalFSG = 1.2;
let kInsolFSGmod = -0.001;
let fZoo = 0.6489292667099287;
let pH_crit = 6.3;
let K_NADH_FrredFrox = 202.0;
let KWaterOsm = 9.0;
let fSdHindEx = 0.1;
let fPiHindEx = 0.25;
let fTgHindEx = 0.366;
let fFaSHindEx = 0.2104999999999999;
let fFaUHindEx = 0.21520000000000006;
let YPsMi = 0.0067;
let Y_CH4_Hind_Ferm = 0.002;
let KAbH2OHind = 0.26708333333333334;
let KAbNHind = 0.0032774085210808667;
let KAbCHind = 0.005525714527385573;
let YCMi = 2.8662764220656474;
let YCStorage = 0.06132648496270885;
let YCPropionate = 3.0;
let fH2Ofecal = 0.6145584725536992;
let fH2Ourine = 0.3854415274463008;
let fNfecal_Appuhamy = 0.44999999999999996;
let fNurine_Appuhamy = 0.55;
let fCfecal_Appuhamy = 0.92;
let fCurine_Appuhamy = 0.07999999999999996;
let KNOxAb = 0.3;
let KNO3NO2 = 0.06282951018399432;
let KNO2Am = 0.004733156433860906;
let KNO2_N2O = 8.519681580949631e-06;
let J_NO2_MCR_H2MeCH4 = 0.00117;
let J_Br_H2MeCH4 = 9.891979582954142e-07;
let J_NOP_MCR_H2MeCH4 = 1.93e-05;
let RH2AmAA = 0.1664;
let RH2FaUFaS = 1.0;
let R_NADHLaAcPr = 0.3333333333333333;
let R_NADHWsAcPr = 0.6666666666666666;
let RAcLaBu = 0.5;
let RCO2CH4H2Me = 0.25;
let RHplus_NADH_FrredFrox = 3.0;
let Y_CO2LaAcBu = 1.0;
let Y_CO2LaAcPr = 0.3333333333333333;
let Y_CO2WsAc = 2.0;
let Y_CO2WsAcPr = 0.6666666666666666;
let Y_CO2WsBu = 2.0;
let Y_H2_NADH_FrredFrox = 2.0;
let Y_H2LaAcBu = 0.5;
let Y_H2WsAc = 4.0;
let Y_H2WsBu = 2.0;
let Y_NADHWsAc = 2.0;
let YAcLa = 0.3333333333333333;
let YAcPrWs = 0.6666666666666666;
let YAcWs = 2.0;
let YAmUrAm = 2.0;
let YBuWs = 1.0;
let YFaSFaU = 1.0;
let YFaSPoDe = 0.00012456;
let YHplusAcAcetate = 1.0;
let YHplusPrPropionate = 1.0;
let YLaWs = 2.0;
let YMeH2CH4 = 0.5;
let YPsPi = 1.0;
let YPrWs = 1.3333333333333333;
let YWsFaU = 0.5;
let YWsFd = 1.0;
let YBuLa = 0.75;
let KNOPNOPAb = 0.3;
let KBrBrAb = 0.22982522997392532;
let mrWs = 180.16;
let mrLa = 90.08;
let mrAm = 17.031;
let mrPs = 110.0;
let mrPi = 110.0;
let mrTg = 879.4;
let mrFaU = 280.4;
let mrFaS = 256.42;
let mrFu = 162.0;
let mrFd = 162.0;
let mrSi = 162.0;
let mrAc = 60.05;
let mrBu = 88.11;
let mrPr = 74.08;
let mrNOP = 121.09;
let mrBr = 252.73;
let mrBicarb = 61.017;
let cNAD = 7e-06;
let rFr = 9.0;
let chi = 2.0;
let deltaG0 = -102.0;
let R = 8.314;
let Temp = 312.0;
let p0 = 1.0;
let Vheadspace = 40.0;
let hH2 = 1382.0;
let hCO2 = 43.66812227074236;
let OsmolRumenAVG = 0.28;
let V = 60.924;
let Fb = 703.0;
let VmolH2 = 25.0;
let VmolCO2 = 25.6;
let hN2O = 57.565244744;
let fNADH_initial = 0.270919537245838;
let YNPi = 1.4782608695652173;
let YNPs = 1.4782608695652173;
let YNAm = 1.0;
let YNNOP = 1.0;
let YCPi = 5.434782608695652;
let YCPs = 5.434782608695652;
let YCTg = 57.0;
let YCFu = 6.0;
let YCFd = 6.0;
let YCSi = 6.0;
let YCWs = 6.0;
let YCLa = 3.0;
let YCFaU = 18.0;
let YCFaS = 16.0;
let YCAc = 2.0;
let YCBu = 4.0;
let YCPr = 3.0;
let YCNOP = 3.0;
let YCBr = 1.0;
let YCCO2 = 1.0;
let YCBicarb = 1.0;
let YCLactate = 3.0;
let YCAcetate = 2.0;
let YCButyrate = 4.0;
let YDpBaDp = 0.0179;
let YDpBfDp = 0.0179;
let YDpPoDp = 0.0138;
let YDpFnDp = 0.0138;
let YRMpRMpNp = 0.136;
let VmaxGpEp = 3.75;
let MGpGpEp = 0.91;
let VSi = 5.0;
let KLpLpEp = 0.0012916666666666667;
let KLpEx = 0.106;
let KLBaEx = 0.0901;
let KLBfEx = 0.0901;
let KEpEpBile = 0.0007916666666666666;
let KEpEpSal = 0.024166666666666666;
let KNOP_NO3 = 1.55;
let KNOP_NO2 = 0.44;
let DMI = 784.203125;
let FrFu = 0.07;
let FrFd = 0.287;
let FrSi = 0.159;
let FrWs = 0.125;
let FrLa = 0.021;
let FrTg = 0.033;
let FrFaU = 0.014047822766000001;
let FrFaS = 0.004056521705;
let FrAm = 0.0010991792;
let FrPs = 0.06671401900000001;
let FrPi = 0.12851628099999998;
let FrAc = 0.011;
let FrBu = 0.002;
let FrPr = 0.002;
let FrNOP = 0.0;
let FrBr = 0.0;
let FrAsh = 0.079;
let FrDM = 0.465;
let FrForage = 0.7;
let FrNDF = 0.357;
let FrBicarb = 0.0006;
let FrP = 0.00416576;
let FrDp = 0.85;
let milk = 22.0;
let YEpEpMilk = 0.9;
let frNO3H2O = 0.00011774193548387097;
let FrNi = 0.032142054399999995;
let KFlEx = 0.13160990927031252;
let TimeEatingperDMI = 17.011805;
let TimeRumperDMI = 25.807629999999996;
let DurationEat = 320.17705542937495;
let DurationRum = 485.7221782762499;
let DurationRest = 634.1007662943751;
let RateSalEat = 0.23149999999999998;
let RateSalRum = 0.23;
let RateSalRest = 0.08492000000000001;
let RateSal = 9.98687193371484;
let P_H2OSalH2O = 9.98687193371484;
let P_H2OFWIH2O = 2.300151549479167;
let KHindEx = 0.10827403074441103;
let QInsolFSG0 = 1.5197945035520457;

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


export let odeSystem = (t, Q, Fr_data) => {
    
MAcAcAb = 0.3748211934217298;
MAcetateAcetateAb = 0.0924764022070675;
MAcLaBa = 0.5962411513481308;
MLaSa = 4.890979643320094e-06;
MAmAmAb = 0.0035801363339837;
MAmBa = 0.0082031948154816;
MAmFn = 0.1426626440307283;
maxInsolFSGperminEat = 0.0045977496088863;
maxInsolFSGperminRum = 0.0001864092197346;
maxInsolFSGpermolInsol = 0.0002119502877787;
MBaPo = 78.59292923575065;
MBuBuAb = 0.2785958159073042;
MButyrateButyrateAb = 0.8061709071950974;
MFaUFaSBa = 0.0002491883037475;
MFaUFaSBf = 0.0011039632277597;
MFaUFaSFn = 0.0003065935448912;
MFdBfWs = 3.410088489320453;
MFdFnWs = 0.0024140172361085;
MFdPo = 0.0245821725473128;
MFdSp = 3.16707890471614;
MH2MeCH4 = 9.316606893920448e-05;
MInsolFSGRumFn = 0.0305131775370458;
MLaAmBa = 0.0031305179569372;
MLactateLactateAb = 0.0170240861413843;
MLaFn = 0.000222887538829;
MLaNgBa = 0.0002558377814233;
MLaPo = 0.0012340433087772;
MLaPsBa = 0.0124031862678879;
MLaSp = 0.049376925383258;
MPiPiPsBa = 0.0481774761331544;
MPiPiPsFn = 0.140476239135257;
MPiPo = 0.0002628737814699;
MPropionatePropionateAb = 0.4253649342542662;
MPrPrAb = 0.0310708514974177;
MPsFn = 5.047067153581603e-05;
MPsWs = 0.0534821613474951;
MPsWsNg = 0.0025330211374761;
MSfnFn = 0.8270612411134702;
MSfnNg = 0.0005150110123027;
MSiBaWs = 0.1788114136015228;
MSiFnWs = 0.0001897468461277;
MSiPo = 0.3755637225208301;
MSiSp = 1.036168837084129;
MTgWsFaU = 0.0007109452979603;
MVaLaPoFlDe = 0.0003820653454566;
MWsAmBa = 0.0231408869262798;
MWsFn = 0.0022939902382014;
MWsNgFn = 0.0002466781861543;
MWsPo = 0.4455427708821966;
MWsPoPoFl = 2.962216258002724;
MWsPsBa = 0.0810751845833198;
MWsSa = 0.2767573885999613;
MWsSfn = 0.0009760797270605;
MSaPsBaAc = 4.863460866573169;
MSaPsBaBu = 2.334483070794738;
MSaPsBaAcPr = 1.1129166735149882;
MSaPsBaLa = 1.110299774975139;
MSaAmBaAc = 3.102828912844701;
MSaAmBaBu = 4.9555707077416935;
MSaAmBaAcPr = 2.12962643758786;
MSaAmBaLa = 2.602860241255952;
MSaNgBaAc = 4.931700281778142;
MSaNgBaBu = 2.594874594422797;
MSaNgBaAcPr = 1.545784481429896;
MSaNgBaLa = 16.598878226850058;
MSaFaUBaAc = 7.28346301002969;
MSaFaUBaBu = 31.55485470495973;
MSaFaUBaAcPr = 40.64906644921373;
MSaFaUBaLa = 4.028259423889547;
MSaFaSBaAc = 4.79280353341805;
MSaFaSBaBu = 7.274789978996591;
MSaFaSBaAcPr = 3.998348566324623;
MSaFaSBaLa = 2.5291683785628667;
MSpPiPoAc = 26.77729945827333;
MSpPiPoBu = 1.1428227122851105;
MSpPiPoLa = 4.517897700042775;
MWsSp = 0.0061396624553176;
MPsWsBf = 0.0015275728515114;
MPsWsNgBf = 0.0018639814072579;
MWsNgBf = 0.0249522574734887;
MAmBf = 0.0094966015087821;
MSfNgBfAc = 9.150042389264671;
MSfNgBfBu = 5.650043781845892;
MSfNgBfAcPr = 1.97561598453293;
MSfFaUBfAc = 28.724168417640293;
MSfFaUBfBu = 1.0220199541333594;
MSfFaUBfAcPr = 0.5283848015447591;
MSfFaSBfAc = 2.253090007298216;
MSfFaSBfBu = 0.7552633928564058;
MSfFaSBfAcPr = 1.2098893385545837;
MBfPo = 281.911371752416;
MPiPiPsBf = 0.0397580329055388;
MWsSf = 0.0010826060161201;
MWsPsBf = 0.1724388558389321;
MSfPsBfAc = 7.509378729188875;
MSfPsBfBu = 1.87746137398433;
MSfPsBfAcPr = 0.106962891857137;
MFnPo = 674.7187344522899;
MPoPo = 57.19804955188691;
MWsAmBf = 0.3405322332840041;
MSfAmBfAc = 2.750586015643273;
MSfAmBfBu = 0.456845557766675;
MSfAmBfAcPr = 23.163827155345043;
MAcLaFn = 0.0025759437564798;
MAcLaPo = 0.0001029043999943;
VmaxAcAcAb = 0.046141197762778;
VmaxAcetateAcetateAb = 0.000398202437875;
VmaxAmAmAb = 0.0007724071712043;
VmaxAmBa = 0.0018058238304003;
VmaxAmBaLa = 0.0001879081805679;
VmaxAmFn = 0.000353213977843;
VmaxBaPo = 5.355156611241866e-05;
VmaxBuBuAb = 1.5319580871621754;
VmaxButyrateButyrateAb = 0.0005658865795129;
VmaxFaUFaSBa = 0.0001910813156283;
VmaxFaUFaSBf = 7.234503439087815e-05;
VmaxFaUFaSFn = 0.0001342152330218;
VmaxFdFn = 9.516367877744506e-05;
VmaxFdPo = 0.0001483769750265;
VmaxFdSp = 7.697216132003365e-05;
VmaxFdWs = 0.0003421375618603;
VmaxH2MeCH4 = 0.4822464787713507;
VmaxLaBa = 0.000154535054296;
VmaxLactateLactateAb = 0.0003680101207237;
VmaxLaFn = 0.0005391354194582;
VmaxLaLaAb = 0.0005954244447653;
VmaxLaPo = 0.00015093810641;
VmaxLaSa = 0.0232463422589535;
VmaxLaSp = 0.0001015409508996;
VmaxPiPo = 0.0004555719767619;
VmaxPiPs = 0.0006530975689574;
VmaxPiPsFn = 0.0001103832515009;
VmaxPoFlPoFlDe = 0.8682127194818837;
VmaxPoPoFl = 0.0006803657579424;
VmaxPropionatePropionateAb = 0.0065242396408129;
VmaxPrPrAb = 0.0431720546028046;
VmaxPsBa = 0.000205293679889;
VmaxPsBaLa = 0.0009112689059349;
VmaxPsFn = 0.0001932160153921;
VmaxPsLa = 0.0004179019163514;
VmaxPsPo = 0.0003260203988737;
VmaxPsVFABa = 0.0001895973302193;
VmaxSfnFn = 0.051624239236851;
VmaxSiFn = 0.0015453018194461;
VmaxSiPo = 0.0002094450630506;
VmaxSiSp = 0.0001016787152238;
VmaxSiWs = 0.0004797038044806;
VmaxTgWsFaU = 0.0003326161853079;
VmaxUrAm = 9.350609715138916e-05;
VmaxWsBa = 0.003739002058277;
VmaxWsFn = 0.0005556782312894;
VmaxWsPo = 0.0001585154166792;
VmaxWsSa = 0.0003629542746447;
VmaxWsSaLa = 0.0022242553825351;
VmaxWsSfn = 0.0003469639954716;
VmaxWsSp = 0.0011813967485143;
VmaxBaPoAmBu = 7.147589912764097e-05;
VmaxAmBaSaAcPr = 0.0001611773730079;
VmaxWsFaUBfAcPr = 0.0004393757301833;
VmaxSaNgBaAc = 1.8041150194265971;
VmaxSaNgBaBu = 0.0216360286635574;
VmaxSaNgBaAcPr = 0.0020548040988865;
VmaxSaNgBaLa = 0.0007612507998842;
VmaxSpNgPoAc = 0.0002195495345254;
VmaxSpNgPoBu = 0.0017407886457893;
VmaxSpNgPoLa = 0.0094164158453195;
VmaxWsBf = 0.0001729706857263;
VmaxSfNgBfAc = 0.084494407182127;
VmaxSfNgBfBu = 0.1640138520479405;
VmaxSfNgBfAcPr = 0.0166070205288779;
VmaxAmBf = 0.0002614158284092;
VmaxPsBf = 0.0003983818824012;
VmaxBfPo = 0.0590959576996437;
VmaxWsSf = 0.0003958867829326;
VmaxPsVFABf = 0.0022219792080007;
VmaxFnPo = 0.1721233456784251;
VmaxPoPo = 0.0306044529369505;
RH2AmAA = 0.1710160357126656;
R_NADHLaAcPr = 0.3396503824136803;
R_NADHWsAcPr = 0.5891387820512792;
RFaSAmBa = 0.0048885740289471;
RFaSAmFn = 0.0017221434489172;
RFaSBaPo = 0.0004209633357985;
RFaSPsBa = 0.0532029219601694;
RFaSPsFn = 0.0036103625037948;
RFaSPsPo = 0.0756614167343437;
RFaUAmBa = 0.0011643807029413;
RFaUAmFn = 0.0021737136966192;
RFaUBaPo = 0.0001001195478951;
RFaUPsBa = 0.0030124606618264;
RFaUPsFn = 0.0001441963459548;
RFaUPsPo = 0.0209428049028929;
RLaAmFn = 0.7441749936748128;
RLaPsFn = 1.3479711794567508;
RSfnAmFn = 12.079206696205944;
RSfnPsFn = 49.80740024262104;
RWsAmFn = 0.0725050047407207;
RWsPsFn = 0.2899199504305897;
RFdPiPoAc = 0.0949940507323044;
RFdPiPoBu = 0.3765812691593976;
RFdPiPoLa = 1.0704947451482865;
RFdBaPoAc = 0.000794300426275;
RFdBaPoBu = 0.0018949267651643;
RFdBaPoLa = 0.0010817159599788;
RLaBaPoAcBu = 0.1107706351209588;
RSaPsBaAc = 11.386366752232613;
RSaPsBaBu = 0.1894909250364541;
RSaPsBaAcPr = 384.7108710340668;
RSaPsBaLa = 178.25705755652575;
RSaAmBaAc = 57.68044376004591;
RSaAmBaBu = 40.59434794497754;
RSaAmBaAcPr = 282.47271304746533;
RSaAmBaLa = 10.6470266714925;
RSpPiPoAc = 1.5895111081713995;
RSpPiPoBu = 155.54842676983813;
RSpPiPoLa = 52.82839313824943;
RSpBaPoAc = 0.2605522824291854;
RSpBaPoBu = 2.7074898588061616;
RSpBaPoLa = 0.4192455203786739;
RWsPsBaAc = 0.075181308008456;
RWsPsBaBu = 0.0206038319825042;
RWsPsBaAcPr = 0.0004237974997678;
RWsPsBaLa = 3.651284026146312;
RWsAmBaAc = 0.4670466874720288;
RWsAmBaBu = 0.1952908311310215;
RWsAmBaAcPr = 2.2615238943692377;
RWsAmBaLa = 0.0481156008525477;
RLaPsBaAcPr = 5.854342654622863;
RLaPsBaAcBu = 1.1644931188012022;
RLaAmBaAcPr = 0.4439739988830171;
RLaAmBaAcBu = 41.33685508941572;
RLaPiPoAcBu = 12.19149510235606;
RWsPsBfAc = 3.157644224611278;
RWsPsBfBu = 1.0747147038660023;
RWsPsBfAcPr = 0.9147286918427482;
RWsAmBfAc = 0.6170058898932194;
RWsAmBfBu = 2.7883671708779607;
RWsAmBfAcPr = 0.6033891928373828;
RSfPsBfAc = 54.66182537522118;
RSfPsBfBu = 136.29276013670088;
RSfPsBfAcPr = 757.9249545576026;
RSfAmBfAc = 119.24925386854504;
RSfAmBfBu = 98.70755981178004;
RSfAmBfAcPr = 153.9086058384968;
RLaPsPoAcBu = 2.8065090246449755;
RLaBfPoAcBu = 0.2642751562144643;
RLaFnPoAcBu = 0.3034064367179017;
RLaPoPoAcBu = 0.0125613340329963;
RFaUPsBf = 0.0632138826237386;
RFaUAmBf = 0.0047918611702753;
RFaSPsBf = 0.0730169574900637;
RFaSAmBf = 0.0749656342730658;
Y_CO2LaAcPr = 0.2242613996920011;
Y_CO2WsAcPr = 0.8653387112128051;
YAcLa = 0.3043770479416391;
YAcPrWs = 0.6358722204933228;
YAcSfn = 0.0006903281075533;
YAmPs = 0.02185253031583;
YBaAm = 16.03388551488327;
YBaPs = 21.224219043820344;
YBicarbSalBicarb = 0.0207448867135104;
YBuSfn = 0.0146819809266174;
YFaSPoDe = 7.528321604656908e-05;
YFaSSfn = 0.0003873875124172;
YFaSTg = 0.0124234978084654;
YFaSWsFn = 0.0211279587510927;
YFaUPoDe = 0.0001413237617809;
YFaUSfn = 7.311685794912037e-05;
YFaUTg = 0.6713027767387827;
YFaUWsFn = 0.0304949303450549;
YFnAm = 25.737519575181764;
YFnPs = 393.7561364743373;
YLaBa = 0.0014874764387567;
YLaSfn = 0.0003871551215448;
YPrLa = 0.1406685436873168;
YPrWs = 0.3059945805236359;
YPsPoDe = 0.0009008353761998;
YPsSalPs = 0.0036176671550822;
YSfnLa = 3.4489385850004965;
YSfnWs = 18.26730686496757;
YWsPoDe = 0.0011038142303694;
YWsSpDe = 0.0004381706141861;
YBaAmWsAc = 44.16419874326206;
YLaSaPsBa = 0.004066387102815;
YFaUWsBaAc = 0.0314913611937641;
YFaUWsBaBu = 0.0001591017969096;
YFaUWsBaAcPr = 0.0459853974957398;
YFaUWsBaLa = 0.0059193702874404;
YFaUSaBaAc = 0.0006275757251724;
YFaUSaBaBu = 0.0010498578417397;
YFaUSaBaAcPr = 0.0001199950145623;
YFaUSaBaLa = 0.0003006253461702;
YFaULaBaAcPr = 0.0039760388149037;
YFaULaBaAcBu = 0.0065105191161556;
YFaUWsPoAc = 0.082639321562904;
YFaUWsPoBu = 0.0784513298709167;
YFaUWsPoLa = 4.332535013941114;
YFaUSpPoAc = 0.0028121165937829;
YFaUSpPoBu = 0.0126305458111589;
YFaUSpPoLa = 0.0007929245145958;
YFaULaPoAcBu = 0.0154651767186819;
YFaSWsBaAc = 0.1389136930336664;
YFaSWsBaBu = 0.1152907523264462;
YFaSWsBaAcPr = 0.0348827506127475;
YFaSWsBaLa = 0.002217540727673;
YFaSSaBaAc = 3.371641567893648e-05;
YFaSSaBaBu = 0.0020536418311199;
YFaSSaBaAcPr = 0.0003380866794126;
YFaSSaBaLa = 0.000164902834135;
YFaSLaBaAcPr = 0.2968038951127499;
YFaSLaBaAcBu = 0.0071074308329681;
YFaSWsPoAc = 0.0259817292816479;
YFaSWsPoBu = 0.059736503663689;
YFaSWsPoLa = 1.4664447974183517;
YFaSSpPoAc = 0.00041672193063;
YFaSSpPoBu = 0.0157358384971682;
YFaSSpPoLa = 0.0006877692606611;
YFaSLaPoAcBu = 0.0054760580383069;
YPoPiWs = 11.045219069863368;
YPoBaWs = 0.066789825394283;
YAcSaPsBaAc = 0.0035784898175191;
YAcSaPsBaAcPr = 0.0007380506870616;
YAcSpPiPoAc = 0.0028641995442654;
YBuSaPsBaBu = 0.0076240566520337;
YPrSaPsBaAcPr = 0.0214876355054271;
YSaBaWsAc = 65.43675758867901;
YSpPoWsAc = 80.49338858236526;
YSaBaWsBu = 39.79005821236139;
YSpPoWsBu = 378.552140675242;
YSaBaWsAcPr = 20.39952913475999;
YSaBaWsLa = 324.7925129692092;
YSpPoWsLa = 16.225524344422098;
YSaBaLaAcPr = 9.92083672827753;
YSaBaLaAcBu = 0.7643954361387144;
YSpPoLaAcBu = 22.38421329169659;
YWsPsFerm = 0.6234320574815215;
YH2MiAA = 0.0034960053393633;
YBfPs = 86.04002320582572;
YBfAm = 67.25688244348505;
YPoPsWs = 147.74911142626573;
YPoBfWs = 0.5862192915413571;
YPoFnWs = 2.491019279062316;
YPoPoWs = 0.1841488776325253;
YPsBaDe = 0.0050848869648037;
YPsBfDe = 0.0086987185457068;
YPsFnDe = 0.0087331302856514;
YFaUWsBfAc = 0.0233325525685759;
YFaUWsBfBu = 0.2161468569938933;
YFaUWsBfAcPr = 0.0015658378522128;
YFaSWsBfAc = 0.082399368256945;
YFaSWsBfBu = 0.3102151826648761;
YFaSWsBfAcPr = 0.0885692777448101;
YSfBfWsAc = 26.597834183705277;
YSfBfWsBu = 397.9247033868862;
YSfBfWsAcPr = 96.61766538077376;
YFaUSfBfAc = 0.0001752619892601;
YFaUSfBfBu = 0.0004531749302361;
YFaUSfBfAcPr = 0.0004237346493104;
YFaSSfBfAc = 0.0002091181778813;
YFaSSfBfBu = 0.0005765614845972;
YFaSSfBfAcPr = 0.0061351569457646;
YAcSfPsBfAc = 0.0038360811921252;
YAcSfPsBfAcPr = 0.001173818508051;
YBuSfPsBfBu = 0.0035094403972239;
YBuSfnPsFnBu = 0.0039267784257723;
YBuSpPsBaPo = 0.004415203762749;
YPrSfPsBfAcPr = 5.869327452256714e-06;

    let [_intake_, QH2O,
          QPi, QAm,
          QBa, QBf,
          QFn, QPoFl,
          QSpFl, QTg,
          QFu, QFd,
          QSi, QSf,
          QLa, QSa,
          QSfn, QLactate,
          QAc, QAcetate,
          QBu, QButyrate,
          QPr, QPropionate,
          QBr, QNOP,
          QNO3, QNO2,
          QN2O, QNADH,
          QH2, QMe,
          QCH4, QCO2,
          QBicarb, QHplus,
          QmaxHplus,
          QInsolFSG, QOMHind,
          QOMFecal, QCH4_hind,
          QfecalH2O, QfecalN,
          QfecalC, QDp,
          QIp, QRMp,
          QGp, QNp,
          QLBa, QLBf,
          QLp, QLMp,
          QTp, QEp,
          QFp, QUp,
          QPo, QSp,
          QPs, QWs,
          QFaU, QFaS] = Q;
    
  

let intake = _intake(t);
//let intake = processTime(t, feed_pulse_3NOP_7_29_24_0_002_48HR_RUN);
    
FrFu = parseFloat(Fr_data['FrFu']);
FrFd = parseFloat(Fr_data['FrFd']);
FrSi = parseFloat(Fr_data['FrSi']);
FrWs = parseFloat(Fr_data['FrWs']);
FrLa = parseFloat(Fr_data['FrLa']);
FrTg = parseFloat(Fr_data['FrTg']);
FrAm = parseFloat(Fr_data['FrAm']);
FrPs = parseFloat(Fr_data['FrPs']);
FrPi = parseFloat(Fr_data['FrPi']);
    
FrFaU = parseFloat(Fr_data['FrFaU']);
FrFaS = parseFloat(Fr_data['FrFaS']);
    
FrAc = parseFloat(Fr_data['FrAc']);
FrBu = parseFloat(Fr_data['FrBu']);
FrPr = parseFloat(Fr_data['FrPr']);
FrBr = parseFloat(Fr_data['FrBr']);
    
FrNOP = parseFloat(Fr_data['FrNOP']);
FrBicarb = parseFloat(Fr_data['FrBicarb']);
FrP = parseFloat(Fr_data['FrP']); 

QInsolFSG0 = FrNDF * FSG_NDF * kNDFProcess  + FrPi * FSG_CP * kPiProcess
        
    
    
let dintakedt = intake;  
let InFu = intake * FrFu/mrFu;
let InFd = intake * FrFd/mrFd;
let InSi = intake * FrSi/mrSi;
let InWs = intake * FrWs/mrWs;
let InLa = intake * FrLa/mrLa;
let InTg = intake * FrTg/mrTg;
let InAm = intake * FrAm/mrAm;
let InPs = intake * FrPs/mrPs;
let InPi = intake * FrPi/mrPi;
let InFaU = intake * FrFaU/mrFaU;
let InFaS = intake * FrFaS/mrFaS;
let InAc = intake * FrAc/mrAc;
let InBu = intake * FrBu/mrBu;
let InPr = intake * FrPr/mrPr;
let InBr = intake * FrBr/mrBr;
let InNOP = intake * FrNOP/mrNOP;
let InBicarb = intake * FrBicarb/mrBicarb;
let InP = intake * FrP;
let CPi = QPi / V;
let CPs = QPs / V;
let CAm = QAm / V;
let CFu = QFu / V;
let CFd = QFd / V;
let CSi = QSi / V;
let CWs = QWs / V;
    
  
        
//let CLa = QLa / V if QLa > 0 else 1e-5 / V;
let CLa = QLa > 0 ? QLa / V : 1e-5 / V;   

  
let CTg = QTg / V;
let CFaU = QFaU / V;
let CFaS = QFaS/ V;
let CBa = QBa / V;
let CBf = QBf / V;
let CFn = QFn / V;
let CPo = QPo / V;
let CAc = QAc / V;
let CBu = QBu / V;
let CPr = QPr / V;
let CMe = QMe / V;
    
//let CH2 = ((1e-5 * R * Temp) / (hH2 * p0 * V)) if QH2 < 0 else ((QH2 * R * Temp) / (hH2 * p0 * V));    
let CH2 = QH2 < 0 
    ? (1e-5 * R * Temp) / (hH2 * p0 * V)
    : (QH2 * R * Temp) / (hH2 * p0 * V);
    
//let CCO2 = (1e-5 * R * Temp) / (hCO2 * p0 * V) if QCO2 < 0 else (QCO2 * R * Temp) / (hCO2 * p0 * V);
let CCO2 = QCO2 < 0
    ? (1e-5 * R * Temp) / (hCO2 * p0 * V)
    : (QCO2 * R * Temp) / (hCO2 * p0 * V);    
    
    
let CBr = QBr / V;
let CNOP = QNOP / V;
    
//let CHplus = (1e-10 / V) if Math.isnan(QHplus) or QHplus <= 0 else (QHplus / V);
let CHplus = Number.isNaN(QHplus) || QHplus <= 0
    ? 1e-10 / V
    : QHplus / V;
    
    
    
let CmaxHplus = QmaxHplus / V;
let CLactate = QLactate / V;
let CAcetate = QAcetate / V;
let CButyrate = QButyrate / V;
let CPropionate = QPropionate / V;
let CNO2 = QNO2 / V;
let pH = -Math.log10(CHplus);
let pHmin = -Math.log10(CmaxHplus);

//let fNADH = (1/11) if ((QNADH / (cNAD*(QBa + QBf + QFn + QPo))) < (1/11)) else (1/1.1) if ((QNADH / (cNAD*(QBa + QBf + QFn + QPo))) > (1/1.1)) else (QNADH / (cNAD*(QBa + QBf + QFn + QPo)));
let fraction = QNADH / (cNAD * (QBa + QBf + QFn + QPo));
let fNADH = fraction < (1 / 11)
    ? (1 / 11)
    : fraction > (1 / 1.1)
    ? (1 / 1.1)
    : fraction;
  
     
let rNAD = (1 - fNADH) / (fNADH );
    
//let KSoEx = max((-kInsolFSGmod * (QInsolFSG - optimalFSG)**2 + KFlEx), 0);
let KSoEx = Math.max((-kInsolFSGmod * Math.pow(QInsolFSG - optimalFSG, 2) + KFlEx), 0);    
    
//let KSoExFn = max((-kInsolFSGmod * (QInsolFSG0 - optimalFSG)**2 + KFlEx),0);
let KSoExFn = Math.max((-kInsolFSGmod * Math.pow(QInsolFSG0 - optimalFSG, 2) + KFlEx), 0);    
    
let OsmolRumen = (QWs + QAc + QAcetate + QBu + QButyrate + QPr + QPropionate + QLa + QLactate + QAm + QPs + QBicarb + QBr + QNOP + QNO3 + QNO2 + QFaU + QFaS) / V;
let P_H2OFeedH2O = ((intake/FrDM) - intake)/1000;
let U_H2OH2OEx = KFlEx * QH2O;
let U_H2OH2OAb = ((KWaterOsm * ((OsmolRumen - OsmolRumenAVG)))/24) / V * QH2O;
let dQH2Odt = P_H2OSalH2O + P_H2OFWIH2O + P_H2OFeedH2O - U_H2OH2OEx - U_H2OH2OAb;
let P_PiInPi = InPi;
let U_PiPiEx = KSoEx * QPi;
let U_PiPiPsBa = VmaxPiPs * QBa / (1 + MPiPiPsBa/(CPi ));
let U_PiPiPsBf = VmaxPiPs * QBf / (1 + MPiPiPsBf/(CPi ));
let U_PiPiPsFn = VmaxPiPsFn * QFn / (1 + MPiPiPsFn/(CPi ));
let U_PiPoWsAc = VmaxPiPo * QPo/ (1 + MPiPo/(CPi ) + MWsPo/CWs + (Math.pow((QSp/(QSp + QPo)/JSpVFA),ThetaSpPiPo)) + (((QFaU*mrFaU - QFaU*mrFaU/(QFaU*mrFaU + QBa + QBf + QFn + QPo))/mrFaU)/V)/JFaUPoMi);
let U_PiPoWsBu = VmaxPiPo * QPo/ (1 + MPiPo/(CPi ) + MWsPo/CWs + (Math.pow((QSp/(QSp + QPo)/JSpVFA),ThetaSpPiPo)) + (((QFaU*mrFaU - QFaU*mrFaU/(QFaU*mrFaU + QBa + QBf + QFn + QPo))/mrFaU)/V)/JFaUPoMi);
let U_PiPoWsLa = VmaxPiPo * QPo/ (1 + MPiPo/(CPi ) + MWsPo/CWs + (Math.pow((QSp/(QSp + QPo)/JSpVFA),ThetaSpPiPo)) + (((QFaU*mrFaU - QFaU*mrFaU/(QFaU*mrFaU + QBa + QBf + QFn + QPo))/mrFaU)/V)/JFaUPoMi);
let U_PiPoFdAc = VmaxPiPo * QPo/ (1 + MPiPo/(CPi ) + MFdPo/CFd + (Math.pow((QSp/(QSp + QPo)/JSpVFA),ThetaSpPiPo)) + (((QFaU*mrFaU - QFaU*mrFaU/(QFaU*mrFaU + QBa + QBf + QFn + QPo))/mrFaU)/V)/JFaUPoMi);
let U_PiPoFdBu = VmaxPiPo * QPo/ (1 + MPiPo/(CPi ) + MFdPo/CFd + (Math.pow((QSp/(QSp + QPo)/JSpVFA),ThetaSpPiPo)) + (((QFaU*mrFaU - QFaU*mrFaU/(QFaU*mrFaU + QBa + QBf + QFn + QPo))/mrFaU)/V)/JFaUPoMi);
let U_PiPoFdLa = VmaxPiPo * QPo/ (1 + MPiPo/(CPi ) + MFdPo/CFd + (Math.pow((QSp/(QSp + QPo)/JSpVFA),ThetaSpPiPo)) + (((QFaU*mrFaU - QFaU*mrFaU/(QFaU*mrFaU + QBa + QBf + QFn + QPo))/mrFaU)/V)/JFaUPoMi);
let U_PiPoSiAc = VmaxPiPo * QPo/ (1 + MPiPo/(CPi ) + MSiPo/CSi + (Math.pow((QSp/(QSp + QPo)/JSpVFA),ThetaSpPiPo)) + (((QFaU*mrFaU - QFaU*mrFaU/(QFaU*mrFaU + QBa + QBf + QFn + QPo))/mrFaU)/V)/JFaUPoMi);
let U_PiPoSiBu = VmaxPiPo * QPo/ (1 + MPiPo/(CPi ) + MSiPo/CSi + (Math.pow((QSp/(QSp + QPo)/JSpVFA),ThetaSpPiPo)) + (((QFaU*mrFaU - QFaU*mrFaU/(QFaU*mrFaU + QBa + QBf + QFn + QPo))/mrFaU)/V)/JFaUPoMi);
let U_PiPoSiLa = VmaxPiPo * QPo/ (1 + MPiPo/(CPi ) + MSiPo/CSi + (Math.pow((QSp/(QSp + QPo)/JSpVFA),ThetaSpPiPo)) + (((QFaU*mrFaU - QFaU*mrFaU/(QFaU*mrFaU + QBa + QBf + QFn + QPo))/mrFaU)/V)/JFaUPoMi);
let U_PiPoSpAc = VmaxPiPo * QPo/ (1 + MPiPo/(CPi ) + MSpPiPoAc/(QSp/(QSp + QPo)) + (Math.pow((QSp/(QSp + QPo)/JSpVFA),ThetaSpPiPo)) + (((QFaU*mrFaU - QFaU*mrFaU/(QFaU*mrFaU + QBa + QBf + QFn + QPo))/mrFaU)/V)/JFaUPoMi);
let U_PiPoSpBu = VmaxPiPo * QPo/ (1 + MPiPo/(CPi ) + MSpPiPoBu/(QSp/(QSp + QPo)) + (Math.pow((QSp/(QSp + QPo)/JSpVFA),ThetaSpPiPo)) + (((QFaU*mrFaU - QFaU*mrFaU/(QFaU*mrFaU + QBa + QBf + QFn + QPo))/mrFaU)/V)/JFaUPoMi);
let U_PiPoSpLa = VmaxPiPo * QPo/ (1 + MPiPo/(CPi ) + MSpPiPoLa/(QSp/(QSp + QPo)) + (Math.pow((QSp/(QSp + QPo)/JSpVFA),ThetaSpPiPo)) + (((QFaU*mrFaU - QFaU*mrFaU/(QFaU*mrFaU + QBa + QBf + QFn + QPo))/mrFaU)/V)/JFaUPoMi);
let U_PiPoLaAcBu = VmaxPiPo * QPo/ (1 + MPiPo/(CPi ) + MAcLaPo/CAc + (Math.pow((QSp/(QSp + QPo)/JSpVFA),ThetaSpPiPo)) + (((QFaU*mrFaU - QFaU*mrFaU/(QFaU*mrFaU + QBa + QBf + QFn + QPo))/mrFaU)/V)/JFaUPoMi);
let U_PiPoAmAc = VmaxPiPo * QPo/(1 + MPiPo/(CPi ) + (CWs + CSi + CFd + CLa + CAc)/JWsPsAmPo + (Math.pow((QSp/(QSp + QPo)/JSpVFA),ThetaSpPiPo)) + M_NAD_Ac/(rNAD ));
let U_PiPoAmBu = VmaxPiPo * QPo/(1 + MPiPo/(CPi ) + (CWs + CSi + CFd + CLa + CAc)/JWsPsAmPo + (Math.pow((QSp/(QSp + QPo)/JSpVFA),ThetaSpPiPo)));
let U_PiPoAmLa = VmaxPiPo * QPo/(1 + MPiPo/(CPi ) + (CWs + CSi + CFd + CLa + CAc)/JWsPsAmPo + (Math.pow((QSp/(QSp + QPo)/JSpVFA),ThetaSpPiPo)));
let dQPidt = P_PiInPi - U_PiPiEx - U_PiPiPsBa - U_PiPiPsBf - U_PiPiPsFn - U_PiPoWsAc - U_PiPoWsBu - U_PiPoWsLa - U_PiPoFdAc - U_PiPoFdBu - U_PiPoFdLa - U_PiPoSiAc - U_PiPoSiBu - U_PiPoSiLa - U_PiPoSpAc - U_PiPoSpBu - U_PiPoSpLa - U_PiPoLaAcBu - U_PiPoAmAc - U_PiPoAmBu - U_PiPoAmLa;
let U_Pi = U_PiPiEx + U_PiPiPsBa + U_PiPiPsBf + U_PiPiPsFn + U_PiPoWsAc + U_PiPoWsBu + U_PiPoWsLa + U_PiPoFdAc + U_PiPoFdBu + U_PiPoFdLa + U_PiPoSiAc + U_PiPoSiBu + U_PiPoSiLa + U_PiPoSpAc + U_PiPoSpBu + U_PiPoSpLa + U_PiPoLaAcBu + U_PiPoAmAc + U_PiPoAmBu + U_PiPoAmLa;
let P_PsInPs = InPs;
let P_PsSalPs = YPsSalPs * RateSal;
let P_PsPiBa = YPsPi  * U_PiPiPsBa;
let P_PsPiBf = YPsPi  * U_PiPiPsBf;
let P_PsPiFn = YPsPi  * U_PiPiPsFn;
let U_PsPsEx = KFlEx * QPs;
let U_PsBaWsAc = VmaxPsBa * QBa/ (1 + MPsWs/CPs + MWsPsBa/CWs);
let U_PsBaWsBu = VmaxPsBa * QBa/ (1 + MPsWs/CPs + MWsPsBa/CWs);
let U_PsBaWsAcPr = VmaxPsBa * QBa/ (1 + MPsWs/CPs + MWsPsBa/CWs);
let U_PsBaWsLa = VmaxPsBaLa * QBa/ (1 + MPsWs/CPs + MWsPsBaLa/CWs);
let U_PsBaSaAc = VmaxPsBa * QBa/ (1 + MPsWs/CPs + MSaPsBaAc/(QSa/(QSa + QBa)));
let U_PsBaSaBu = VmaxPsBa * QBa/ (1 + MPsWs/CPs + MSaPsBaBu/(QSa/(QSa + QBa)));
let U_PsBaSaAcPr = VmaxPsBa * QBa/ (1 + MPsWs/CPs + MSaPsBaAcPr/(QSa/(QSa + QBa)));
let U_PsBaSaLa = VmaxPsBaLa * QBa/ (1 + MPsWs/CPs + MSaPsBaLa/(QSa/(QSa + QBa)));
let U_PsBaLaAcPr = VmaxPsBa * QBa/ (1 + MPsWs/CPs + MLaPsBa/CLa);
let U_PsBaLaAcBu = VmaxPsBa * QBa/ (1 + MPsWs/CPs + MAcLaBa/CAc);
let U_PsBaAmAc = VmaxPsVFABa * QBa/(1 + MPsWsNg/CPs + (CWs + CLa + CAc)/JWsPsAmBa + M_NAD_Ac/(rNAD ));
let U_PsBaAmBu = VmaxPsVFABa * QBa/(1 + MPsWsNg/CPs + (CWs + CLa + CAc)/JWsPsAmBa);
let U_PsBaAmAcPr = VmaxPsVFABa * QBa/(1 + MPsWsNg/CPs + (CWs + CLa + CAc)/JWsPsAmBa + rNAD/J_NAD_AcPr);
let U_PsBaAmLa = VmaxPsLa * QBa/(1 + MPsWsNg/CPs + (CWs + CLa + CAc)/JWsPsAmBa);

//let U_tsubpH = 1 if pH < pH_crit else 0;
let U_tsubpH = pH < pH_crit ? 1 : 0;
        
let tsubpH = U_tsubpH;

let U_PsBfWsAc = VmaxPsBf * QBf * ((1-tsubpH) + (tsubpH/(1 + Math.pow((MpHBf/pHmin),ThetapHBf) )))/ (1 + MPsWsBf/CPs + MWsPsBf/CWs + (((QFaU*mrFaU - QFaU*mrFaU/(QFaU*mrFaU + QBa + QBf + QFn + QPo))/mrFaU)/V)/JFaUBfAm);
let U_PsBfWsBu = VmaxPsBf * QBf * ((1-tsubpH) + (tsubpH/(1 + Math.pow((MpHBf/pHmin),ThetapHBf))))/ (1 + MPsWsBf/CPs + MWsPsBf/CWs + (((QFaU*mrFaU - QFaU*mrFaU/(QFaU*mrFaU + QBa + QBf + QFn + QPo))/mrFaU)/V)/JFaUBfAm);
let U_PsBfWsAcPr = VmaxPsBf * QBf * ((1-tsubpH) + (tsubpH/(1 + Math.pow((MpHBf/pHmin),ThetapHBf))))/ (1 + MPsWsBf/CPs + MWsPsBf/CWs + (((QFaU*mrFaU - QFaU*mrFaU/(QFaU*mrFaU + QBa + QBf + QFn + QPo))/mrFaU)/V)/JFaUBfAm);
let U_PsBfSfAc = VmaxPsBf * QBf * ((1-tsubpH) + (tsubpH/(1 + Math.pow((MpHBf/pHmin),ThetapHBf))))/ (1 + MPsWsBf/CPs + MSfPsBfAc/(QSf/(QSf + QBf)) + (((QFaU*mrFaU - QFaU*mrFaU/(QFaU*mrFaU + QBa + QBf + QFn + QPo))/mrFaU)/V)/JFaUBfAm);
let U_PsBfSfBu = VmaxPsBf * QBf * ((1-tsubpH) + (tsubpH/(1 + Math.pow((MpHBf/pHmin),ThetapHBf))))/ (1 + MPsWsBf/CPs + MSfPsBfBu/(QSf/(QSf + QBf)) + (((QFaU*mrFaU - QFaU*mrFaU/(QFaU*mrFaU + QBa + QBf + QFn + QPo))/mrFaU)/V)/JFaUBfAm);
let U_PsBfSfAcPr = VmaxPsBf * QBf * ((1-tsubpH) + (tsubpH/(1 + Math.pow((MpHBf/pHmin),ThetapHBf))))/ (1 + MPsWsBf/CPs + MSfPsBfAcPr/(QSf/(QSf + QBf)) + (((QFaU*mrFaU - QFaU*mrFaU/(QFaU*mrFaU + QBa + QBf + QFn + QPo))/mrFaU)/V)/JFaUBfAm);
let U_PsBfAmAc = VmaxPsVFABf * QBf/(1 + MPsWsNgBf/CPs + CWs/JWsPsAmBf + M_NAD_Ac/(rNAD ));
let U_PsBfAmBu = VmaxPsVFABf * QBf/(1 + MPsWsNgBf/CPs + CWs/JWsPsAmBf);
let U_PsBfAmAcPr = VmaxPsVFABf * QBf/(1 + MPsWsNgBf/CPs + CWs/JWsPsAmBf + rNAD/J_NAD_AcPr);
let U_PsFnWsAc = VmaxPsFn * QFn/ (1 + MPsFn/CPs + MWsFn/CWs);
let U_PsFnWsBu = VmaxPsFn * QFn/ (1 + MPsFn/CPs + MWsFn/CWs);
let U_PsFnWsLa = VmaxPsFn * QFn/ (1 + MPsFn/CPs + MWsFn/CWs);
let U_PsFnSfnAc = VmaxPsFn * QFn/ (1 + MPsFn/CPs + MSfnFn/(QSfn/(QSfn + QFn)));
let U_PsFnSfnBu = VmaxPsFn * QFn/ (1 + MPsFn/CPs + MSfnFn/(QSfn/(QSfn + QFn)));
let U_PsFnSfnLa = VmaxPsFn * QFn/ (1 + MPsFn/CPs + MSfnFn/(QSfn/(QSfn + QFn)));
let U_PsFnLaAcBu = VmaxPsFn * QFn/ (1 + MPsFn/CPs + MAcLaFn/CAc);
let U_PsFnAmAc = VmaxPsFn * QFn/(1 + MPsFn/CPs + (CWs + CLa + CAc)/JWsPsAmFn + M_NAD_Ac/(rNAD ));
let U_PsFnAmBu = VmaxPsFn * QFn/(1 + MPsFn/CPs + (CWs + CLa + CAc)/JWsPsAmFn);
let U_PsFnAmLa = VmaxPsFn * QFn/(1 + MPsFn/CPs + (CWs + CLa + CAc)/JWsPsAmFn);
let U_PsPoWsAc = VmaxPsPo * QPo/ (1 + MPsPo/CPs + MWsPo/CWs + (((QFaU*mrFaU - QFaU*mrFaU/(QFaU*mrFaU + QBa + QBf + QFn + QPo))/mrFaU)/V)/JFaUPoMi);
let U_PsPoWsBu = VmaxPsPo * QPo/ (1 + MPsPo/CPs + MWsPo/CWs + (((QFaU*mrFaU - QFaU*mrFaU/(QFaU*mrFaU + QBa + QBf + QFn + QPo))/mrFaU)/V)/JFaUPoMi);
let U_PsPoWsLa = VmaxPsPo * QPo/ (1 + MPsPo/CPs + MWsPo/CWs + (((QFaU*mrFaU - QFaU*mrFaU/(QFaU*mrFaU + QBa + QBf + QFn + QPo))/mrFaU)/V)/JFaUPoMi);
let U_PsPoFdAc = VmaxPsPo * QPo/ (1 + MPsPo/CPs + MFdPo/CFd + (((QFaU*mrFaU - QFaU*mrFaU/(QFaU*mrFaU + QBa + QBf + QFn + QPo))/mrFaU)/V)/JFaUPoMi);
let U_PsPoFdBu = VmaxPsPo * QPo/ (1 + MPsPo/CPs + MFdPo/CFd + (((QFaU*mrFaU - QFaU*mrFaU/(QFaU*mrFaU + QBa + QBf + QFn + QPo))/mrFaU)/V)/JFaUPoMi);
let U_PsPoFdLa = VmaxPsPo * QPo/ (1 + MPsPo/CPs + MFdPo/CFd + (((QFaU*mrFaU - QFaU*mrFaU/(QFaU*mrFaU + QBa + QBf + QFn + QPo))/mrFaU)/V)/JFaUPoMi);
let U_PsPoSiAc = VmaxPsPo * QPo/ (1 + MPsPo/CPs + MSiPo/CSi + (((QFaU*mrFaU - QFaU*mrFaU/(QFaU*mrFaU + QBa + QBf + QFn + QPo))/mrFaU)/V)/JFaUPoMi);
let U_PsPoSiBu = VmaxPsPo * QPo/ (1 + MPsPo/CPs + MSiPo/CSi + (((QFaU*mrFaU - QFaU*mrFaU/(QFaU*mrFaU + QBa + QBf + QFn + QPo))/mrFaU)/V)/JFaUPoMi);
let U_PsPoSiLa = VmaxPsPo * QPo/ (1 + MPsPo/CPs + MSiPo/CSi + (((QFaU*mrFaU - QFaU*mrFaU/(QFaU*mrFaU + QBa + QBf + QFn + QPo))/mrFaU)/V)/JFaUPoMi);
let U_PsPoSpAc = VmaxPsPo * QPo/ (1 + MPsPo/CPs + MSpPiPoAc/(QSp/(QSp + QPo)) + (((QFaU*mrFaU - QFaU*mrFaU/(QFaU*mrFaU + QBa + QBf + QFn + QPo))/mrFaU)/V)/JFaUPoMi);
let U_PsPoSpBu = VmaxPsPo * QPo/ (1 + MPsPo/CPs + MSpPiPoBu/(QSp/(QSp + QPo)) + (((QFaU*mrFaU - QFaU*mrFaU/(QFaU*mrFaU + QBa + QBf + QFn + QPo))/mrFaU)/V)/JFaUPoMi);
let U_PsPoSpLa = VmaxPsPo * QPo/ (1 + MPsPo/CPs + MSpPiPoLa/(QSp/(QSp + QPo)) + (((QFaU*mrFaU - QFaU*mrFaU/(QFaU*mrFaU + QBa + QBf + QFn + QPo))/mrFaU)/V)/JFaUPoMi);
let U_PsPoLaAcBu = VmaxPsPo * QPo/ (1 + MPsPo/CPs + MAcLaPo/CAc + (((QFaU*mrFaU - QFaU*mrFaU/(QFaU*mrFaU + QBa + QBf + QFn + QPo))/mrFaU)/V)/JFaUPoMi);
let U_PsPoAmAc = VmaxPsPo * QPo/(1 + MPsPo/CPs + (CWs + CSi + CFd + CLa + CAc)/JWsPsAmPo + M_NAD_Ac/(rNAD ));
let U_PsPoAmBu = VmaxPsPo * QPo/(1 + MPsPo/CPs + (CWs + CSi + CFd + CLa + CAc)/JWsPsAmPo);
let U_PsPoAmLa = VmaxPsPo * QPo/(1 + MPsPo/CPs + (CWs + CSi + CFd + CLa + CAc)/JWsPsAmPo);
let U_Ps = U_PsPsEx + U_PsBaWsAc+ U_PsBaWsBu + U_PsBaWsAcPr + U_PsBaWsLa + U_PsBaSaAc + U_PsBaSaBu + U_PsBaSaAcPr + U_PsBaSaLa + U_PsBaLaAcPr + U_PsBaLaAcBu + U_PsBaAmAc + U_PsBaAmBu + U_PsBaAmAcPr + U_PsBaAmLa + U_PsBfWsAc + U_PsBfWsBu + U_PsBfWsAcPr + U_PsBfSfAc + U_PsBfSfBu + U_PsBfSfAcPr + U_PsBfAmAc + U_PsBfAmBu + U_PsBfAmAcPr + U_PsFnWsAc + U_PsFnWsBu + U_PsFnWsLa + U_PsFnSfnAc + U_PsFnSfnBu + U_PsFnSfnLa + U_PsFnLaAcBu + U_PsFnAmAc + U_PsFnAmBu + U_PsFnAmLa + U_PsPoWsAc + U_PsPoWsBu + U_PsPoWsLa + U_PsPoFdAc + U_PsPoFdBu + U_PsPoFdLa + U_PsPoSiAc + U_PsPoSiBu + U_PsPoSiLa + U_PsPoSpAc + U_PsPoSpBu + U_PsPoSpLa + U_PsPoLaAcBu + U_PsPoAmAc + U_PsPoAmBu + U_PsPoAmLa;
let U_BaPoAmAc = VmaxBaPo * QPo/(1 + MBaPo/CBa + (CWs + CSi + CFd + CLa + CAc)/JWsPsAmPo + (Math.pow((QSp/(QSp + QPo)/JSpVFA),ThetaSpPiPo)) + M_NAD_Ac/(rNAD ));
let U_BaPoAmBu = VmaxBaPoAmBu * QPo/(1 + MBaPo/CBa + (CWs + CSi + CFd + CLa + CAc)/JWsPsAmPo + (Math.pow((QSp/(QSp + QPo)/JSpVFA),ThetaSpPiPo)));
let U_BaPoAmLa = VmaxBaPoAmBu * QPo/(1 + MBaPo/CBa + (CWs + CSi + CFd + CLa + CAc)/JWsPsAmPo + (Math.pow((QSp/(QSp + QPo)/JSpVFA),ThetaSpPiPo)));
let U_BfPoAmAc = VmaxBfPo * QPo/(1 + MBfPo/CBf + (CWs + CSi + CFd + CLa + CAc)/JWsPsAmPo + (Math.pow((QSp/(QSp + QPo)/JSpVFA),ThetaSpPiPo)) + M_NAD_Ac/(rNAD ));
let U_BfPoAmBu = VmaxBfPo * QPo/(1 + MBfPo/CBf + (CWs + CSi + CFd + CLa + CAc)/JWsPsAmPo + (Math.pow((QSp/(QSp + QPo)/JSpVFA),ThetaSpPiPo)));
let U_BfPoAmLa = VmaxBfPo * QPo/(1 + MBfPo/CBf + (CWs + CSi + CFd + CLa + CAc)/JWsPsAmPo + (Math.pow((QSp/(QSp + QPo)/JSpVFA),ThetaSpPiPo)));
let U_FnPoAmAc = fZoo * VmaxBaPo * QPo/(1 + MFnPo/CFn + (CWs + CSi + CFd + CLa + CAc)/JWsPsAmPo + (Math.pow((QSp/(QSp + QPo)/JSpVFA),ThetaSpPiPo)) + M_NAD_Ac/(rNAD ));
let U_FnPoAmBu = fZoo * VmaxBaPo * QPo/(1 + MFnPo/CFn + (CWs + CSi + CFd + CLa + CAc)/JWsPsAmPo + (Math.pow((QSp/(QSp + QPo)/JSpVFA),ThetaSpPiPo)));
let U_FnPoAmLa = fZoo * VmaxBaPo * QPo/(1 + MFnPo/CFn + (CWs + CSi + CFd + CLa + CAc)/JWsPsAmPo + (Math.pow((QSp/(QSp + QPo)/JSpVFA),ThetaSpPiPo)));
let U_PoPoAmAc = VmaxBaPo * QPo/(1 + MPoPo/CPo + (CWs + CSi + CFd + CLa + CAc)/JWsPsAmPo + (Math.pow((QSp/(QSp + QPo)/JSpVFA),ThetaSpPiPo)) + M_NAD_Ac/(rNAD ));
let U_PoPoAmBu = VmaxBaPo * QPo/(1 + MPoPo/CPo + (CWs + CSi + CFd + CLa + CAc)/JWsPsAmPo + (Math.pow((QSp/(QSp + QPo)/JSpVFA),ThetaSpPiPo)));
let U_PoPoAmLa = VmaxBaPo * QPo/(1 + MPoPo/CPo + (CWs + CSi + CFd + CLa + CAc)/JWsPsAmPo + (Math.pow((QSp/(QSp + QPo)/JSpVFA),ThetaSpPiPo)));
let P_AmInAm = InAm;
let P_AmUrAm = YAmUrAm * VmaxUrAm  * V * FrNi /(1 + CAm/JAmUrAm);  
let P_AmNO2Am = KNO2Am * QNO2;
let P_AmPsBaAc = YAmPs * U_PsBaAmAc;
let P_AmPsBaBu = YAmPs * U_PsBaAmBu;
let P_AmPsBaAcPr = YAmPs * U_PsBaAmAcPr;
let P_AmPsBaLa = YAmPs * U_PsBaAmLa;
let P_AmPsBfAc = YAmPs * U_PsBfAmAc;
let P_AmPsBfBu = YAmPs * U_PsBfAmBu;
let P_AmPsBfAcPr = YAmPs * U_PsBfAmAcPr;
let P_AmPsFnAc = YAmPs * U_PsFnAmAc;
let P_AmPsFnBu = YAmPs * U_PsFnAmBu;
let P_AmPsFnLa = YAmPs * U_PsFnAmLa;
let P_AmPsPoAc = YAmPs * U_PsPoAmAc;
let P_AmPsPoBu = YAmPs * U_PsPoAmBu;
let P_AmPsPoLa = YAmPs * U_PsPoAmLa;
let P_AmPiPoAc = YAmPs * U_PiPoAmAc;
let P_AmPiPoBu = YAmPs * U_PiPoAmBu;
let P_AmPiPoLa = YAmPs * U_PiPoAmLa;
let P_AmBaPoAc = YAmPs * U_BaPoAmAc;
let P_AmBaPoBu = YAmPs * U_BaPoAmBu;
let P_AmBaPoLa = YAmPs * U_BaPoAmLa;
let P_AmBfPoAc = YAmPs * U_BfPoAmAc;
let P_AmBfPoBu = YAmPs * U_BfPoAmBu;
let P_AmBfPoLa = YAmPs * U_BfPoAmLa;
let P_AmFnPoAc = YAmPs * U_FnPoAmAc;
let P_AmFnPoBu = YAmPs * U_FnPoAmBu;
let P_AmFnPoLa = YAmPs * U_FnPoAmLa;
let P_AmPoPoAc = YAmPs * U_PoPoAmAc;
let P_AmPoPoBu = YAmPs * U_PoPoAmBu;
let P_AmPoPoLa = YAmPs * U_PoPoAmLa;
let U_AmAmEx = KFlEx * QAm;
let U_AmBaWsAc = VmaxAmBa * QBa/ (1 + MAmBa/CAm + MWsAmBa/CWs);
let U_AmBaWsBu = VmaxAmBa * QBa/ (1 + MAmBa/CAm + MWsAmBa/CWs);
let U_AmBaWsAcPr = VmaxAmBa * QBa/ (1 + MAmBa/CAm + MWsAmBa/CWs);
let U_AmBaWsLa = VmaxAmBaLa * QBa/ (1 + MAmBa/CAm + MWsAmBaLa/CWs);
let U_AmBaSaAc = VmaxAmBa * QBa/ (1 + MAmBa/CAm + MSaAmBaAc/(QSa/(QSa + QBa)));
let U_AmBaSaBu = VmaxAmBa * QBa/ (1 + MAmBa/CAm + MSaAmBaBu/(QSa/(QSa + QBa)));
let U_AmBaSaAcPr = VmaxAmBaSaAcPr * QBa/ (1 + MAmBa/CAm + MSaAmBaAcPr/(QSa/(QSa + QBa)));
let U_AmBaSaLa = VmaxAmBaLa * QBa/ (1 + MAmBa/CAm + MSaAmBaLa/(QSa/(QSa + QBa)));
let U_AmBaLaAcPr = VmaxAmBa * QBa/ (1 + MAmBa/CAm + MLaAmBa/CLa);
let U_AmBaLaAcBu = VmaxAmBa * QBa/ (1 + MAmBa/CAm + MAcLaBa/CAc);
let U_AmBfWsAc = VmaxAmBf * QBf * ((1-tsubpH) + (tsubpH/(1 + Math.pow((MpHBf/pHmin),ThetapHBf))))/ (1 + MAmBf/CAm + MWsAmBf/CWs + (((QFaU*mrFaU - QFaU*mrFaU/(QFaU*mrFaU + QBa + QBf + QFn + QPo))/mrFaU)/V)/JFaUBfAm);
let U_AmBfWsBu = VmaxAmBf * QBf * ((1-tsubpH) + (tsubpH/(1 + Math.pow((MpHBf/pHmin),ThetapHBf))))/ (1 + MAmBf/CAm + MWsAmBf/CWs + (((QFaU*mrFaU - QFaU*mrFaU/(QFaU*mrFaU + QBa + QBf + QFn + QPo))/mrFaU)/V)/JFaUBfAm);
let U_AmBfWsAcPr = VmaxAmBf * QBf * ((1-tsubpH) + (tsubpH/(1 + Math.pow((MpHBf/pHmin),ThetapHBf))))/ (1 + MAmBf/CAm + MWsAmBf/CWs + (((QFaU*mrFaU - QFaU*mrFaU/(QFaU*mrFaU + QBa + QBf + QFn + QPo))/mrFaU)/V)/JFaUBfAm);
let U_AmBfSfAc = VmaxAmBf * QBf * ((1-tsubpH) + (tsubpH/(1 + Math.pow((MpHBf/pHmin),ThetapHBf))))/ (1 + MAmBf/CAm + MSfAmBfAc/(QSf/(QSf + QBf)) + (((QFaU*mrFaU - QFaU*mrFaU/(QFaU*mrFaU + QBa + QBf + QFn + QPo))/mrFaU)/V)/JFaUBfAm);
let U_AmBfSfBu = VmaxAmBf * QBf * ((1-tsubpH) + (tsubpH/(1 + Math.pow((MpHBf/pHmin),ThetapHBf))))/ (1 + MAmBf/CAm + MSfAmBfBu/(QSf/(QSf + QBf)) + (((QFaU*mrFaU - QFaU*mrFaU/(QFaU*mrFaU + QBa + QBf + QFn + QPo))/mrFaU)/V)/JFaUBfAm);
let U_AmBfSfAcPr = VmaxAmBf * QBf * ((1-tsubpH) + (tsubpH/(1 + Math.pow((MpHBf/pHmin),ThetapHBf))))/ (1 + MAmBf/CAm + MSfAmBfAcPr/(QSf/(QSf + QBf)) + (((QFaU*mrFaU - QFaU*mrFaU/(QFaU*mrFaU + QBa + QBf + QFn + QPo))/mrFaU)/V)/JFaUBfAm);
let U_AmFnWsAc = VmaxAmFn * QFn/ (1 + MAmFn/CAm + MWsFn/CWs);
let U_AmFnWsBu = VmaxAmFn * QFn/ (1 + MAmFn/CAm + MWsFn/CWs);
let U_AmFnWsLa = VmaxAmFn * QFn/ (1 + MAmFn/CAm + MWsFn/CWs);
let U_AmFnSfnAc = VmaxAmFn * QFn/ (1 + MAmFn/CAm + MSfnFn/(QSfn/(QSfn + QFn)));
let U_AmFnSfnBu = VmaxAmFn * QFn/ (1 + MAmFn/CAm + MSfnFn/(QSfn/(QSfn + QFn)));
let U_AmFnSfnLa = VmaxAmFn * QFn/ (1 + MAmFn/CAm + MSfnFn/(QSfn/(QSfn + QFn)));
let U_AmFnLaAcBu = VmaxAmFn * QFn/ (1 + MAmFn/CAm + MAcLaFn/CAc);
let U_AmAmAb = VmaxAmAmAb * Math.pow(V,0.75)/ (1+ MAmAmAb/CAm + (Math.pow((MpHAmAb/pH),ThetapHAmAb)));
let dQAmdt = P_AmInAm + P_AmUrAm + P_AmNO2Am + P_AmPsBaAc + P_AmPsBaBu + P_AmPsBaAcPr + P_AmPsBaLa + P_AmPsBfAc + P_AmPsBfBu + P_AmPsBfAcPr + P_AmPsFnAc + P_AmPsFnBu + P_AmPsFnLa + P_AmPsPoAc + P_AmPsPoBu + P_AmPsPoLa + P_AmPiPoAc + P_AmPiPoBu + P_AmPiPoLa + P_AmBaPoAc + P_AmBaPoBu + P_AmBaPoLa + P_AmBfPoAc + P_AmBfPoBu + P_AmBfPoLa + P_AmFnPoAc + P_AmFnPoBu + P_AmFnPoLa + P_AmPoPoAc + P_AmPoPoBu + P_AmPoPoLa - U_AmAmEx - U_AmBaWsAc - U_AmBaWsBu - U_AmBaWsAcPr - U_AmBaWsLa - U_AmBaSaAc - U_AmBaSaBu - U_AmBaSaAcPr - U_AmBaSaLa - U_AmBaLaAcPr - U_AmBaLaAcBu - U_AmBfWsAc - U_AmBfWsBu - U_AmBfWsAcPr - U_AmBfSfAc - U_AmBfSfBu - U_AmBfSfAcPr - U_AmFnWsAc - U_AmFnWsBu - U_AmFnWsLa - U_AmFnSfnAc - U_AmFnSfnBu - U_AmFnSfnLa - U_AmFnLaAcBu - U_AmAmAb;
let U_Am = U_AmAmEx + U_AmBaWsAc + U_AmBaWsBu + U_AmBaWsAcPr + U_AmBaWsLa + U_AmBaSaAc + U_AmBaSaBu + U_AmBaSaAcPr + U_AmBaSaLa + U_AmBaLaAcPr + U_AmBaLaAcBu + U_AmBfWsAc + U_AmBfWsBu + U_AmBfWsAcPr + U_AmBfSfAc + U_AmBfSfBu + U_AmBfSfAcPr + U_AmFnWsAc + U_AmFnWsBu + U_AmFnWsLa + U_AmFnSfnAc + U_AmFnSfnBu + U_AmFnSfnLa + U_AmFnLaAcBu + U_AmAmAb;
let P_BaPsWsAc = YBaPs * U_PsBaWsAc;
let P_BaPsWsBu = YBaPs * U_PsBaWsBu;
let P_BaPsWsAcPr = YBaPs * U_PsBaWsAcPr;
let P_BaPsWsLa = YBaPs * U_PsBaWsLa;
let P_BaPsSaAc = YBaPs * U_PsBaSaAc;
let P_BaPsSaBu = YBaPs * U_PsBaSaBu;
let P_BaPsSaAcPr = YBaPs * U_PsBaSaAcPr;
let P_BaPsSaLa = YBaPs * U_PsBaSaLa;
let P_BaPsLaAcPr = YBaPs * U_PsBaLaAcPr;
let P_BaPsLaAcBu = YBaPs * U_PsBaLaAcBu;
let P_BaAmWsAc = YBaAmWsAc * U_AmBaWsAc;
let P_BaAmWsBu = YBaAmWsAc * U_AmBaWsBu;
let P_BaAmWsAcPr = YBaAmWsAc * U_AmBaWsAcPr;
let P_BaAmWsLa = YBaAm * U_AmBaWsLa;
let P_BaAmSaAc = YBaAm * U_AmBaSaAc;
let P_BaAmSaBu = YBaAm * U_AmBaSaBu;
let P_BaAmSaAcPr = YBaAm * U_AmBaSaAcPr;
let P_BaAmSaLa = YBaAm * U_AmBaSaLa;
let P_BaAmLaAcPr = YBaAm * U_AmBaLaAcPr;
let P_BaAmLaAcBu = YBaAm * U_AmBaLaAcBu;
let U_BaBaEx = KFlEx * QBa;
let U_BaPoWsAc = VmaxBaPo * QPo/ (1 + MBaPo/CBa + MWsPo/CWs + (Math.pow((QSp/(QSp + QPo)/JSpVFA),ThetaSpPiPo)) + (((QFaU*mrFaU - QFaU*mrFaU/(QFaU*mrFaU + QBa + QBf + QFn + QPo))/mrFaU)/V)/JFaUPoMi);
let U_BaPoWsBu = VmaxBaPo * QPo/ (1 + MBaPo/CBa + MWsPo/CWs + (Math.pow((QSp/(QSp + QPo)/JSpVFA),ThetaSpPiPo)) + (((QFaU*mrFaU - QFaU*mrFaU/(QFaU*mrFaU + QBa + QBf + QFn + QPo))/mrFaU)/V)/JFaUPoMi);
let U_BaPoWsLa = VmaxBaPo * QPo/ (1 + MBaPo/CBa + MWsPo/CWs + (Math.pow((QSp/(QSp + QPo)/JSpVFA),ThetaSpPiPo)) + (((QFaU*mrFaU - QFaU*mrFaU/(QFaU*mrFaU + QBa + QBf + QFn + QPo))/mrFaU)/V)/JFaUPoMi);
let U_BaPoFdAc = VmaxBaPo * QPo/ (1 + MBaPo/CBa + MFdPo/CFd + (Math.pow((QSp/(QSp + QPo)/JSpVFA),ThetaSpPiPo)) + (((QFaU*mrFaU - QFaU*mrFaU/(QFaU*mrFaU + QBa + QBf + QFn + QPo))/mrFaU)/V)/JFaUPoMi);
let U_BaPoFdBu = VmaxBaPo * QPo/ (1 + MBaPo/CBa + MFdPo/CFd + (Math.pow((QSp/(QSp + QPo)/JSpVFA),ThetaSpPiPo)) + (((QFaU*mrFaU - QFaU*mrFaU/(QFaU*mrFaU + QBa + QBf + QFn + QPo))/mrFaU)/V)/JFaUPoMi);
let U_BaPoFdLa = VmaxBaPo * QPo/ (1 + MBaPo/CBa + MFdPo/CFd + (Math.pow((QSp/(QSp + QPo)/JSpVFA),ThetaSpPiPo)) + (((QFaU*mrFaU - QFaU*mrFaU/(QFaU*mrFaU + QBa + QBf + QFn + QPo))/mrFaU)/V)/JFaUPoMi);
let U_BaPoSiAc = VmaxBaPo * QPo/ (1 + MBaPo/CBa + MSiPo/CSi + (Math.pow((QSp/(QSp + QPo)/JSpVFA),ThetaSpPiPo)) + (((QFaU*mrFaU - QFaU*mrFaU/(QFaU*mrFaU + QBa + QBf + QFn + QPo))/mrFaU)/V)/JFaUPoMi);
let U_BaPoSiBu = VmaxBaPo * QPo/ (1 + MBaPo/CBa + MSiPo/CSi + (Math.pow((QSp/(QSp + QPo)/JSpVFA),ThetaSpPiPo)) + (((QFaU*mrFaU - QFaU*mrFaU/(QFaU*mrFaU + QBa + QBf + QFn + QPo))/mrFaU)/V)/JFaUPoMi);
let U_BaPoSiLa = VmaxBaPo * QPo/ (1 + MBaPo/CBa + MSiPo/CSi + (Math.pow((QSp/(QSp + QPo)/JSpVFA),ThetaSpPiPo)) + (((QFaU*mrFaU - QFaU*mrFaU/(QFaU*mrFaU + QBa + QBf + QFn + QPo))/mrFaU)/V)/JFaUPoMi);
let U_BaPoSpAc = VmaxBaPo * QPo/ (1 + MBaPo/CBa + MSpPiPoAc/(QSp/(QSp + QPo)) + (Math.pow((QSp/(QSp + QPo)/JSpVFA),ThetaSpPiPo)) + (((QFaU*mrFaU - QFaU*mrFaU/(QFaU*mrFaU + QBa + QBf + QFn + QPo))/mrFaU)/V)/JFaUPoMi);
let U_BaPoSpBu = VmaxBaPo * QPo/ (1 + MBaPo/CBa + MSpPiPoBu/(QSp/(QSp + QPo)) + (Math.pow((QSp/(QSp + QPo)/JSpVFA),ThetaSpPiPo)) + (((QFaU*mrFaU - QFaU*mrFaU/(QFaU*mrFaU + QBa + QBf + QFn + QPo))/mrFaU)/V)/JFaUPoMi);
let U_BaPoSpLa = VmaxBaPo * QPo/ (1 + MBaPo/CBa + MSpPiPoLa/(QSp/(QSp + QPo)) + (Math.pow((QSp/(QSp + QPo)/JSpVFA),ThetaSpPiPo)) + (((QFaU*mrFaU - QFaU*mrFaU/(QFaU*mrFaU + QBa + QBf + QFn + QPo))/mrFaU)/V)/JFaUPoMi);
let U_BaPoLaAcBu = VmaxBaPo * QPo/ (1 + MBaPo/CBa + MAcLaPo/CAc + (Math.pow((QSp/(QSp + QPo)/JSpVFA),ThetaSpPiPo)) + (((QFaU*mrFaU - QFaU*mrFaU/(QFaU*mrFaU + QBa + QBf + QFn + QPo))/mrFaU)/V)/JFaUPoMi);
let dQBadt = P_BaPsWsAc + P_BaPsWsBu + P_BaPsWsAcPr + P_BaPsWsLa + P_BaPsSaAc + P_BaPsSaBu + P_BaPsSaAcPr + P_BaPsSaLa + P_BaPsLaAcPr + P_BaPsLaAcBu + P_BaAmWsAc + P_BaAmWsBu + P_BaAmWsAcPr +  P_BaAmWsLa + P_BaAmSaAc + P_BaAmSaBu + P_BaAmSaAcPr + P_BaAmSaLa + P_BaAmLaAcPr + P_BaAmLaAcBu - U_BaBaEx - U_BaPoWsAc - U_BaPoWsBu - U_BaPoWsLa - U_BaPoFdAc - U_BaPoFdBu - U_BaPoFdLa - U_BaPoSiAc - U_BaPoSiBu - U_BaPoSiLa - U_BaPoSpAc - U_BaPoSpBu - U_BaPoSpLa - U_BaPoLaAcBu - U_BaPoAmAc - U_BaPoAmBu - U_BaPoAmLa;
let U_Ba = U_BaBaEx + U_BaPoWsAc + U_BaPoWsBu + U_BaPoWsLa + U_BaPoFdAc + U_BaPoFdBu + U_BaPoFdLa + U_BaPoSiAc + U_BaPoSiBu + U_BaPoSiLa + U_BaPoSpAc + U_BaPoSpBu + U_BaPoSpLa + U_BaPoLaAcBu + U_BaPoAmAc + U_BaPoAmBu + U_BaPoAmLa;
let P_BfPsWsAc = YBfPs * U_PsBfWsAc;
let P_BfPsWsBu = YBfPs * U_PsBfWsBu;
let P_BfPsWsAcPr = YBfPs * U_PsBfWsAcPr;
let P_BfPsSfAc = YBfPs * U_PsBfSfAc;
let P_BfPsSfBu = YBfPs * U_PsBfSfBu;
let P_BfPsSfAcPr = YBfPs * U_PsBfSfAcPr;
let P_BfAmWsAc = YBfAm * U_AmBfWsAc;
let P_BfAmWsBu = YBfAm * U_AmBfWsBu;
let P_BfAmWsAcPr = YBfAm * U_AmBfWsAcPr;
let P_BfAmSfAc = YBfAm * U_AmBfSfAc;
let P_BfAmSfBu = YBfAm * U_AmBfSfBu;
let P_BfAmSfAcPr = YBfAm * U_AmBfSfAcPr;
let U_BfBfEx = KSoEx * QBf;
let U_BfPoWsAc = VmaxBfPo * QPo/ (1 + MBfPo/CBf + MWsPo/CWs + (Math.pow((QSp/(QSp + QPo)/JSpVFA),ThetaSpPiPo)) + (((QFaU*mrFaU - QFaU*mrFaU/(QFaU*mrFaU + QBa + QBf + QFn + QPo))/mrFaU)/V)/JFaUPoMi);
let U_BfPoWsBu = VmaxBfPo * QPo/ (1 + MBfPo/CBf + MWsPo/CWs + (Math.pow((QSp/(QSp + QPo)/JSpVFA),ThetaSpPiPo)) + (((QFaU*mrFaU - QFaU*mrFaU/(QFaU*mrFaU + QBa + QBf + QFn + QPo))/mrFaU)/V)/JFaUPoMi);
let U_BfPoWsLa = VmaxBfPo * QPo/ (1 + MBfPo/CBf + MWsPo/CWs + (Math.pow((QSp/(QSp + QPo)/JSpVFA),ThetaSpPiPo)) + (((QFaU*mrFaU - QFaU*mrFaU/(QFaU*mrFaU + QBa + QBf + QFn + QPo))/mrFaU)/V)/JFaUPoMi);
let U_BfPoFdAc = VmaxBfPo * QPo/ (1 + MBfPo/CBf + MFdPo/CFd + (Math.pow((QSp/(QSp + QPo)/JSpVFA),ThetaSpPiPo)) + (((QFaU*mrFaU - QFaU*mrFaU/(QFaU*mrFaU + QBa + QBf + QFn + QPo))/mrFaU)/V)/JFaUPoMi);
let U_BfPoFdBu = VmaxBfPo * QPo/ (1 + MBfPo/CBf + MFdPo/CFd + (Math.pow((QSp/(QSp + QPo)/JSpVFA),ThetaSpPiPo)) + (((QFaU*mrFaU - QFaU*mrFaU/(QFaU*mrFaU + QBa + QBf + QFn + QPo))/mrFaU)/V)/JFaUPoMi);
let U_BfPoFdLa = VmaxBfPo * QPo/ (1 + MBfPo/CBf + MFdPo/CFd + (Math.pow((QSp/(QSp + QPo)/JSpVFA),ThetaSpPiPo)) + (((QFaU*mrFaU - QFaU*mrFaU/(QFaU*mrFaU + QBa + QBf + QFn + QPo))/mrFaU)/V)/JFaUPoMi);
let U_BfPoSiAc = VmaxBfPo * QPo/ (1 + MBfPo/CBf + MSiPo/CSi + (Math.pow((QSp/(QSp + QPo)/JSpVFA),ThetaSpPiPo)) + (((QFaU*mrFaU - QFaU*mrFaU/(QFaU*mrFaU + QBa + QBf + QFn + QPo))/mrFaU)/V)/JFaUPoMi);
let U_BfPoSiBu = VmaxBfPo * QPo/ (1 + MBfPo/CBf + MSiPo/CSi + (Math.pow((QSp/(QSp + QPo)/JSpVFA),ThetaSpPiPo)) + (((QFaU*mrFaU - QFaU*mrFaU/(QFaU*mrFaU + QBa + QBf + QFn + QPo))/mrFaU)/V)/JFaUPoMi);
let U_BfPoSiLa = VmaxBfPo * QPo/ (1 + MBfPo/CBf + MSiPo/CSi + (Math.pow((QSp/(QSp + QPo)/JSpVFA),ThetaSpPiPo)) + (((QFaU*mrFaU - QFaU*mrFaU/(QFaU*mrFaU + QBa + QBf + QFn + QPo))/mrFaU)/V)/JFaUPoMi);
let U_BfPoSpAc = VmaxBfPo * QPo/ (1 + MBfPo/CBf + MSpPiPoAc/(QSp/(QSp + QPo)) + (Math.pow((QSp/(QSp + QPo)/JSpVFA),ThetaSpPiPo)) + (((QFaU*mrFaU - QFaU*mrFaU/(QFaU*mrFaU + QBa + QBf + QFn + QPo))/mrFaU)/V)/JFaUPoMi);
let U_BfPoSpBu = VmaxBfPo * QPo/ (1 + MBfPo/CBf + MSpPiPoBu/(QSp/(QSp + QPo)) + (Math.pow((QSp/(QSp + QPo)/JSpVFA),ThetaSpPiPo)) + (((QFaU*mrFaU - QFaU*mrFaU/(QFaU*mrFaU + QBa + QBf + QFn + QPo))/mrFaU)/V)/JFaUPoMi);
let U_BfPoSpLa = VmaxBfPo * QPo/ (1 + MBfPo/CBf + MSpPiPoLa/(QSp/(QSp + QPo)) + (Math.pow((QSp/(QSp + QPo)/JSpVFA),ThetaSpPiPo)) + (((QFaU*mrFaU - QFaU*mrFaU/(QFaU*mrFaU + QBa + QBf + QFn + QPo))/mrFaU)/V)/JFaUPoMi);
let U_BfPoLaAcBu = VmaxBfPo * QPo/ (1 + MBfPo/CBf + MAcLaPo/CAc + (Math.pow((QSp/(QSp + QPo)/JSpVFA),ThetaSpPiPo)) + (((QFaU*mrFaU - QFaU*mrFaU/(QFaU*mrFaU + QBa + QBf + QFn + QPo))/mrFaU)/V)/JFaUPoMi);
let dQBfdt = P_BfPsWsAc + P_BfPsWsBu + P_BfPsWsAcPr + P_BfPsSfAc + P_BfPsSfBu + P_BfPsSfAcPr + P_BfAmWsAc + P_BfAmWsBu + P_BfAmWsAcPr + P_BfAmSfAc + P_BfAmSfBu + P_BfAmSfAcPr - U_BfBfEx - U_BfPoWsAc - U_BfPoWsBu - U_BfPoWsLa - U_BfPoFdAc - U_BfPoFdBu - U_BfPoFdLa - U_BfPoSiAc - U_BfPoSiBu - U_BfPoSiLa - U_BfPoSpAc - U_BfPoSpBu - U_BfPoSpLa - U_BfPoLaAcBu - U_BfPoAmAc - U_BfPoAmBu - U_BfPoAmLa;
let U_Bf = U_BfBfEx + U_BfPoWsAc + U_BfPoWsBu + U_BfPoWsLa + U_BfPoFdAc + U_BfPoFdBu + U_BfPoFdLa + U_BfPoSiAc + U_BfPoSiBu + U_BfPoSiLa + U_BfPoSpAc + U_BfPoSpBu + U_BfPoSpLa + U_BfPoLaAcBu + U_BfPoAmAc + U_BfPoAmBu + U_BfPoAmLa;
let P_FnPsWsAc = YFnPs * U_PsFnWsAc;
let P_FnPsWsBu = YFnPs * U_PsFnWsBu;
let P_FnPsWsLa = YFnPs * U_PsFnWsLa;
let P_FnPsSfnAc = YFnPs * U_PsFnSfnAc;
let P_FnPsSfnBu = YFnPs * U_PsFnSfnBu;
let P_FnPsSfnLa = YFnPs * U_PsFnSfnLa;
let P_FnPsLaAcBu = YFnPs * U_PsFnLaAcBu;
let P_FnAmWsAc = YFnAm * U_AmFnWsAc;
let P_FnAmWsBu = YFnAm * U_AmFnWsBu;
let P_FnAmWsLa = YFnAm * U_AmFnWsLa;
let P_FnAmSfnAc = YFnAm * U_AmFnSfnAc;
let P_FnAmSfnBu = YFnAm * U_AmFnSfnBu;
let P_FnAmSfnLa = YFnAm * U_AmFnSfnLa;
let P_FnAmLaAcBu = YFnAm * U_AmFnLaAcBu;
let U_FnFnExSo = (1 - fZoo) * KSoExFn * QFn;
let U_FnFnExFl = fZoo * KFlEx * QFn;
let U_FnPoWsAc = fZoo * VmaxFnPo * QPo/ (1 + MFnPo/CFn + MWsPo/CWs + (Math.pow((QSp/(QSp + QPo)/JSpVFA),ThetaSpPiPo)) + (((QFaU*mrFaU - QFaU*mrFaU/(QFaU*mrFaU + QBa + QBf + QFn + QPo))/mrFaU)/V)/JFaUPoMi);
let U_FnPoWsBu = fZoo * VmaxFnPo * QPo/ (1 + MFnPo/CFn + MWsPo/CWs + (Math.pow((QSp/(QSp + QPo)/JSpVFA),ThetaSpPiPo)) + (((QFaU*mrFaU - QFaU*mrFaU/(QFaU*mrFaU + QBa + QBf + QFn + QPo))/mrFaU)/V)/JFaUPoMi);
let U_FnPoWsLa = fZoo * VmaxFnPo * QPo/ (1 + MFnPo/CFn + MWsPo/CWs + (Math.pow((QSp/(QSp + QPo)/JSpVFA),ThetaSpPiPo)) + (((QFaU*mrFaU - QFaU*mrFaU/(QFaU*mrFaU + QBa + QBf + QFn + QPo))/mrFaU)/V)/JFaUPoMi);
let U_FnPoFdAc = fZoo * VmaxFnPo * QPo/ (1 + MFnPo/CFn + MFdPo/CFd + (Math.pow((QSp/(QSp + QPo)/JSpVFA),ThetaSpPiPo)) + (((QFaU*mrFaU - QFaU*mrFaU/(QFaU*mrFaU + QBa + QBf + QFn + QPo))/mrFaU)/V)/JFaUPoMi);
let U_FnPoFdBu = fZoo * VmaxFnPo * QPo/ (1 + MFnPo/CFn + MFdPo/CFd + (Math.pow((QSp/(QSp + QPo)/JSpVFA),ThetaSpPiPo)) + (((QFaU*mrFaU - QFaU*mrFaU/(QFaU*mrFaU + QBa + QBf + QFn + QPo))/mrFaU)/V)/JFaUPoMi);
let U_FnPoFdLa = fZoo * VmaxFnPo * QPo/ (1 + MFnPo/CFn + MFdPo/CFd + (Math.pow((QSp/(QSp + QPo)/JSpVFA),ThetaSpPiPo)) + (((QFaU*mrFaU - QFaU*mrFaU/(QFaU*mrFaU + QBa + QBf + QFn + QPo))/mrFaU)/V)/JFaUPoMi);
let U_FnPoSiAc = fZoo * VmaxFnPo * QPo/ (1 + MFnPo/CFn + MSiPo/CSi + (Math.pow((QSp/(QSp + QPo)/JSpVFA),ThetaSpPiPo)) + (((QFaU*mrFaU - QFaU*mrFaU/(QFaU*mrFaU + QBa + QBf + QFn + QPo))/mrFaU)/V)/JFaUPoMi);
let U_FnPoSiBu = fZoo * VmaxFnPo * QPo/ (1 + MFnPo/CFn + MSiPo/CSi + (Math.pow((QSp/(QSp + QPo)/JSpVFA),ThetaSpPiPo)) + (((QFaU*mrFaU - QFaU*mrFaU/(QFaU*mrFaU + QBa + QBf + QFn + QPo))/mrFaU)/V)/JFaUPoMi);
let U_FnPoSiLa = fZoo * VmaxFnPo * QPo/ (1 + MFnPo/CFn + MSiPo/CSi + (Math.pow((QSp/(QSp + QPo)/JSpVFA),ThetaSpPiPo)) + (((QFaU*mrFaU - QFaU*mrFaU/(QFaU*mrFaU + QBa + QBf + QFn + QPo))/mrFaU)/V)/JFaUPoMi);
let U_FnPoSpAc = fZoo * VmaxFnPo * QPo/ (1 + MFnPo/CFn + MSpPiPoAc/(QSp/(QSp + QPo)) + (Math.pow((QSp/(QSp + QPo)/JSpVFA),ThetaSpPiPo)) + (((QFaU*mrFaU - QFaU*mrFaU/(QFaU*mrFaU + QBa + QBf + QFn + QPo))/mrFaU)/V)/JFaUPoMi);
let U_FnPoSpBu = fZoo * VmaxFnPo * QPo/ (1 + MFnPo/CFn + MSpPiPoBu/(QSp/(QSp + QPo)) + (Math.pow((QSp/(QSp + QPo)/JSpVFA),ThetaSpPiPo)) + (((QFaU*mrFaU - QFaU*mrFaU/(QFaU*mrFaU + QBa + QBf + QFn + QPo))/mrFaU)/V)/JFaUPoMi);
let U_FnPoSpLa = fZoo * VmaxFnPo * QPo/ (1 + MFnPo/CFn + MSpPiPoLa/(QSp/(QSp + QPo)) + (Math.pow((QSp/(QSp + QPo)/JSpVFA),ThetaSpPiPo)) + (((QFaU*mrFaU - QFaU*mrFaU/(QFaU*mrFaU + QBa + QBf + QFn + QPo))/mrFaU)/V)/JFaUPoMi);
let U_FnPoLaAcBu = fZoo * VmaxFnPo * QPo/ (1 + MFnPo/CFn + MAcLaPo/CAc + (Math.pow((QSp/(QSp + QPo)/JSpVFA),ThetaSpPiPo)) + (((QFaU*mrFaU - QFaU*mrFaU/(QFaU*mrFaU + QBa + QBf + QFn + QPo))/mrFaU)/V)/JFaUPoMi);
let dQFndt = P_FnPsWsAc + P_FnPsWsBu + P_FnPsWsLa + P_FnPsSfnAc + P_FnPsSfnBu + P_FnPsSfnLa + P_FnPsLaAcBu + P_FnAmWsAc + P_FnAmWsBu + P_FnAmWsLa + P_FnAmSfnAc + P_FnAmSfnBu + P_FnAmSfnLa + P_FnAmLaAcBu - U_FnFnExSo - U_FnFnExFl - U_FnPoWsAc - U_FnPoWsBu - U_FnPoWsLa - U_FnPoFdAc - U_FnPoFdBu - U_FnPoFdLa - U_FnPoSiAc - U_FnPoSiBu - U_FnPoSiLa - U_FnPoSpAc - U_FnPoSpBu - U_FnPoSpLa - U_FnPoLaAcBu - U_FnPoAmAc - U_FnPoAmBu - U_FnPoAmLa;
let U_Fn =  U_FnFnExSo + U_FnFnExFl + U_FnPoWsAc + U_FnPoWsBu + U_FnPoWsLa + U_FnPoFdAc + U_FnPoFdBu + U_FnPoFdLa + U_FnPoSiAc + U_FnPoSiBu + U_FnPoSiLa + U_FnPoSpAc + U_FnPoSpBu + U_FnPoSpLa + U_FnPoLaAcBu + U_FnPoAmAc + U_FnPoAmBu + U_FnPoAmLa;
let P_PoFlPo = VmaxPoPoFl * QPo/ (1 + (MWsPoPoFl/CWs) + (Math.pow((QSp/(QSp + QPo)/JSpVFA),ThetaSpPiPo)));
let P_SpFlSp = VmaxPoPoFl * QSp/ (1 + (MWsPoPoFl/CWs) + (Math.pow((QSp/(QSp + QPo)/JSpVFA),ThetaSpPiPo)));
let U_PoFlPoFlEx = KFlEx * QPoFl;
let U_SpFlSpFlEx = KFlEx * QSpFl;
let dQPoFldt = P_PoFlPo - U_PoFlPoFlEx;
let dQSpFldt = P_SpFlSp - U_SpFlSpFlEx;
let U_PoPoExFl = U_PoFlPoFlEx;
let U_PoPoWsAc = VmaxPoPo * QPo/ (1 + MPoPo/CPo + MWsPo/CWs + Math.pow((QSp/(QSp + QPo)/JSpVFA),ThetaSpPiPo) + (((QFaU*mrFaU - QFaU*mrFaU/(QFaU*mrFaU + QBa + QBf + QFn + QPo))/mrFaU)/V)/JFaUPoMi);
let U_PoPoWsBu = VmaxPoPo * QPo/ (1 + MPoPo/CPo + MWsPo/CWs + Math.pow((QSp/(QSp + QPo)/JSpVFA),ThetaSpPiPo) + (((QFaU*mrFaU - QFaU*mrFaU/(QFaU*mrFaU + QBa + QBf + QFn + QPo))/mrFaU)/V)/JFaUPoMi);
let U_PoPoWsLa = VmaxPoPo * QPo/ (1 + MPoPo/CPo + MWsPo/CWs + Math.pow((QSp/(QSp + QPo)/JSpVFA),ThetaSpPiPo) + (((QFaU*mrFaU - QFaU*mrFaU/(QFaU*mrFaU + QBa + QBf + QFn + QPo))/mrFaU)/V)/JFaUPoMi);
let U_PoPoFdAc = VmaxPoPo * QPo/ (1 + MPoPo/CPo + MFdPo/CFd + Math.pow((QSp/(QSp + QPo)/JSpVFA),ThetaSpPiPo) + (((QFaU*mrFaU - QFaU*mrFaU/(QFaU*mrFaU + QBa + QBf + QFn + QPo))/mrFaU)/V)/JFaUPoMi);
let U_PoPoFdBu = VmaxPoPo * QPo/ (1 + MPoPo/CPo + MFdPo/CFd + Math.pow((QSp/(QSp + QPo)/JSpVFA),ThetaSpPiPo) + (((QFaU*mrFaU - QFaU*mrFaU/(QFaU*mrFaU + QBa + QBf + QFn + QPo))/mrFaU)/V)/JFaUPoMi);
let U_PoPoFdLa = VmaxPoPo * QPo/ (1 + MPoPo/CPo + MFdPo/CFd + Math.pow((QSp/(QSp + QPo)/JSpVFA),ThetaSpPiPo) + (((QFaU*mrFaU - QFaU*mrFaU/(QFaU*mrFaU + QBa + QBf + QFn + QPo))/mrFaU)/V)/JFaUPoMi);
let U_PoPoSiAc = VmaxPoPo * QPo/ (1 + MPoPo/CPo + MSiPo/CSi + Math.pow((QSp/(QSp + QPo)/JSpVFA),ThetaSpPiPo) + (((QFaU*mrFaU - QFaU*mrFaU/(QFaU*mrFaU + QBa + QBf + QFn + QPo))/mrFaU)/V)/JFaUPoMi);
let U_PoPoSiBu = VmaxPoPo * QPo/ (1 + MPoPo/CPo + MSiPo/CSi + Math.pow((QSp/(QSp + QPo)/JSpVFA),ThetaSpPiPo) + (((QFaU*mrFaU - QFaU*mrFaU/(QFaU*mrFaU + QBa + QBf + QFn + QPo))/mrFaU)/V)/JFaUPoMi);
let U_PoPoSiLa = VmaxPoPo * QPo/ (1 + MPoPo/CPo + MSiPo/CSi + Math.pow((QSp/(QSp + QPo)/JSpVFA),ThetaSpPiPo) + (((QFaU*mrFaU - QFaU*mrFaU/(QFaU*mrFaU + QBa + QBf + QFn + QPo))/mrFaU)/V)/JFaUPoMi);
let U_PoPoSpAc = VmaxPoPo * QPo/ (1 + MPoPo/CPo + MSpPiPoAc/(QSp/(QSp + QPo)) + Math.pow((QSp/(QSp + QPo)/JSpVFA),ThetaSpPiPo) + (((QFaU*mrFaU - QFaU*mrFaU/(QFaU*mrFaU + QBa + QBf + QFn + QPo))/mrFaU)/V)/JFaUPoMi);
let U_PoPoSpBu = VmaxPoPo * QPo/ (1 + MPoPo/CPo + MSpPiPoBu/(QSp/(QSp + QPo)) + Math.pow((QSp/(QSp + QPo)/JSpVFA),ThetaSpPiPo) + (((QFaU*mrFaU - QFaU*mrFaU/(QFaU*mrFaU + QBa + QBf + QFn + QPo))/mrFaU)/V)/JFaUPoMi);
let U_PoPoSpLa = VmaxPoPo * QPo/ (1 + MPoPo/CPo + MSpPiPoLa/(QSp/(QSp + QPo)) + Math.pow((QSp/(QSp + QPo)/JSpVFA),ThetaSpPiPo) + (((QFaU*mrFaU - QFaU*mrFaU/(QFaU*mrFaU + QBa + QBf + QFn + QPo))/mrFaU)/V)/JFaUPoMi);
let U_PoPoLaAcBu = VmaxPoPo * QPo/ (1 + MPoPo/CPo + MAcLaPo/CAc + Math.pow((QSp/(QSp + QPo)/JSpVFA),ThetaSpPiPo) + (((QFaU*mrFaU - QFaU*mrFaU/(QFaU*mrFaU + QBa + QBf + QFn + QPo))/mrFaU)/V)/JFaUPoMi);
let P_PoPiWsAc = YPoPiWs * U_PiPoWsAc;
let P_PoPiWsBu = YPoPiWs * U_PiPoWsBu;
let P_PoPiWsLa = YPoPiWs * U_PiPoWsLa;
let P_PoPiFdAc = YPoPiWs * U_PiPoFdAc;
let P_PoPiFdBu = YPoPiWs * U_PiPoFdBu;
let P_PoPiFdLa = YPoPiWs * U_PiPoFdLa;
let P_PoPiSiAc = YPoPiWs * U_PiPoSiAc;
let P_PoPiSiBu = YPoPiWs * U_PiPoSiBu;
let P_PoPiSiLa = YPoPiWs * U_PiPoSiLa;
let P_PoPiSpAc = YPoPiWs * U_PiPoSpAc;
let P_PoPiSpBu = YPoPiWs * U_PiPoSpBu;
let P_PoPiSpLa = YPoPiWs * U_PiPoSpLa;
let P_PoPsWsAc = YPoPsWs * U_PsPoWsAc;
let P_PoPsWsBu = YPoPsWs * U_PsPoWsBu;
let P_PoPsWsLa = YPoPsWs * U_PsPoWsLa;
let P_PoPsFdAc = YPoPsWs * U_PsPoFdAc;
let P_PoPsFdBu = YPoPsWs * U_PsPoFdBu;
let P_PoPsFdLa = YPoPsWs * U_PsPoFdLa;
let P_PoPsSiAc = YPoPsWs * U_PsPoSiAc;
let P_PoPsSiBu = YPoPsWs * U_PsPoSiBu;
let P_PoPsSiLa = YPoPsWs * U_PsPoSiLa;
let P_PoPsSpAc = YPoPsWs * U_PsPoSpAc;
let P_PoPsSpBu = YPoPsWs * U_PsPoSpBu;
let P_PoPsSpLa = YPoPsWs * U_PsPoSpLa;
let P_PoBaWsAc = YPoBaWs * U_BaPoWsAc;
let P_PoBaWsBu = YPoBaWs * U_BaPoWsBu;
let P_PoBaWsLa = YPoBaWs * U_BaPoWsLa;
let P_PoBaFdAc = YPoBaWs * U_BaPoFdAc;
let P_PoBaFdBu = YPoBaWs * U_BaPoFdBu;
let P_PoBaFdLa = YPoBaWs * U_BaPoFdLa;
let P_PoBaSiAc = YPoBaWs * U_BaPoSiAc;
let P_PoBaSiBu = YPoBaWs * U_BaPoSiBu;
let P_PoBaSiLa = YPoBaWs * U_BaPoSiLa;
let P_PoBaSpAc = YPoBaWs * U_BaPoSpAc;
let P_PoBaSpBu = YPoBaWs * U_BaPoSpBu;
let P_PoBaSpLa = YPoBaWs * U_BaPoSpLa;
let P_PoBfWsAc = YPoBfWs * U_BfPoWsAc;
let P_PoBfWsBu = YPoBfWs * U_BfPoWsBu;
let P_PoBfWsLa = YPoBfWs * U_BfPoWsLa;
let P_PoBfFdAc = YPoBfWs * U_BfPoFdAc;
let P_PoBfFdBu = YPoBfWs * U_BfPoFdBu;
let P_PoBfFdLa = YPoBfWs * U_BfPoFdLa;
let P_PoBfSiAc = YPoBfWs * U_BfPoSiAc;
let P_PoBfSiBu = YPoBfWs * U_BfPoSiBu;
let P_PoBfSiLa = YPoBfWs * U_BfPoSiLa;
let P_PoBfSpAc = YPoBfWs * U_BfPoSpAc;
let P_PoBfSpBu = YPoBfWs * U_BfPoSpBu;
let P_PoBfSpLa = YPoBfWs * U_BfPoSpLa;
let P_PoFnWsAc = YPoFnWs * U_FnPoWsAc;
let P_PoFnWsBu = YPoFnWs * U_FnPoWsBu;
let P_PoFnWsLa = YPoFnWs * U_FnPoWsLa;
let P_PoFnFdAc = YPoFnWs * U_FnPoFdAc;
let P_PoFnFdBu = YPoFnWs * U_FnPoFdBu;
let P_PoFnFdLa = YPoFnWs * U_FnPoFdLa;
let P_PoFnSiAc = YPoFnWs * U_FnPoSiAc;
let P_PoFnSiBu = YPoFnWs * U_FnPoSiBu;
let P_PoFnSiLa = YPoFnWs * U_FnPoSiLa;
let P_PoFnSpAc =  YPoFnWs * U_FnPoSpAc;
let P_PoFnSpBu = YPoFnWs * U_FnPoSpBu;
let P_PoFnSpLa = YPoFnWs * U_FnPoSpLa;
let P_PoPoWsAc = YPoFnWs * U_PoPoWsAc;
let P_PoPoWsBu = YPoPoWs * U_PoPoWsBu;
let P_PoPoWsLa = YPoPoWs * U_PoPoWsLa;
let P_PoPoFdAc = YPoPoWs * U_PoPoFdAc;
let P_PoPoFdBu = YPoPoWs * U_PoPoFdBu;
let P_PoPoFdLa = YPoPoWs * U_PoPoFdLa;
let P_PoPoSiAc = YPoPoWs * U_PoPoSiAc;
let P_PoPoSiBu = YPoPoWs * U_PoPoSiBu;
let P_PoPoSiLa = YPoPoWs * U_PoPoSiLa;
let P_PoPoSpAc = YPoPoWs * U_PoPoSpAc;
let P_PoPoSpBu = YPoPoWs * U_PoPoSpBu;
let P_PoPoSpLa = YPoPoWs * U_PoPoSpLa;
let P_PoPiLaAcBu = YPoPiWs * U_PiPoLaAcBu;
let P_PoPsLaAcBu = YPoPsWs * U_PsPoLaAcBu;
let P_PoBaLaAcBu = YPoBaWs * U_BaPoLaAcBu;
let P_PoBfLaAcBu = YPoBfWs * U_BfPoLaAcBu;
let P_PoFnLaAcBu = YPoFnWs * U_FnPoLaAcBu;
let P_PoPoLaAcBu = YPoPoWs * U_PoPoLaAcBu;
let U_Po =  U_PoPoExFl + U_PoPoWsAc + U_PoPoWsBu + U_PoPoWsLa + U_PoPoFdAc + U_PoPoFdBu + U_PoPoFdLa + U_PoPoSiAc + U_PoPoSiBu + U_PoPoSiLa + U_PoPoSpAc + U_PoPoSpBu + U_PoPoSpLa + U_PoPoLaAcBu + U_PoPoAmAc + U_PoPoAmBu + U_PoPoAmLa;
let P_TgInTg = InTg;
let U_TgTgEx = KSoEx * QTg;
let U_TgWsFaUBa = VmaxTgWsFaU * QBa/ (1 + MTgWsFaU/CTg);
let U_TgWsFaUBf = VmaxTgWsFaU * QBf/ (1 + MTgWsFaU/CTg);
let U_TgWsFaSBa = VmaxTgWsFaU * QBa/ (1 + MTgWsFaU/CTg);
let U_TgWsFaSBf = VmaxTgWsFaU * QBf/ (1 + MTgWsFaU/CTg);
let dQTgdt = P_TgInTg - U_TgTgEx - U_TgWsFaUBa - U_TgWsFaUBf - U_TgWsFaSBa - U_TgWsFaSBf;
let U_Tg = U_TgTgEx + U_TgWsFaUBa + U_TgWsFaUBf + U_TgWsFaSBa + U_TgWsFaSBf;
let P_FuInFu = InFu;
let U_FuFuEx = KSoEx * QFu;
let dQFudt = P_FuInFu - U_FuFuEx;
let U_Fu = U_FuFuEx;
let P_FdInFd = InFd;
let U_FdFdEx = KSoEx * QFd;
let U_FdFdBfWs = VmaxFdWs * QBf / (1 + MFdBfWs/CFd);
let U_FdFdFnWs = VmaxFdFn * QFn/ (1 + MFdFnWs/CFd);
let U_FdPiPoAc = RFdPiPoAc * (U_PiPoFdAc/U_Pi) * QFd / (1 + M_NAD_Ac/(rNAD ));
let U_FdPiPoBu = RFdPiPoBu * (U_PiPoFdBu/U_Pi) * QFd;
let U_FdPiPoLa = RFdPiPoLa * (U_PiPoFdLa/U_Pi) * QFd;
let U_FdPsPoAc = RFdPiPoAc * (U_PsPoFdAc/U_Ps) * QFd  / (1 + M_NAD_Ac/(rNAD ));
let U_FdPsPoBu = RFdPiPoBu * (U_PsPoFdBu/U_Ps) * QFd;
let U_FdPsPoLa = RFdPiPoLa * (U_PsPoFdLa/U_Ps) * QFd;
let U_FdBaPoAc = RFdBaPoAc * (U_BaPoFdAc/U_Ba) * QFd / (1 + M_NAD_Ac/(rNAD ));
let U_FdBaPoBu = RFdBaPoBu * (U_BaPoFdBu/U_Ba) * QFd;
let U_FdBaPoLa = RFdBaPoLa * (U_BaPoFdLa/U_Ba) * QFd;
let U_FdBfPoAc = RFdBaPoAc * (U_BfPoFdAc/U_Bf) * QFd / (1 + M_NAD_Ac/(rNAD ));
let U_FdBfPoBu = RFdBaPoBu * (U_BfPoFdBu/U_Bf) * QFd;
let U_FdBfPoLa = RFdBaPoLa * (U_BfPoFdLa/U_Bf) * QFd;
let U_FdFnPoAc = RFdBaPoAc * (U_FnPoFdAc/U_Fn) * QFd / (1 + M_NAD_Ac/(rNAD ));
let U_FdFnPoBu = RFdBaPoBu * (U_FnPoFdBu/U_Fn) * QFd;
let U_FdFnPoLa = RFdBaPoLa * (U_FnPoFdLa/U_Fn) * QFd;
let U_FdPoPoAc = RFdBaPoAc * (U_PoPoFdAc/U_Po) * QFd / (1 + M_NAD_Ac/(rNAD ));
let U_FdPoPoBu = RFdBaPoBu * (U_PoPoFdBu/U_Po) * QFd;
let U_FdPoPoLa = RFdBaPoLa * (U_PoPoFdLa/U_Po) * QFd;
let U_FdNgPoAc = VmaxFdPo * QPo/ (1 + MFdPo/CFd + CPi/JPiNgPo + CPs/JPsNgPo + CBa/JBaNgPo + CBf/JBfNgPo + CFn/JFnPoNg + CPo/JPoNgPo + Math.pow((QSp/(QSp + QPo)/JSpVFA),ThetaSpPiPo) + M_NAD_Ac/(rNAD ));
let U_FdNgPoBu = VmaxFdPo * QPo/ (1 + MFdPo/CFd  + CPi/JPiNgPo + CPs/JPsNgPo + CBa/JBaNgPo + CBf/JBfNgPo + CFn/JFnPoNg + CPo/JPoNgPo + Math.pow((QSp/(QSp + QPo)/JSpVFA),ThetaSpPiPo));
let U_FdNgPoLa = VmaxFdPo * QPo/ (1 + MFdPo/CFd  + CPi/JPiNgPo + CPs/JPsNgPo + CBa/JBaNgPo + CBf/JBfNgPo + CFn/JFnPoNg + CPo/JPoNgPo + Math.pow((QSp/(QSp + QPo)/JSpVFA),ThetaSpPiPo));
let U_FdSpPoAc = VmaxFdSp * QPo/ (1 + MFdSp/CFd + Math.pow((QSp/(QSp + QPo)/JSpSp),ThetaSpSpPo) + M_NAD_Ac/(rNAD ));
let U_FdSpPoBu = VmaxFdSp * QPo/ (1 + MFdSp/CFd + Math.pow((QSp/(QSp + QPo)/JSpSp),ThetaSpSpPo));
let U_FdSpPoLa = VmaxFdSp * QPo/ (1 + MFdSp/CFd + Math.pow((QSp/(QSp + QPo)/JSpSp),ThetaSpSpPo));
let U_FdFaUPoAc = VmaxFdPo * QPo/ (1 + MFdPo/CFd + Math.pow((QSp/(QSp + QPo)/JSpVFA),ThetaSpPiPo) + M_NAD_Ac/(rNAD ));
let U_FdFaUPoBu = VmaxFdPo * QPo/ (1 + MFdPo/CFd + Math.pow((QSp/(QSp + QPo)/JSpVFA),ThetaSpPiPo));
let U_FdFaUPoLa = VmaxFdPo * QPo/ (1 + MFdPo/CFd + Math.pow((QSp/(QSp + QPo)/JSpVFA),ThetaSpPiPo));
let U_FdFaSPoAc = VmaxFdPo * QPo/ (1 + MFdPo/CFd + Math.pow((QSp/(QSp + QPo)/JSpVFA),ThetaSpPiPo) + M_NAD_Ac/(rNAD ));
let U_FdFaSPoBu = VmaxFdPo * QPo/ (1 + MFdPo/CFd + Math.pow((QSp/(QSp + QPo)/JSpVFA),ThetaSpPiPo));
let U_FdFaSPoLa = VmaxFdPo * QPo/ (1 + MFdPo/CFd + Math.pow((QSp/(QSp + QPo)/JSpVFA),ThetaSpPiPo));
let dQFddt = P_FdInFd - U_FdFdEx - U_FdFdBfWs - U_FdFdFnWs - U_FdPiPoAc - U_FdPiPoBu - U_FdPiPoLa - U_FdPsPoAc - U_FdPsPoBu - U_FdPsPoLa - U_FdBaPoAc - U_FdBaPoBu - U_FdBaPoLa - U_FdBfPoAc - U_FdBfPoBu - U_FdBfPoLa - U_FdFnPoAc - U_FdFnPoBu - U_FdFnPoLa - U_FdPoPoAc - U_FdPoPoBu - U_FdPoPoLa - U_FdNgPoAc - U_FdNgPoBu - U_FdNgPoLa - U_FdSpPoAc - U_FdSpPoBu - U_FdSpPoLa - U_FdFaUPoAc - U_FdFaUPoBu - U_FdFaUPoLa - U_FdFaSPoAc - U_FdFaSPoBu - U_FdFaSPoLa;
let U_Fd = U_FdFdEx  + U_FdFdBfWs  + U_FdFdFnWs  + U_FdPiPoAc  + U_FdPiPoBu + U_FdPiPoLa  + U_FdPsPoAc  + U_FdPsPoBu  + U_FdPsPoLa  + U_FdBaPoAc + U_FdBaPoBu  + U_FdBaPoLa  + U_FdBfPoAc  + U_FdBfPoBu  + U_FdBfPoLa  + U_FdFnPoAc  + U_FdFnPoBu  + U_FdFnPoLa  + U_FdPoPoAc  + U_FdPoPoBu + U_FdPoPoLa  + U_FdNgPoAc  + U_FdNgPoBu  + U_FdNgPoLa  + U_FdSpPoAc + U_FdSpPoBu  + U_FdSpPoLa  + U_FdFaUPoAc  + U_FdFaUPoBu  + U_FdFaUPoLa + U_FdFaSPoAc  + U_FdFaSPoBu  + U_FdFaSPoLa;
let P_SiInSi = InSi;
let U_SiSiEx = KSoEx * QSi;
let U_SiSiBaWs = VmaxSiWs * QBa / (1 + MSiBaWs/CSi);
let U_SiSiFnWs = VmaxSiFn * QFn/ (1 + MSiFnWs/CSi);
let U_SiPiPoAc = RFdPiPoAc * (U_PiPoSiAc/U_Pi) * QSi / (1 + M_NAD_Ac/(rNAD ));
let U_SiPiPoBu = RFdPiPoBu * (U_PiPoSiBu/U_Pi) * QSi;
let U_SiPiPoLa = RFdPiPoLa * (U_PiPoSiLa/U_Pi) * QSi;
let U_SiPsPoAc = RFdPiPoAc * (U_PsPoSiAc/U_Ps) * QSi / (1 + M_NAD_Ac/(rNAD ));
let U_SiPsPoBu = RFdPiPoBu * (U_PsPoSiBu/U_Ps) * QSi;
let U_SiPsPoLa = RFdPiPoLa * (U_PsPoSiLa/U_Ps) * QSi;
let U_SiBaPoAc = RFdBaPoAc * (U_BaPoSiAc/U_Ba) * QSi / (1 + M_NAD_Ac/(rNAD ));
let U_SiBaPoBu = RFdBaPoBu * (U_BaPoSiBu/U_Ba) * QSi;
let U_SiBaPoLa = RFdBaPoLa * (U_BaPoSiLa/U_Ba) * QSi;
let U_SiBfPoAc = RFdBaPoAc * (U_BfPoSiAc/U_Bf) * QSi / (1 + M_NAD_Ac/(rNAD ));
let U_SiBfPoBu = RFdBaPoBu * (U_BfPoSiBu/U_Bf) * QSi;
let U_SiBfPoLa = RFdBaPoLa * (U_BfPoSiLa/U_Bf) * QSi;
let U_SiFnPoAc = RFdBaPoAc * (U_FnPoSiAc/U_Fn) * QSi  / (1 + M_NAD_Ac/(rNAD ));
let U_SiFnPoBu = RFdBaPoBu * (U_FnPoSiBu/U_Fn) * QSi;
let U_SiFnPoLa = RFdBaPoLa * (U_FnPoSiLa/U_Fn) * QSi;
let U_SiPoPoAc = RFdBaPoAc * (U_PoPoSiAc/U_Po) * QSi  / (1 + M_NAD_Ac/(rNAD ));
let U_SiPoPoBu = RFdBaPoBu * (U_PoPoSiBu/U_Po) * QSi;
let U_SiPoPoLa = RFdBaPoLa * (U_PoPoSiLa/U_Po) * QSi;
let U_SiNgPoAc = VmaxSiPo * QPo/ (1 + MSiPo/CSi + CPi/JPiNgPo + CPs/JPsNgPo + CBa/JBaNgPo + CBf/JBfNgPo + CFn/JFnPoNg + CPo/JPoNgPo + Math.pow((QSp/(QSp + QPo)/JSpVFA),ThetaSpPiPo) + M_NAD_Ac/(rNAD ));
let U_SiNgPoBu = VmaxSiPo * QPo/ (1 + MSiPo/CSi  + CPi/JPiNgPo + CPs/JPsNgPo + CBa/JBaNgPo + CBf/JBfNgPo + CFn/JFnPoNg + CPo/JPoNgPo + Math.pow((QSp/(QSp + QPo)/JSpVFA),ThetaSpPiPo));
let U_SiNgPoLa = VmaxSiPo * QPo/ (1 + MSiPo/CSi  + CPi/JPiNgPo + CPs/JPsNgPo + CBa/JBaNgPo + CBf/JBfNgPo + CFn/JFnPoNg + CPo/JPoNgPo + Math.pow((QSp/(QSp + QPo)/JSpVFA),ThetaSpPiPo));
let U_SiSpPoAc = VmaxSiSp * QPo/ (1 + MSiSp/CSi + Math.pow((QSp/(QSp + QPo)/JSpSp),ThetaSpSpPo) + M_NAD_Ac/(rNAD ));
let U_SiSpPoBu = VmaxSiSp * QPo/ (1 + MSiSp/CSi + Math.pow((QSp/(QSp + QPo)/JSpSp),ThetaSpSpPo));
let U_SiSpPoLa = VmaxSiSp * QPo/ (1 + MSiSp/CSi + Math.pow((QSp/(QSp + QPo)/JSpSp),ThetaSpSpPo));
let U_SiFaUPoAc = VmaxSiPo * QPo/ (1 + MSiPo/CSi + Math.pow((QSp/(QSp + QPo)/JSpVFA),ThetaSpPiPo) + M_NAD_Ac/(rNAD ));
let U_SiFaUPoBu = VmaxSiPo * QPo/ (1 + MSiPo/CSi + Math.pow((QSp/(QSp + QPo)/JSpVFA),ThetaSpPiPo));
let U_SiFaUPoLa = VmaxSiPo * QPo/ (1 + MSiPo/CSi + Math.pow((QSp/(QSp + QPo)/JSpVFA),ThetaSpPiPo));
let U_SiFaSPoAc = VmaxSiPo * QPo/ (1 + MSiPo/CSi + Math.pow((QSp/(QSp + QPo)/JSpVFA),ThetaSpPiPo) + M_NAD_Ac/(rNAD ));
let U_SiFaSPoBu = VmaxSiPo * QPo/ (1 + MSiPo/CSi + Math.pow((QSp/(QSp + QPo)/JSpVFA),ThetaSpPiPo));
let U_SiFaSPoLa = VmaxSiPo * QPo/ (1 + MSiPo/CSi + Math.pow((QSp/(QSp + QPo)/JSpVFA),ThetaSpPiPo));
let dQSidt = P_SiInSi - U_SiSiEx - U_SiSiBaWs - U_SiSiFnWs - U_SiPiPoAc - U_SiPiPoBu - U_SiPiPoLa - U_SiPsPoAc - U_SiPsPoBu - U_SiPsPoLa - U_SiBaPoAc - U_SiBaPoBu - U_SiBaPoLa - U_SiBfPoAc - U_SiBfPoBu - U_SiBfPoLa - U_SiFnPoAc - U_SiFnPoBu- U_SiFnPoLa - U_SiPoPoAc - U_SiPoPoBu - U_SiPoPoLa - U_SiNgPoAc - U_SiNgPoBu - U_SiNgPoLa - U_SiSpPoAc - U_SiSpPoBu - U_SiSpPoLa - U_SiFaUPoAc - U_SiFaUPoBu - U_SiFaUPoLa - U_SiFaSPoAc - U_SiFaSPoBu - U_SiFaSPoLa;
let U_Si = U_SiSiEx + U_SiSiBaWs + U_SiSiFnWs + U_SiPiPoAc + U_SiPiPoBu + U_SiPiPoLa + U_SiPsPoAc + U_SiPsPoBu + U_SiPsPoLa + U_SiBaPoAc + U_SiBaPoBu + U_SiBaPoLa + U_SiBfPoAc + U_SiBfPoBu + U_SiBfPoLa + U_SiFnPoAc + U_SiFnPoBu+ U_SiFnPoLa + U_SiPoPoAc + U_SiPoPoBu + U_SiPoPoLa + U_SiNgPoAc + U_SiNgPoBu + U_SiNgPoLa + U_SiSpPoAc + U_SiSpPoBu + U_SiSpPoLa + U_SiFaUPoAc + U_SiFaUPoBu + U_SiFaUPoLa + U_SiFaSPoAc + U_SiFaSPoBu + U_SiFaSPoLa;
let P_WsInWs = InWs;
let P_WsFdBfWs = YWsFd * (U_FdFdBfWs/U_Fd) * QWs;
let P_WsFdFnWs = YWsFd * (U_FdFdFnWs/U_Fd) * QWs;
let P_WsSiBaWs = YWsFd * (U_SiSiBaWs/U_Si) * QWs;
let P_WsSiFnWs = YWsFd * (U_SiSiFnWs/U_Si) * QWs;
let P_WsTgFaUBaWs = YWsFaU * (U_TgWsFaUBa/U_Tg) * QWs;
let P_WsTgFaUBfWs = YWsFaU * (U_TgWsFaUBf/U_Tg) * QWs;
let P_WsTgFaSBaWs = YWsFaU * (U_TgWsFaSBa/U_Tg) * QWs;
let P_WsTgFaSBfWs = YWsFaU * (U_TgWsFaSBf/U_Tg) * QWs;
let U_WsWsEx = KFlEx * QWs;
let U_WsPsBaAc = RWsPsBaAc * (U_PsBaWsAc/U_Ps) * QWs / (1 +  M_NAD_Ac/(rNAD ));
let U_WsPsBaBu = RWsPsBaBu * (U_PsBaWsBu/U_Ps) * QWs;
let U_WsPsBaAcPr = RWsPsBaAcPr * (U_PsBaWsAcPr/U_Ps) * QWs / (1 +  rNAD/J_NAD_AcPr);
let U_WsPsBaLa = RWsPsBaLa * (U_PsBaWsLa/U_Ps) * QWs;
let U_WsAmBaAc = RWsAmBaAc * (U_AmBaWsAc /U_Am) * QWs / (1 +  M_NAD_Ac/(rNAD ));
let U_WsAmBaBu = RWsAmBaBu * (U_AmBaWsBu/U_Am) * QWs;
let U_WsAmBaAcPr = RWsAmBaAcPr * (U_AmBaWsAcPr/U_Am) * QWs / (1 +  rNAD/J_NAD_AcPr);
let U_WsAmBaLa = RWsAmBaLa * (U_AmBaWsLa/U_Am) * QWs;
let U_WsNgBaAc = VmaxWsBa * QBa/ (1 + MWsNgBa/CWs + CAm/JAmNgBa + CPs/JPsNgBa + M_NAD_Ac/(rNAD ));
let U_WsNgBaBu = VmaxWsBa * QBa/ (1 + MWsNgBa/CWs + CAm/JAmNgBa + CPs/JPsNgBa);
let U_WsNgBaAcPr = VmaxWsBa * QBa/ (1 + MWsNgBa/CWs + CAm/JAmNgBa + CPs/JPsNgBa + rNAD/J_NAD_AcPr);
let U_WsNgBaLa = VmaxWsBa * QBa/ (1 + MWsNgBa/CWs + CAm/JAmNgBa + CPs/JPsNgBa);
let U_WsSaBaAc = VmaxWsSa * QBa/ (1 + MWsSa/CWs + Math.pow((QSa/(QSa + QBa)/JSaSa),ThetaSaSaBa)  + M_NAD_Ac/(rNAD ));
let U_WsSaBaBu = VmaxWsSa * QBa/ (1 + MWsSa/CWs + Math.pow((QSa/(QSa + QBa)/JSaSa),ThetaSaSaBa) );
let U_WsSaBaAcPr = VmaxWsSa * QBa/ (1 + MWsSa/CWs + Math.pow((QSa/(QSa + QBa)/JSaSa),ThetaSaSaBa)  + rNAD/J_NAD_AcPr);
let U_WsSaBaLa = VmaxWsSaLa * QBa/ (1 + MWsSaLa/CWs + Math.pow((QSa/(QSa + QBa)/JSaSa),ThetaSaSaBa) );
let U_WsFaUBaAc = VmaxWsBa * QBa/ (1 + MWsNgBa/CWs + M_NAD_Ac/(rNAD ));
let U_WsFaUBaBu = VmaxWsBa * QBa/ (1 + MWsNgBa/CWs);
let U_WsFaUBaAcPr = VmaxWsBa * QBa/ (1 + MWsNgBa/CWs + rNAD/J_NAD_AcPr);
let U_WsFaUBaLa = VmaxWsBa * QBa/ (1 + MWsNgBa/CWs);
let U_WsFaSBaAc = VmaxWsBa * QBa/ (1 + MWsNgBa/CWs + M_NAD_Ac/(rNAD ));
let U_WsFaSBaBu = VmaxWsBa * QBa/ (1 + MWsNgBa/CWs);
let U_WsFaSBaAcPr = VmaxWsBa * QBa/ (1 + MWsNgBa/CWs + rNAD/J_NAD_AcPr);
let U_WsFaSBaLa = VmaxWsBa * QBa/ (1 + MWsNgBa/CWs);
let U_WsPsBfAc = RWsPsBfAc * (U_PsBfWsAc/U_Ps) * QWs / (1 +  M_NAD_Ac/(rNAD ));
let U_WsPsBfBu = RWsPsBfBu * (U_PsBfWsBu/U_Ps) * QWs;
let U_WsPsBfAcPr = RWsPsBfAcPr * (U_PsBfWsAcPr/U_Ps) * QWs/ (1 +  rNAD/J_NAD_AcPr);
let U_WsAmBfAc = RWsAmBfAc * (U_AmBfWsAc/U_Am) * QWs / (1 +  M_NAD_Ac/(rNAD ));
let U_WsAmBfBu = RWsAmBfBu * (U_AmBfWsBu/U_Am) * QWs;
let U_WsAmBfAcPr = RWsAmBfAcPr * (U_AmBfWsAcPr/U_Am) * QWs/ (1 +  rNAD/J_NAD_AcPr);
let U_WsNgBfAc = VmaxWsBf * QBf/ (1 + MWsNgBf/CWs + CAm/JAmNgBf + CPs/JPsNgBf + M_NAD_Ac/(rNAD ));
let U_WsNgBfBu = VmaxWsBf * QBf/ (1 + MWsNgBf/CWs + CAm/JAmNgBf + CPs/JPsNgBf);
let U_WsNgBfAcPr = VmaxWsBf * QBf/ (1 + MWsNgBf/CWs + CAm/JAmNgBf + CPs/JPsNgBf + rNAD/J_NAD_AcPr);
let U_WsSfBfAc = VmaxWsSf * QBf/ (1 + MWsSf/CWs + Math.pow((QSf/(QSf + QBf)/JSfSf),ThetaSfSfBf)  + M_NAD_Ac/(rNAD ));
let U_WsSfBfBu = VmaxWsSf * QBf/ (1 + MWsSf/CWs + Math.pow((QSf/(QSf + QBf)/JSfSf),ThetaSfSfBf) );
let U_WsSfBfAcPr = VmaxWsSa * QBf/ (1 + MWsSf/CWs + Math.pow((QSf/(QSf + QBf)/JSfSf),ThetaSfSfBf)  + rNAD/J_NAD_AcPr);
let U_WsFaUBfAc = VmaxWsBf * QBf/ (1 + MWsNgBf/CWs + M_NAD_Ac/(rNAD ));
let U_WsFaUBfBu = VmaxWsBf * QBf/ (1 + MWsNgBf/CWs);
let U_WsFaUBfAcPr = VmaxWsFaUBfAcPr * QBf/ (1 + MWsNgBf/CWs + rNAD/J_NAD_AcPr);
let U_WsFaSBfAc = VmaxWsBf * QBf/ (1 + MWsNgBf/CWs + M_NAD_Ac/(rNAD ));
let U_WsFaSBfBu = VmaxWsBf * QBf/ (1 + MWsNgBf/CWs);
let U_WsFaSBfAcPr = VmaxWsBf * QBf/ (1 + MWsNgBf/CWs + rNAD/J_NAD_AcPr);
let U_WsPsFnAc = RWsPsFn * (U_PsFnWsAc/U_Ps) * QWs / (1 +  M_NAD_Ac/(rNAD ));
let U_WsPsFnBu = RWsPsFn * (U_PsFnWsBu/U_Ps) * QWs;
let U_WsPsFnLa = RWsPsFn * (U_PsFnWsLa/U_Ps) * QWs;
let U_WsAmFnAc = RWsAmFn * (U_AmFnWsAc/U_Am) * QWs  / (1 +  M_NAD_Ac/(rNAD ));
let U_WsAmFnBu = RWsAmFn * (U_AmFnWsBu/U_Am) * QWs;
let U_WsAmFnLa = RWsAmFn * (U_AmFnWsLa/U_Am) * QWs;
let U_WsNgFnAc = VmaxWsFn * QFn/ (1 + MWsNgFn/CWs + CAm/JAmNgFn + CPs/JPsNgFn + M_NAD_Ac/(rNAD ));
let U_WsNgFnBu = VmaxWsFn * QFn/ (1 + MWsNgFn/CWs + CAm/JAmNgFn + CPs/JPsNgFn);
let U_WsNgFnLa = VmaxWsFn * QFn/ (1 + MWsNgFn/CWs + CAm/JAmNgFn + CPs/JPsNgFn);
let U_WsSfnFnAc = VmaxWsSfn * QFn/ (1 + MWsSfn/CWs + Math.pow((QSfn/(QSfn + QFn)/JSfnSfn),ThetaSfnSfnFn)  + M_NAD_Ac/(rNAD ));
let U_WsSfnFnBu = VmaxWsSfn * QFn/ (1 + MWsSfn/CWs + Math.pow((QSfn/(QSfn + QFn)/JSfnSfn),ThetaSfnSfnFn) );
let U_WsSfnFnLa = VmaxWsSfn * QFn/ (1 + MWsSfn/CWs + Math.pow((QSfn/(QSfn + QFn)/JSfnSfn),ThetaSfnSfnFn) );
let U_WsFaUFnAc = VmaxWsFn * QFn/ (1 + MWsNgFn/CWs + M_NAD_Ac/(rNAD ));
let U_WsFaUFnBu = VmaxWsFn * QFn/ (1 + MWsNgFn/CWs);
let U_WsFaUFnLa = VmaxWsFn * QFn/ (1 + MWsNgFn/CWs);
let U_WsFaSFnAc = VmaxWsFn * QFn/ (1 + MWsNgFn/CWs + M_NAD_Ac/(rNAD ));
let U_WsFaSFnBu = VmaxWsFn * QFn/ (1 + MWsNgFn/CWs);
let U_WsFaSFnLa = VmaxWsFn * QFn/ (1 + MWsNgFn/CWs);
let U_WsPiPoAc = RFdPiPoAc * (U_PiPoWsAc/U_Pi) * QWs / (1 +  M_NAD_Ac/(rNAD ));
let U_WsPiPoBu = RFdPiPoBu * (U_PiPoWsBu/U_Pi) * QWs;
let U_WsPiPoLa = RFdPiPoLa * (U_PiPoWsLa/U_Pi) * QWs;
let U_WsPsPoAc = RFdPiPoAc * (U_PsPoWsAc/U_Ps) * QWs / (1 +  M_NAD_Ac/(rNAD ));
let U_WsPsPoBu = RFdPiPoBu * (U_PsPoWsBu/U_Ps) * QWs;
let U_WsPsPoLa = RFdPiPoLa * (U_PsPoWsLa/U_Ps) * QWs;
let U_WsBaPoAc = RFdBaPoAc * (U_BaPoWsAc/U_Ba) * QWs / (1 +  M_NAD_Ac/(rNAD ));
let U_WsBaPoBu = RFdBaPoBu * (U_BaPoWsBu/U_Ba) * QWs;
let U_WsBaPoLa = RFdBaPoLa * (U_BaPoWsLa/U_Ba) * QWs;
let U_WsBfPoAc = RFdBaPoAc * (U_BfPoWsAc/U_Bf) * QWs / (1 +  M_NAD_Ac/(rNAD ));
let U_WsBfPoBu = RFdBaPoBu * (U_BfPoWsBu/U_Bf) * QWs;
let U_WsBfPoLa = RFdBaPoLa * (U_BfPoWsLa/U_Bf) * QWs;
let U_WsFnPoAc = RFdBaPoAc * (U_FnPoWsAc/U_Fn) * QWs / (1 +  M_NAD_Ac/(rNAD ));
let U_WsFnPoBu = RFdBaPoBu * (U_FnPoWsBu/U_Fn) * QWs;
let U_WsFnPoLa = RFdBaPoLa * (U_FnPoWsLa/U_Fn) * QWs;
let U_WsPoPoAc = RFdBaPoAc * (U_PoPoWsAc/U_Po) * QWs / (1 +  M_NAD_Ac/(rNAD ));
let U_WsPoPoBu = RFdBaPoBu * (U_PoPoWsBu/U_Po) * QWs;
let U_WsPoPoLa = RFdBaPoLa * (U_PoPoWsLa/U_Po) * QWs;
let U_WsNgPoAc = VmaxWsPo * QPo/ (1 + MWsPo/CWs +  CPi/JPiNgPo + CPs/JPsNgPo + CBa/JBaNgPo + CBf/JBfNgPo + CFn/JFnPoNg + CPo/JPoNgPo + M_NAD_Ac/(rNAD ));
let U_WsNgPoBu = VmaxWsPo * QPo/ (1 + MWsPo/CWs + CPi/JPiNgPo + CPs/JPsNgPo + CBa/JBaNgPo + CBf/JBfNgPo + CFn/JFnPoNg + CPo/JPoNgPo);
let U_WsNgPoLa = VmaxWsPo * QPo/ (1 + MWsPo/CWs + CPi/JPiNgPo + CPs/JPsNgPo + CBa/JBaNgPo + CBf/JBfNgPo + CFn/JFnPoNg + CPo/JPoNgPo);
let U_WsSpPoAc = VmaxWsSp * QPo/ (1 + MWsSp/CWs + Math.pow((QSp/(QSp + QPo)/JSpSp),ThetaSpSpPo)  + M_NAD_Ac/(rNAD ));
let U_WsSpPoBu = VmaxWsSp * QPo/ (1 + MWsSp/CWs + Math.pow((QSp/(QSp + QPo)/JSpSp),ThetaSpSpPo) );
let U_WsSpPoLa = VmaxWsSp * QPo/ (1 + MWsSp/CWs + Math.pow((QSp/(QSp + QPo)/JSpSp),ThetaSpSpPo) );
let U_WsFaUPoAc = VmaxWsPo * QPo/ (1 + MWsPo/CWs + M_NAD_Ac/(rNAD ));
let U_WsFaUPoBu = VmaxWsPo * QPo/ (1 + MWsPo/CWs);
let U_WsFaUPoLa = VmaxWsPo * QPo/ (1 + MWsPo/CWs);
let U_WsFaSPoAc = VmaxWsPo * QPo/ (1 + MWsPo/CWs + M_NAD_Ac/(rNAD ));
let U_WsFaSPoBu = VmaxWsPo * QPo/ (1 + MWsPo/CWs);
let U_WsFaSPoLa = VmaxWsPo * QPo/ (1 + MWsPo/CWs);
let U_Ws = U_WsWsEx + U_WsPsBaAc + U_WsPsBaBu + U_WsPsBaAcPr + U_WsPsBaLa + U_WsAmBaAc + U_WsAmBaBu + U_WsAmBaAcPr + U_WsAmBaLa + U_WsNgBaAc + U_WsNgBaBu + U_WsNgBaAcPr + U_WsNgBaLa + U_WsSaBaAc + U_WsSaBaBu + U_WsSaBaAcPr + U_WsSaBaLa + U_WsFaUBaAc + U_WsFaUBaBu + U_WsFaUBaAcPr + U_WsFaUBaLa + U_WsFaSBaAc + U_WsFaSBaBu + U_WsFaSBaAcPr + U_WsFaSBaLa + U_WsPsBfAc + U_WsPsBfBu + U_WsPsBfAcPr + U_WsAmBfAc + U_WsAmBfBu + U_WsAmBfAcPr + U_WsNgBfAc + U_WsNgBfBu + U_WsNgBfAcPr + U_WsSfBfAc + U_WsSfBfBu + U_WsSfBfAcPr + U_WsFaUBfAc  + U_WsFaUBfBu + U_WsFaUBfAcPr + U_WsFaSBfAc + U_WsFaSBfBu + U_WsFaSBfAcPr + U_WsPsFnAc + U_WsPsFnBu + U_WsPsFnLa + U_WsAmFnAc + U_WsAmFnBu + U_WsAmFnLa + U_WsNgFnAc + U_WsNgFnBu + U_WsNgFnLa + U_WsSfnFnAc + U_WsSfnFnBu + U_WsSfnFnLa + U_WsFaUFnAc + U_WsFaUFnBu + U_WsFaUFnLa + U_WsFaSFnAc + U_WsFaSFnBu + U_WsFaSFnLa + U_WsPiPoAc + U_WsPiPoBu + U_WsPiPoLa + U_WsPsPoAc + U_WsPsPoBu + U_WsPsPoLa + U_WsBaPoAc + U_WsBaPoBu + U_WsBaPoLa + U_WsBfPoAc + U_WsBfPoBu + U_WsBfPoLa + U_WsFnPoAc + U_WsFnPoBu + U_WsFnPoLa + U_WsPoPoAc + U_WsPoPoBu + U_WsPoPoLa + U_WsNgPoAc + U_WsNgPoBu + U_WsNgPoLa + U_WsSpPoAc + U_WsSpPoBu + U_WsSpPoLa + U_WsFaUPoAc + U_WsFaUPoBu + U_WsFaUPoLa + U_WsFaSPoAc + U_WsFaSPoBu + U_WsFaSPoLa;
let U_SaSaEx = KFlEx * QSa;
let U_SaPsBaAc = RSaPsBaAc * (U_PsBaSaAc/U_Ps) * QSa / (1 + M_NAD_Ac/(rNAD ));
let U_SaPsBaBu = RSaPsBaBu * (U_PsBaSaBu/U_Ps) * QSa;
let U_SaPsBaAcPr = RSaPsBaAcPr * (U_PsBaSaAcPr/U_Ps) * QSa/ (1 +  rNAD/J_NAD_AcPr);
let U_SaPsBaLa = RSaPsBaLa * (U_PsBaSaLa/U_Ps) * QSa;
let U_SaAmBaAc = RSaAmBaAc * (U_AmBaSaAc /U_Am) * QSa/ (1 +  M_NAD_Ac/(rNAD ));
let U_SaAmBaBu = RSaAmBaBu * (U_AmBaSaBu/U_Am) * QSa;
let U_SaAmBaAcPr = RSaAmBaAcPr * (U_AmBaSaAcPr/U_Am) * QSa/ (1 +  rNAD/J_NAD_AcPr);
let U_SaAmBaLa = RSaAmBaLa * (U_AmBaSaLa /U_Am) * QSa;
let U_SaNgBaAc = VmaxSaNgBaAc * QBa/ (1 + MSaNgBaAc/(QSa/(QSa + QBa)) + CAm/JAmNgBa + CPs/JPsNgBa + M_NAD_Ac/(rNAD ));
let U_SaNgBaBu = VmaxSaNgBaBu * QBa/ (1 + MSaNgBaBu/(QSa/(QSa + QBa)) + CAm/JAmNgBa + CPs/JPsNgBa);
let U_SaNgBaAcPr = VmaxSaNgBaAcPr * QBa/ (1 + MSaNgBaAcPr/(QSa/(QSa + QBa)) + CAm/JAmNgBa + CPs/JPsNgBa + rNAD/J_NAD_AcPr);
let U_SaNgBaLa = VmaxSaNgBaLa * QBa/ (1 + MSaNgBaLa/(QSa/(QSa + QBa)) + CAm/JAmNgBa + CPs/JPsNgBa);
let U_SaFaUBaAc = VmaxSaNgBaAc * QBa/ (1 + MSaFaUBaAc/(QSa/(QSa + QBa)) + M_NAD_Ac/(rNAD ));
let U_SaFaUBaBu = VmaxSaNgBaBu * QBa/ (1 + MSaFaUBaBu/(QSa/(QSa + QBa)));
let U_SaFaUBaAcPr = VmaxSaNgBaAcPr * QBa/ (1 + MSaFaUBaAcPr/(QSa/(QSa + QBa)) + rNAD/J_NAD_AcPr);
let U_SaFaUBaLa = VmaxSaNgBaLa * QBa/ (1 + MSaFaUBaLa/(QSa/(QSa + QBa)));
let U_SaFaSBaAc = VmaxSaNgBaAc * QBa/ (1 + MSaFaSBaAc/(QSa/(QSa + QBa)) + M_NAD_Ac/(rNAD ));
let U_SaFaSBaBu = VmaxSaNgBaBu * QBa/ (1 + MSaFaSBaBu/(QSa/(QSa + QBa)));
let U_SaFaSBaAcPr = VmaxSaNgBaAcPr * QBa/ (1 + MSaFaSBaAcPr/(QSa/(QSa + QBa)) + rNAD/J_NAD_AcPr);
let U_SaFaSBaLa = VmaxSaNgBaLa * QBa/ (1 + MSaFaSBaLa/(QSa/(QSa + QBa)));
let U_SaPoWsAc = VmaxBaPo * QPo/ (1 + MBaPo/(QSa/(QSa + QBa)) + MWsPo/CWs + Math.pow((QSp/(QSp + QPo)/JSpVFA),ThetaSpPiPo) + (((QFaU*mrFaU - QFaU*mrFaU/(QFaU*mrFaU + QBa + QBf + QFn + QPo))/mrFaU)/V)/JFaUPoMi);
let U_SaPoWsBu = VmaxBaPo * QPo/ (1 + MBaPo/(QSa/(QSa + QBa)) + MWsPo/CWs + Math.pow((QSp/(QSp + QPo)/JSpVFA),ThetaSpPiPo) + (((QFaU*mrFaU - QFaU*mrFaU/(QFaU*mrFaU + QBa + QBf + QFn + QPo))/mrFaU)/V)/JFaUPoMi);
let U_SaPoWsLa = VmaxBaPo * QPo/ (1 + MBaPo/(QSa/(QSa + QBa)) + MWsPo/CWs + Math.pow((QSp/(QSp + QPo)/JSpVFA),ThetaSpPiPo) + (((QFaU*mrFaU - QFaU*mrFaU/(QFaU*mrFaU + QBa + QBf + QFn + QPo))/mrFaU)/V)/JFaUPoMi);
let U_SaPoFdAc = VmaxBaPo * QPo/ (1 + MBaPo/(QSa/(QSa + QBa)) + MFdPo/CFd + Math.pow((QSp/(QSp + QPo)/JSpVFA),ThetaSpPiPo) + (((QFaU*mrFaU - QFaU*mrFaU/(QFaU*mrFaU + QBa + QBf + QFn + QPo))/mrFaU)/V)/JFaUPoMi);
let U_SaPoFdBu = VmaxBaPo * QPo/ (1 + MBaPo/(QSa/(QSa + QBa)) + MFdPo/CFd + Math.pow((QSp/(QSp + QPo)/JSpVFA),ThetaSpPiPo) + (((QFaU*mrFaU - QFaU*mrFaU/(QFaU*mrFaU + QBa + QBf + QFn + QPo))/mrFaU)/V)/JFaUPoMi);
let U_SaPoFdLa = VmaxBaPo * QPo/ (1 + MBaPo/(QSa/(QSa + QBa)) + MFdPo/CFd + Math.pow((QSp/(QSp + QPo)/JSpVFA),ThetaSpPiPo) + (((QFaU*mrFaU - QFaU*mrFaU/(QFaU*mrFaU + QBa + QBf + QFn + QPo))/mrFaU)/V)/JFaUPoMi);
let U_SaPoSiAc = VmaxBaPo * QPo/ (1 + MBaPo/(QSa/(QSa + QBa)) + MSiPo/CSi + Math.pow((QSp/(QSp + QPo)/JSpVFA),ThetaSpPiPo) + (((QFaU*mrFaU - QFaU*mrFaU/(QFaU*mrFaU + QBa + QBf + QFn + QPo))/mrFaU)/V)/JFaUPoMi);
let U_SaPoSiBu = VmaxBaPo * QPo/ (1 + MBaPo/(QSa/(QSa + QBa)) + MSiPo/CSi + Math.pow((QSp/(QSp + QPo)/JSpVFA),ThetaSpPiPo) + (((QFaU*mrFaU - QFaU*mrFaU/(QFaU*mrFaU + QBa + QBf + QFn + QPo))/mrFaU)/V)/JFaUPoMi);
let U_SaPoSiLa = VmaxBaPo * QPo/ (1 + MBaPo/(QSa/(QSa + QBa)) + MSiPo/CSi + Math.pow((QSp/(QSp + QPo)/JSpVFA),ThetaSpPiPo) + (((QFaU*mrFaU - QFaU*mrFaU/(QFaU*mrFaU + QBa + QBf + QFn + QPo))/mrFaU)/V)/JFaUPoMi);
let U_SaPoSpAc = VmaxBaPo * QPo/ (1 + MBaPo/(QSa/(QSa + QBa)) + MSpPiPoAc/(QSp/(QSp + QPo)) + Math.pow((QSp/(QSp + QPo)/JSpVFA),ThetaSpPiPo) + (((QFaU*mrFaU - QFaU*mrFaU/(QFaU*mrFaU + QBa + QBf + QFn + QPo))/mrFaU)/V)/JFaUPoMi);
let U_SaPoSpBu = VmaxBaPo * QPo/ (1 + MBaPo/(QSa/(QSa + QBa)) + MSpPiPoBu/(QSp/(QSp + QPo)) + Math.pow((QSp/(QSp + QPo)/JSpVFA),ThetaSpPiPo) + (((QFaU*mrFaU - QFaU*mrFaU/(QFaU*mrFaU + QBa + QBf + QFn + QPo))/mrFaU)/V)/JFaUPoMi);
let U_SaPoSpLa = VmaxBaPo * QPo/ (1 + MBaPo/(QSa/(QSa + QBa)) + MSpPiPoLa/(QSp/(QSp + QPo)) + Math.pow((QSp/(QSp + QPo)/JSpVFA),ThetaSpPiPo) + (((QFaU*mrFaU - QFaU*mrFaU/(QFaU*mrFaU + QBa + QBf + QFn + QPo))/mrFaU)/V)/JFaUPoMi);
let U_SaPoLaAcBu = VmaxBaPo * QPo/ (1 + MBaPo/(QSa/(QSa + QBa)) + MAcLaPo/CAc + Math.pow((QSp/(QSp + QPo)/JSpVFA),ThetaSpPiPo) + (((QFaU*mrFaU - QFaU*mrFaU/(QFaU*mrFaU + QBa + QBf + QFn + QPo))/mrFaU)/V)/JFaUPoMi);
let U_SaPoAmAc = VmaxBaPo * QPo/(1 + MBaPo/(QSa/(QSa + QBa)) + (CWs + CSi + CFd + CLa + CAc)/JWsPsAmPo + Math.pow((QSp/(QSp + QPo)/JSpVFA),ThetaSpPiPo) + M_NAD_Ac/(rNAD ));
let U_SaPoAmBu = VmaxBaPo * QPo/(1 + MBaPo/(QSa/(QSa + QBa)) + (CWs + CSi + CFd + CLa + CAc)/JWsPsAmPo + Math.pow((QSp/(QSp + QPo)/JSpVFA),ThetaSpPiPo));
let U_SaPoAmLa = VmaxBaPo * QPo/(1 + MBaPo/(QSa/(QSa + QBa)) + (CWs + CSi + CFd + CLa + CAc)/JWsPsAmPo + Math.pow((QSp/(QSp + QPo)/JSpVFA),ThetaSpPiPo));
let U_Sa =  U_SaSaEx + U_SaPsBaAc + U_SaPsBaBu + U_SaPsBaAcPr + U_SaPsBaLa + U_SaAmBaAc + U_SaAmBaBu + U_SaAmBaAcPr + U_SaAmBaLa + U_SaNgBaAc + U_SaNgBaBu + U_SaNgBaAcPr + U_SaNgBaLa + U_SaFaUBaAc + U_SaFaUBaBu + U_SaFaUBaAcPr + U_SaFaUBaLa + U_SaFaSBaAc + U_SaFaSBaBu + U_SaFaSBaAcPr + U_SaFaSBaLa + U_SaPoWsAc + U_SaPoWsBu + U_SaPoWsLa + U_SaPoFdAc + U_SaPoFdBu + U_SaPoFdLa + U_SaPoSiAc + U_SaPoSiBu + U_SaPoSiLa + U_SaPoSpAc + U_SaPoSpBu + U_SaPoSpLa + U_SaPoLaAcBu + U_SaPoAmAc + U_SaPoAmBu + U_SaPoAmLa;
let P_SfBfWsAc = YSfBfWsAc * U_WsSfBfAc;
let P_SfBfWsBu = YSfBfWsBu * U_WsSfBfBu;
let P_SfBfWsAcPr = YSfBfWsAcPr * U_WsSfBfAcPr;
let U_SfSfEx = KSoEx * QSf;
let U_SfPsBfAc = RSfPsBfAc * (U_PsBfSfAc/U_Ps) * QSf / (1 + M_NAD_Ac/(rNAD ));
let U_SfPsBfBu = RSfPsBfBu * (U_PsBfSfBu/U_Ps) * QSf;
let U_SfPsBfAcPr = RSfPsBfAcPr * (U_PsBfSfAcPr/U_Ps) * QSf/ (1 +  rNAD/J_NAD_AcPr);
let U_SfAmBfAc = RSfAmBfAc * (U_AmBfSfAc/U_Am) * QSf / (1 +  M_NAD_Ac/(rNAD ));
let U_SfAmBfBu = RSfAmBfBu * (U_AmBfSfBu/U_Am) * QSf;
let U_SfAmBfAcPr = RSfAmBfAcPr * (U_AmBfSfAcPr/U_Am) * QSf/ (1 +  rNAD/J_NAD_AcPr);
let U_SfNgBfAc = VmaxSfNgBfAc * QBf/ (1 + MSfNgBfAc/(QSf/(QSf + QBf)) + CAm/JAmNgBf + CPs/JPsNgBf + M_NAD_Ac/(rNAD ));
let U_SfNgBfBu = VmaxSfNgBfBu * QBf/ (1 + MSfNgBfBu/(QSf/(QSf + QBf)) + CAm/JAmNgBf + CPs/JPsNgBf);
let U_SfNgBfAcPr = VmaxSfNgBfAcPr * QBf/ (1 + MSfNgBfAcPr/(QSf/(QSf + QBf)) + CAm/JAmNgBf + CPs/JPsNgBf + rNAD/J_NAD_AcPr);
let U_SfFaUBfAc = VmaxSfNgBfAc * QBf/ (1 + MSfFaUBfAc /(QSf/(QSf + QBf)) + M_NAD_Ac/(rNAD ));
let U_SfFaUBfBu = VmaxSfNgBfBu * QBf/ (1 + MSfFaUBfBu/(QSf/(QSf + QBf)));
let U_SfFaUBfAcPr = VmaxSfNgBfAcPr * QBf/ (1 + MSfFaUBfAcPr/(QSf/(QSf + QBf)) + rNAD/J_NAD_AcPr);
let U_SfFaSBfAc = VmaxSfNgBfAc * QBf/ (1 + MSfFaSBfAc/(QSf/(QSf + QBf)) + M_NAD_Ac/(rNAD ));
let U_SfFaSBfBu = VmaxSfNgBfBu * QBf/ (1 + MSfFaSBfBu/(QSf/(QSf + QBf)));
let U_SfFaSBfAcPr = VmaxSfNgBfAcPr * QBf/ (1 + MSfFaSBfAcPr/(QSf/(QSf + QBf)) + rNAD/J_NAD_AcPr);
let U_SfPoWsAc = VmaxBaPo * QPo/ (1 + MBaPo/(QSf/(QSf + QBf)) + MWsPo/CWs + Math.pow((QSp/(QSp + QPo)/JSpVFA),ThetaSpPiPo) + (((QFaU*mrFaU - QFaU*mrFaU/(QFaU*mrFaU + QBa + QBf + QFn + QPo))/mrFaU)/V)/JFaUPoMi);
let U_SfPoWsBu = VmaxBaPo * QPo/ (1 + MBaPo/(QSf/(QSf + QBf)) + MWsPo/CWs + Math.pow((QSp/(QSp + QPo)/JSpVFA),ThetaSpPiPo) + (((QFaU*mrFaU - QFaU*mrFaU/(QFaU*mrFaU + QBa + QBf + QFn + QPo))/mrFaU)/V)/JFaUPoMi);
let U_SfPoWsLa = VmaxBaPo * QPo/ (1 + MBaPo/(QSf/(QSf + QBf)) + MWsPo/CWs + Math.pow((QSp/(QSp + QPo)/JSpVFA),ThetaSpPiPo) + (((QFaU*mrFaU - QFaU*mrFaU/(QFaU*mrFaU + QBa + QBf + QFn + QPo))/mrFaU)/V)/JFaUPoMi);
let U_SfPoFdAc = VmaxBaPo * QPo/ (1 + MBaPo/(QSf/(QSf + QBf)) + MFdPo/CFd + Math.pow((QSp/(QSp + QPo)/JSpVFA),ThetaSpPiPo) + (((QFaU*mrFaU - QFaU*mrFaU/(QFaU*mrFaU + QBa + QBf + QFn + QPo))/mrFaU)/V)/JFaUPoMi);
let U_SfPoFdBu = VmaxBaPo * QPo/ (1 + MBaPo/(QSf/(QSf + QBf)) + MFdPo/CFd + Math.pow((QSp/(QSp + QPo)/JSpVFA),ThetaSpPiPo) + (((QFaU*mrFaU - QFaU*mrFaU/(QFaU*mrFaU + QBa + QBf + QFn + QPo))/mrFaU)/V)/JFaUPoMi);
let U_SfPoFdLa = VmaxBaPo * QPo/ (1 + MBaPo/(QSf/(QSf + QBf)) + MFdPo/CFd + Math.pow((QSp/(QSp + QPo)/JSpVFA),ThetaSpPiPo) + (((QFaU*mrFaU - QFaU*mrFaU/(QFaU*mrFaU + QBa + QBf + QFn + QPo))/mrFaU)/V)/JFaUPoMi);
let U_SfPoSiAc = VmaxBaPo * QPo/ (1 + MBaPo/(QSf/(QSf + QBf)) + MSiPo/CSi + Math.pow((QSp/(QSp + QPo)/JSpVFA),ThetaSpPiPo) + (((QFaU*mrFaU - QFaU*mrFaU/(QFaU*mrFaU + QBa + QBf + QFn + QPo))/mrFaU)/V)/JFaUPoMi);
let U_SfPoSiBu = VmaxBaPo * QPo/ (1 + MBaPo/(QSf/(QSf + QBf)) + MSiPo/CSi + Math.pow((QSp/(QSp + QPo)/JSpVFA),ThetaSpPiPo) + (((QFaU*mrFaU - QFaU*mrFaU/(QFaU*mrFaU + QBa + QBf + QFn + QPo))/mrFaU)/V)/JFaUPoMi);
let U_SfPoSiLa = VmaxBaPo * QPo/ (1 + MBaPo/(QSf/(QSf + QBf)) + MSiPo/CSi + Math.pow((QSp/(QSp + QPo)/JSpVFA),ThetaSpPiPo) + (((QFaU*mrFaU - QFaU*mrFaU/(QFaU*mrFaU + QBa + QBf + QFn + QPo))/mrFaU)/V)/JFaUPoMi);
let U_SfPoSpAc = VmaxBaPo * QPo/ (1 + MBaPo/(QSf/(QSf + QBf)) + MSpPiPoAc/(QSp/(QSp + QPo)) + Math.pow((QSp/(QSp + QPo)/JSpVFA),ThetaSpPiPo) + (((QFaU*mrFaU - QFaU*mrFaU/(QFaU*mrFaU + QBa + QBf + QFn + QPo))/mrFaU)/V)/JFaUPoMi);
let U_SfPoSpBu = VmaxBaPo * QPo/ (1 + MBaPo/(QSf/(QSf + QBf)) + MSpPiPoBu/(QSp/(QSp + QPo)) + Math.pow((QSp/(QSp + QPo)/JSpVFA),ThetaSpPiPo) + (((QFaU*mrFaU - QFaU*mrFaU/(QFaU*mrFaU + QBa + QBf + QFn + QPo))/mrFaU)/V)/JFaUPoMi);
let U_SfPoSpLa = VmaxBaPo * QPo/ (1 + MBaPo/(QSf/(QSf + QBf)) + MSpPiPoLa/(QSp/(QSp + QPo)) + Math.pow((QSp/(QSp + QPo)/JSpVFA),ThetaSpPiPo) + (((QFaU*mrFaU - QFaU*mrFaU/(QFaU*mrFaU + QBa + QBf + QFn + QPo))/mrFaU)/V)/JFaUPoMi);
let U_SfPoLaAcBu = VmaxBaPo * QPo/ (1 + MBaPo/(QSf/(QSf + QBf)) + MAcLaPo/CAc + Math.pow((QSp/(QSp + QPo)/JSpVFA),ThetaSpPiPo) + (((QFaU*mrFaU - QFaU*mrFaU/(QFaU*mrFaU + QBa + QBf + QFn + QPo))/mrFaU)/V)/JFaUPoMi);
let U_SfPoAmAc = VmaxBaPo * QPo/(1 + MBaPo/(QSf/(QSf + QBf)) + (CWs + CSi + CFd + CLa + CAc)/JWsPsAmPo + Math.pow((QSp/(QSp + QPo)/JSpVFA),ThetaSpPiPo) + M_NAD_Ac/(rNAD ));
let U_SfPoAmBu = VmaxBaPo * QPo/(1 + MBaPo/(QSf/(QSf + QBf)) + (CWs + CSi + CFd + CLa + CAc)/JWsPsAmPo + Math.pow((QSp/(QSp + QPo)/JSpVFA),ThetaSpPiPo));
let U_SfPoAmLa = VmaxBaPo * QPo/(1 + MBaPo/(QSf/(QSf + QBf)) + (CWs + CSi + CFd + CLa + CAc)/JWsPsAmPo + Math.pow((QSp/(QSp + QPo)/JSpVFA),ThetaSpPiPo));
let dQSfdt = P_SfBfWsAc + P_SfBfWsBu + P_SfBfWsAcPr - U_SfSfEx - U_SfPsBfAc - U_SfPsBfBu - U_SfPsBfAcPr - U_SfAmBfAc - U_SfAmBfBu - U_SfAmBfAcPr - U_SfNgBfAc - U_SfNgBfBu - U_SfNgBfAcPr - U_SfFaUBfAc - U_SfFaUBfBu - U_SfFaUBfAcPr - U_SfFaSBfAc - U_SfFaSBfBu - U_SfFaSBfAcPr - U_SfPoWsAc - U_SfPoWsBu - U_SfPoWsLa - U_SfPoFdAc - U_SfPoFdBu - U_SfPoFdLa - U_SfPoSiAc - U_SfPoSiBu - U_SfPoSiLa - U_SfPoSpAc - U_SfPoSpBu - U_SfPoSpLa - U_SfPoLaAcBu - U_SfPoAmAc - U_SfPoAmBu - U_SfPoAmLa;
let U_Sf =  U_SfSfEx + U_SfPsBfAc + U_SfPsBfBu + U_SfPsBfAcPr + U_SfAmBfAc + U_SfAmBfBu + U_SfAmBfAcPr + U_SfNgBfAc + U_SfNgBfBu + U_SfNgBfAcPr + U_SfFaUBfAc + U_SfFaUBfBu + U_SfFaUBfAcPr + U_SfFaSBfAc + U_SfFaSBfBu + U_SfFaSBfAcPr + U_SfPoWsAc + U_SfPoWsBu + U_SfPoWsLa + U_SfPoFdAc + U_SfPoFdBu + U_SfPoFdLa + U_SfPoSiAc + U_SfPoSiBu + U_SfPoSiLa + U_SfPoSpAc + U_SfPoSpBu + U_SfPoSpLa + U_SfPoLaAcBu + U_SfPoAmAc + U_SfPoAmBu + U_SfPoAmLa;
let U_SfnSfnExSo = (1 - fZoo) * KSoExFn * QSfn;
let U_SfnSfnExFl = fZoo * KFlEx * QSfn;
let U_SfnPsFnAc = RSfnPsFn * (U_PsFnSfnAc/U_Ps) * QSfn / (1 + M_NAD_Ac/(rNAD ));
let U_SfnPsFnBu = RSfnPsFn * (U_PsFnSfnBu/U_Ps) * QSfn;
let U_SfnPsFnLa = RSfnPsFn * (U_PsFnSfnLa/U_Ps) * QSfn;
let U_SfnAmFnAc = RSfnAmFn * (U_AmFnSfnAc/U_Am) * QSfn / (1 +  M_NAD_Ac/(rNAD ));
let U_SfnAmFnBu = RSfnAmFn * (U_AmFnSfnBu/U_Am) * QSfn;
let U_SfnAmFnLa = RSfnAmFn * (U_AmFnSfnLa/U_Am) * QSfn;
let U_SfnNgFnAc = VmaxSfnFn * QFn/ (1 + MSfnNg/(QSfn/(QSfn + QFn)) + CAm/JAmNgFn + CPs/JPsNgFn + M_NAD_Ac/(rNAD ));
let U_SfnNgFnBu = VmaxSfnFn * QFn/ (1 + MSfnNg/(QSfn/(QSfn + QFn)) + CAm/JAmNgFn + CPs/JPsNgFn);
let U_SfnNgFnLa = VmaxSfnFn * QFn/ (1 + MSfnNg/(QSfn/(QSfn + QFn)) + CAm/JAmNgFn + CPs/JPsNgFn);
let U_SfnFaUFnAc = VmaxSfnFn * QFn/ (1 + MSfnNg/(QSfn/(QSfn + QFn)) + M_NAD_Ac/(rNAD ));
let U_SfnFaUFnBu = VmaxSfnFn * QFn/ (1 + MSfnNg/(QSfn/(QSfn + QFn)));
let U_SfnFaUFnLa = VmaxSfnFn * QFn/ (1 + MSfnNg/(QSfn/(QSfn + QFn)));
let U_SfnFaSFnAc = VmaxSfnFn * QFn/ (1 + MSfnNg/(QSfn/(QSfn + QFn)) + M_NAD_Ac/(rNAD ));
let U_SfnFaSFnBu = VmaxSfnFn * QFn/ (1 + MSfnNg/(QSfn/(QSfn + QFn)));
let U_SfnFaSFnLa = VmaxSfnFn * QFn/ (1 + MSfnNg/(QSfn/(QSfn + QFn)));
let U_SfnPoWsAc = VmaxFnPo * QPo/ (1 + MFnPo/(QSfn/(QSfn + QFn)) + MWsPo/CWs + Math.pow((QSp/(QSp + QPo)/JSpVFA),ThetaSpPiPo) + (((QFaU*mrFaU - QFaU*mrFaU/(QFaU*mrFaU + QBa + QBf + QFn + QPo))/mrFaU)/V)/JFaUPoMi);
let U_SfnPoWsBu = VmaxFnPo * QPo/ (1 + MFnPo/(QSfn/(QSfn + QFn)) + MWsPo/CWs + Math.pow((QSp/(QSp + QPo)/JSpVFA),ThetaSpPiPo) + (((QFaU*mrFaU - QFaU*mrFaU/(QFaU*mrFaU + QBa + QBf + QFn + QPo))/mrFaU)/V)/JFaUPoMi);
let U_SfnPoWsLa = VmaxFnPo * QPo/ (1 + MFnPo/(QSfn/(QSfn + QFn)) + MWsPo/CWs + Math.pow((QSp/(QSp + QPo)/JSpVFA),ThetaSpPiPo) + (((QFaU*mrFaU - QFaU*mrFaU/(QFaU*mrFaU + QBa + QBf + QFn + QPo))/mrFaU)/V)/JFaUPoMi);
let U_SfnPoFdAc = VmaxFnPo * QPo/ (1 + MFnPo/(QSfn/(QSfn + QFn)) + MFdPo/CFd + Math.pow((QSp/(QSp + QPo)/JSpVFA),ThetaSpPiPo) + (((QFaU*mrFaU - QFaU*mrFaU/(QFaU*mrFaU + QBa + QBf + QFn + QPo))/mrFaU)/V)/JFaUPoMi);
let U_SfnPoFdBu = VmaxFnPo * QPo/ (1 + MFnPo/(QSfn/(QSfn + QFn)) + MFdPo/CFd + Math.pow((QSp/(QSp + QPo)/JSpVFA),ThetaSpPiPo) + (((QFaU*mrFaU - QFaU*mrFaU/(QFaU*mrFaU + QBa + QBf + QFn + QPo))/mrFaU)/V)/JFaUPoMi);
let U_SfnPoFdLa = VmaxFnPo * QPo/ (1 + MFnPo/(QSfn/(QSfn + QFn)) + MFdPo/CFd + Math.pow((QSp/(QSp + QPo)/JSpVFA),ThetaSpPiPo) + (((QFaU*mrFaU - QFaU*mrFaU/(QFaU*mrFaU + QBa + QBf + QFn + QPo))/mrFaU)/V)/JFaUPoMi);
let U_SfnPoSiAc = VmaxFnPo * QPo/ (1 + MFnPo/(QSfn/(QSfn + QFn)) + MSiPo/CSi + Math.pow((QSp/(QSp + QPo)/JSpVFA),ThetaSpPiPo) + (((QFaU*mrFaU - QFaU*mrFaU/(QFaU*mrFaU + QBa + QBf + QFn + QPo))/mrFaU)/V)/JFaUPoMi);
let U_SfnPoSiBu = VmaxFnPo * QPo/ (1 + MFnPo/(QSfn/(QSfn + QFn)) + MSiPo/CSi + Math.pow((QSp/(QSp + QPo)/JSpVFA),ThetaSpPiPo) + (((QFaU*mrFaU - QFaU*mrFaU/(QFaU*mrFaU + QBa + QBf + QFn + QPo))/mrFaU)/V)/JFaUPoMi);
let U_SfnPoSiLa = VmaxFnPo * QPo/ (1 + MFnPo/(QSfn/(QSfn + QFn)) + MSiPo/CSi + Math.pow((QSp/(QSp + QPo)/JSpVFA),ThetaSpPiPo) + (((QFaU*mrFaU - QFaU*mrFaU/(QFaU*mrFaU + QBa + QBf + QFn + QPo))/mrFaU)/V)/JFaUPoMi);
let U_SfnPoSpAc = VmaxFnPo * QPo/ (1 + MFnPo/(QSfn/(QSfn + QFn)) + MSpPiPoAc/(QSp/(QSp + QPo)) + Math.pow((QSp/(QSp + QPo)/JSpVFA),ThetaSpPiPo) + (((QFaU*mrFaU - QFaU*mrFaU/(QFaU*mrFaU + QBa + QBf + QFn + QPo))/mrFaU)/V)/JFaUPoMi);
let U_SfnPoSpBu = VmaxFnPo * QPo/ (1 + MFnPo/(QSfn/(QSfn + QFn)) + MSpPiPoBu/(QSp/(QSp + QPo)) + Math.pow((QSp/(QSp + QPo)/JSpVFA),ThetaSpPiPo) + (((QFaU*mrFaU - QFaU*mrFaU/(QFaU*mrFaU + QBa + QBf + QFn + QPo))/mrFaU)/V)/JFaUPoMi);
let U_SfnPoSpLa = VmaxFnPo * QPo/ (1 + MFnPo/(QSfn/(QSfn + QFn)) + MSpPiPoLa/(QSp/(QSp + QPo)) + Math.pow((QSp/(QSp + QPo)/JSpVFA),ThetaSpPiPo) + (((QFaU*mrFaU - QFaU*mrFaU/(QFaU*mrFaU + QBa + QBf + QFn + QPo))/mrFaU)/V)/JFaUPoMi);
let U_SfnPoLaAcBu = VmaxFnPo * QPo/ (1 + MFnPo/(QSfn/(QSfn + QFn)) + MAcLaPo/CAc + Math.pow((QSp/(QSp + QPo)/JSpVFA),ThetaSpPiPo) + (((QFaU*mrFaU - QFaU*mrFaU/(QFaU*mrFaU + QBa + QBf + QFn + QPo))/mrFaU)/V)/JFaUPoMi);
let U_SfnPoAmAc = VmaxFnPo * QPo/(1 + MFnPo/(QSfn/(QSfn + QFn)) + (CWs + CSi + CFd + CLa + CAc)/JWsPsAmPo + Math.pow((QSp/(QSp + QPo)/JSpVFA),ThetaSpPiPo) + M_NAD_Ac/(rNAD ));
let U_SfnPoAmBu = VmaxFnPo * QPo/(1 + MFnPo/(QSfn/(QSfn + QFn)) + (CWs + CSi + CFd + CLa + CAc)/JWsPsAmPo + Math.pow((QSp/(QSp + QPo)/JSpVFA),ThetaSpPiPo));
let U_SfnPoAmLa = VmaxFnPo * QPo/(1 + MFnPo/(QSfn/(QSfn + QFn)) + (CWs + CSi + CFd + CLa + CAc)/JWsPsAmPo + Math.pow((QSp/(QSp + QPo)/JSpVFA),ThetaSpPiPo));
let U_Sfn =  U_SfnSfnExSo + U_SfnSfnExFl + U_SfnPsFnAc + U_SfnPsFnBu + U_SfnPsFnLa + U_SfnAmFnAc + U_SfnAmFnBu + U_SfnAmFnLa + U_SfnNgFnAc + U_SfnNgFnBu + U_SfnNgFnLa + U_SfnFaUFnAc + U_SfnFaUFnBu + U_SfnFaUFnLa + U_SfnFaSFnAc + U_SfnFaSFnBu + U_SfnFaSFnLa + U_SfnPoWsAc + U_SfnPoWsBu + U_SfnPoWsLa + U_SfnPoFdAc + U_SfnPoFdBu + U_SfnPoFdLa + U_SfnPoSiAc + U_SfnPoSiBu + U_SfnPoSiLa + U_SfnPoSpAc + U_SfnPoSpBu + U_SfnPoSpLa + U_SfnPoLaAcBu + U_SfnPoAmAc + U_SfnPoAmBu + U_SfnPoAmLa;
let U_SpPoExFl = U_SpFlSpFlEx;
let U_SpPiPoAc = RSpPiPoAc * (U_PiPoSpAc/U_Pi) * QPo / (1 + M_NAD_Ac/(rNAD ));
let U_SpPiPoBu = RSpPiPoBu * (U_PiPoSpBu/U_Pi) * QPo;
let U_SpPiPoLa = RSpPiPoLa * (U_PiPoSpLa/U_Pi) * QPo;
let U_SpPsPoAc = RSpPiPoAc * (U_PsPoSpAc/U_Ps) * QPo / (1 + M_NAD_Ac/(rNAD ));
let U_SpPsPoBu = RSpPiPoBu * (U_PsPoSpBu/U_Ps) * QPo;
let U_SpPsPoLa = RSpPiPoLa * (U_PsPoSpLa/U_Ps) * QPo;
let U_SpBaPoAc = RSpBaPoAc * (U_BaPoSpAc/U_Ba) * QPo / (1 + M_NAD_Ac/(rNAD ));
let U_SpBaPoBu = RSpBaPoBu * (U_BaPoSpBu/U_Ba) * QPo;
let U_SpBaPoLa = RSpBaPoLa * (U_BaPoSpLa/U_Ba) * QPo;
let U_SpBfPoAc = RSpBaPoAc * (U_BfPoSpAc/U_Bf) * QPo / (1 + M_NAD_Ac/(rNAD ));
let U_SpBfPoBu = RSpBaPoBu * (U_BfPoSpBu/U_Bf) * QPo;
let U_SpBfPoLa = RSpBaPoLa * (U_BfPoSpLa/U_Bf) * QPo;
let U_SpFnPoAc = RSpBaPoAc * (U_FnPoSpAc/U_Fn) * QPo / (1 + M_NAD_Ac/(rNAD ));
let U_SpFnPoBu = RSpBaPoBu * (U_FnPoSpBu/U_Fn) * QPo;
let U_SpFnPoLa = RSpBaPoLa * (U_FnPoSpLa/U_Fn) * QPo;
let U_SpPoPoAc = RSpBaPoAc * (U_PoPoSpAc/U_Po) * QPo  / (1 + M_NAD_Ac/(rNAD ));
let U_SpPoPoBu = RSpBaPoBu * (U_PoPoSpBu/U_Po) * QPo;
let U_SpPoPoLa = RSpBaPoLa * (U_PoPoSpLa/U_Po) * QPo;
let U_SpNgPoAc = VmaxSpNgPoAc * QPo/ (1 + MSpPiPoAc/(QSp/(QSp + QPo)) + CPi/JPiNgPo + CPs/JPsNgPo + CBa/JBaNgPo + CBf/JBfNgPo + CFn/JFnPoNg + CPo/JPoNgPo + M_NAD_Ac/(rNAD ));
let U_SpNgPoBu = VmaxSpNgPoBu * QPo/ (1 + MSpPiPoBu/(QSp/(QSp + QPo)) + CPi/JPiNgPo + CPs/JPsNgPo + CBa/JBaNgPo + CBf/JBfNgPo + CFn/JFnPoNg + CPo/JPoNgPo);
let U_SpNgPoLa = VmaxSpNgPoLa * QPo/ (1 + MSpPiPoLa/(QSp/(QSp + QPo)) + CPi/JPiNgPo + CPs/JPsNgPo + CBa/JBaNgPo + CBf/JBfNgPo + CFn/JFnPoNg + CPo/JPoNgPo);
let U_SpFaUPoAc = VmaxSpNgPoAc * QPo/ (1 + MSpPiPoAc/(QSp/(QSp + QPo)) + M_NAD_Ac/(rNAD ));
let U_SpFaUPoBu = VmaxSpNgPoBu * QPo/ (1 + MSpPiPoBu/(QSp/(QSp + QPo)));
let U_SpFaUPoLa = VmaxSpNgPoLa * QPo/ (1 + MSpPiPoLa/(QSp/(QSp + QPo)));
let U_SpFaSPoAc = VmaxSpNgPoAc * QPo/ (1 + MSpPiPoAc/(QSp/(QSp + QPo)) + M_NAD_Ac/(rNAD ));
let U_SpFaSPoBu = VmaxSpNgPoBu * QPo/ (1 + MSpPiPoBu/(QSp/(QSp + QPo)));
let U_SpFaSPoLa = VmaxSpNgPoLa * QPo/ (1 + MSpPiPoLa/(QSp/(QSp + QPo)));
let U_SpPoWsAc = VmaxPoPo * QPo/ (1 + MPoPo/(QSp/(QSp + QPo)) + MWsPo/CWs + Math.pow((QSp/(QSp + QPo)/JSpVFA),ThetaSpPiPo) + (((QFaU*mrFaU - QFaU*mrFaU/(QFaU*mrFaU + QBa + QBf + QFn + QPo))/mrFaU)/V)/JFaUPoMi);
let U_SpPoWsBu = VmaxPoPo * QPo/ (1 + MPoPo/(QSp/(QSp + QPo)) + MWsPo/CWs + Math.pow((QSp/(QSp + QPo)/JSpVFA),ThetaSpPiPo) + (((QFaU*mrFaU - QFaU*mrFaU/(QFaU*mrFaU + QBa + QBf + QFn + QPo))/mrFaU)/V)/JFaUPoMi);
let U_SpPoWsLa = VmaxPoPo * QPo/ (1 + MPoPo/(QSp/(QSp + QPo)) + MWsPo/CWs + Math.pow((QSp/(QSp + QPo)/JSpVFA),ThetaSpPiPo) + (((QFaU*mrFaU - QFaU*mrFaU/(QFaU*mrFaU + QBa + QBf + QFn + QPo))/mrFaU)/V)/JFaUPoMi);
let U_SpPoFdAc = VmaxPoPo * QPo/ (1 + MPoPo/(QSp/(QSp + QPo)) + MFdPo/CFd + Math.pow((QSp/(QSp + QPo)/JSpVFA),ThetaSpPiPo) + (((QFaU*mrFaU - QFaU*mrFaU/(QFaU*mrFaU + QBa + QBf + QFn + QPo))/mrFaU)/V)/JFaUPoMi);
let U_SpPoFdBu = VmaxPoPo * QPo/ (1 + MPoPo/(QSp/(QSp + QPo)) + MFdPo/CFd + Math.pow((QSp/(QSp + QPo)/JSpVFA),ThetaSpPiPo) + (((QFaU*mrFaU - QFaU*mrFaU/(QFaU*mrFaU + QBa + QBf + QFn + QPo))/mrFaU)/V)/JFaUPoMi);
let U_SpPoFdLa = VmaxPoPo * QPo/ (1 + MPoPo/(QSp/(QSp + QPo)) + MFdPo/CFd + Math.pow((QSp/(QSp + QPo)/JSpVFA),ThetaSpPiPo) + (((QFaU*mrFaU - QFaU*mrFaU/(QFaU*mrFaU + QBa + QBf + QFn + QPo))/mrFaU)/V)/JFaUPoMi);
let U_SpPoSiAc = VmaxPoPo * QPo/ (1 + MPoPo/(QSp/(QSp + QPo)) + MSiPo/CSi + Math.pow((QSp/(QSp + QPo)/JSpVFA),ThetaSpPiPo) + (((QFaU*mrFaU - QFaU*mrFaU/(QFaU*mrFaU + QBa + QBf + QFn + QPo))/mrFaU)/V)/JFaUPoMi);
let U_SpPoSiBu = VmaxPoPo * QPo/ (1 + MPoPo/(QSp/(QSp + QPo)) + MSiPo/CSi + Math.pow((QSp/(QSp + QPo)/JSpVFA),ThetaSpPiPo) + (((QFaU*mrFaU - QFaU*mrFaU/(QFaU*mrFaU + QBa + QBf + QFn + QPo))/mrFaU)/V)/JFaUPoMi);
let U_SpPoSiLa = VmaxPoPo * QPo/ (1 + MPoPo/(QSp/(QSp + QPo)) + MSiPo/CSi + Math.pow((QSp/(QSp + QPo)/JSpVFA),ThetaSpPiPo) + (((QFaU*mrFaU - QFaU*mrFaU/(QFaU*mrFaU + QBa + QBf + QFn + QPo))/mrFaU)/V)/JFaUPoMi);
let U_SpPoSpAc = VmaxPoPo * QPo/ (1 + MPoPo/(QSp/(QSp + QPo)) + MSpPiPoAc/(QSp/(QSp + QPo)) + Math.pow((QSp/(QSp + QPo)/JSpVFA),ThetaSpPiPo) + (((QFaU*mrFaU - QFaU*mrFaU/(QFaU*mrFaU + QBa + QBf + QFn + QPo))/mrFaU)/V)/JFaUPoMi);
let U_SpPoSpBu = VmaxPoPo * QPo/ (1 + MPoPo/(QSp/(QSp + QPo)) + MSpPiPoBu/(QSp/(QSp + QPo)) + Math.pow((QSp/(QSp + QPo)/JSpVFA),ThetaSpPiPo) + (((QFaU*mrFaU - QFaU*mrFaU/(QFaU*mrFaU + QBa + QBf + QFn + QPo))/mrFaU)/V)/JFaUPoMi);
let U_SpPoSpLa = VmaxPoPo * QPo/ (1 + MPoPo/(QSp/(QSp + QPo)) + MSpPiPoLa/(QSp/(QSp + QPo)) + Math.pow((QSp/(QSp + QPo)/JSpVFA),ThetaSpPiPo) + (((QFaU*mrFaU - QFaU*mrFaU/(QFaU*mrFaU + QBa + QBf + QFn + QPo))/mrFaU)/V)/JFaUPoMi);
let U_SpPoLaAcBu = VmaxPoPo * QPo/ (1 + MPoPo/(QSp/(QSp + QPo)) + MAcLaPo/CAc + Math.pow((QSp/(QSp + QPo)/JSpVFA),ThetaSpPiPo) + (((QFaU*mrFaU - QFaU*mrFaU/(QFaU*mrFaU + QBa + QBf + QFn + QPo))/mrFaU)/V)/JFaUPoMi);
let U_SpPoAmAc = VmaxPoPo * QPo/(1 + MPoPo/(QSp/(QSp + QPo)) + (CWs + CSi + CFd + CLa + CAc)/JWsPsAmPo + Math.pow((QSp/(QSp + QPo)/JSpVFA),ThetaSpPiPo) + M_NAD_Ac/(rNAD ));
let U_SpPoAmBu = VmaxPoPo * QPo/(1 + MPoPo/(QSp/(QSp + QPo)) + (CWs + CSi + CFd + CLa + CAc)/JWsPsAmPo + Math.pow((QSp/(QSp + QPo)/JSpVFA),ThetaSpPiPo));
let U_SpPoAmLa = VmaxPoPo * QPo/(1 + MPoPo/(QSp/(QSp + QPo)) + (CWs + CSi + CFd + CLa + CAc)/JWsPsAmPo + Math.pow((QSp/(QSp + QPo)/JSpVFA),ThetaSpPiPo));
let U_Sp = U_SpPoExFl + U_SpPiPoAc + U_SpPiPoBu + U_SpPiPoLa + U_SpPsPoAc + U_SpPsPoBu + U_SpPsPoLa + U_SpBaPoAc + U_SpBaPoBu + U_SpBaPoLa + U_SpBfPoAc + U_SpBfPoBu + U_SpBfPoLa + U_SpFnPoAc + U_SpFnPoBu + U_SpFnPoLa + U_SpPoPoAc + U_SpPoPoBu + U_SpPoPoLa + U_SpNgPoAc + U_SpNgPoBu + U_SpNgPoLa + U_SpFaUPoAc + U_SpFaUPoBu + U_SpFaUPoLa + U_SpFaSPoAc + U_SpFaSPoBu + U_SpFaSPoLa + U_SpPoWsAc + U_SpPoWsBu + U_SpPoWsLa + U_SpPoFdAc + U_SpPoFdBu + U_SpPoFdLa + U_SpPoSiAc + U_SpPoSiBu + U_SpPoSiLa + U_SpPoSpAc + U_SpPoSpBu + U_SpPoSpLa + U_SpPoLaAcBu + U_SpPoAmAc + U_SpPoAmBu + U_SpPoAmLa;
let P_LaInLa = InLa;
let P_LaWsPsBa = YLaWs * U_WsPsBaLa;
let P_LaWsAmBa = YLaWs * U_WsAmBaLa;
let P_LaSaPsBa = YLaSaPsBa * U_SaPsBaLa;
let P_LaSaAmBa = YLaSaPsBa * U_SaAmBaLa;
let P_LaPsBaAm = YLaWs * YWsPsFerm * U_PsBaAmLa;
let P_LaWsNgBa = YLaWs * U_WsNgBaLa;
let P_LaWsSaBa = YLaWs * U_WsSaBaLa;
let P_LaWsBaFaU = YLaWs * U_WsFaUBaLa;
let P_LaWsBaFaS = YLaWs * U_WsFaSBaLa;
let P_LaSaNgBa = YLaSaPsBa * U_SaNgBaLa;
let P_LaSaBaFaU = YLaSaPsBa * U_SaFaUBaLa;
let P_LaSaBaFaS = YLaSaPsBa * U_SaFaSBaLa;
let P_LaWsPsFn = YLaWs * U_WsPsFnLa;
let P_LaWsAmFn = YLaWs * U_WsAmFnLa;
let P_LaSfnPsFn = YLaSfn * U_SfnPsFnLa;
let P_LaSfnAmFn = YLaSfn * U_SfnAmFnLa;
let P_LaPsFnAm = YLaWs * YWsPsFerm * U_PsFnAmLa;
let P_LaWsNgFn = YLaWs * U_WsNgFnLa;
let P_LaWsSfnFn = YLaWs * U_WsSfnFnLa;
let P_LaWsFnFaU = YLaWs * U_WsFaUFnLa;
let P_LaWsFnFaS = YLaWs * U_WsFaSFnLa;
let P_LaSfnNgFn = YLaSfn * U_SfnNgFnLa;
let P_LaSfnFnFaU = YLaSfn * U_SfnFaUFnLa;
let P_LaSfnFnFaS = YLaSfn * U_SfnFaSFnLa;
let P_LaWsPiPo = YLaWs * U_WsPiPoLa;
let P_LaFdPiPo = YLaWs * U_FdPiPoLa;
let P_LaSiPiPo = YLaWs * U_SiPiPoLa;
let P_LaSpPiPo = YLaSaPsBa * U_SpPiPoLa;
let P_LaPiPoAm = YLaWs * YWsPsFerm * U_PiPoAmLa;
let P_LaWsPsPo = YLaWs * U_WsPsPoLa;
let P_LaFdPsPo = YLaWs * U_FdPsPoLa;
let P_LaSiPsPo = YLaWs * U_SiPsPoLa;
let P_LaSpPsPo = YLaSaPsBa * U_SpPsPoLa;
let P_LaPsPoAm = YLaWs * YWsPsFerm * U_PsPoAmLa;
let P_LaWsBaPo = YLaWs * U_WsBaPoLa;
let P_LaFdBaPo = YLaWs * U_FdBaPoLa;
let P_LaSiBaPo = YLaWs * U_SiBaPoLa;
let P_LaSpBaPo = YLaSaPsBa * U_SpBaPoLa;
let P_LaBaPoAm = YLaWs * YWsPsFerm * YPsBaDe * U_BaPoAmLa;
let P_LaWsBfPo = YLaWs * U_WsBfPoLa;
let P_LaFdBfPo = YLaWs * U_FdBfPoLa;
let P_LaSiBfPo = YLaWs * U_SiBfPoLa;
let P_LaSpBfPo = YLaSaPsBa * U_SpBfPoLa;
let P_LaBfPoAm = YLaWs * YWsPsFerm * YPsBfDe * U_BfPoAmLa;
let P_LaWsFnPo = YLaWs * U_WsFnPoLa;
let P_LaFdFnPo = YLaWs * U_FdFnPoLa;
let P_LaSiFnPo = YLaWs * U_SiFnPoLa;
let P_LaSpFnPo = YLaSaPsBa * U_SpFnPoLa;
let P_LaFnPoAm = YLaWs * YWsPsFerm * YPsFnDe * U_FnPoAmLa;
let P_LaWsPoPo = YLaWs * U_WsPoPoLa;
let P_LaFdPoPo = YLaWs * U_FdPoPoLa;
let P_LaSiPoPo = YLaWs * U_SiPoPoLa;
let P_LaSpPoPo = YLaSaPsBa * U_SpPoPoLa;
let P_LaPoPoAm = YLaWs * YWsPsFerm * YPsPoDe * U_PoPoAmLa;
let P_LaWsNgPo = YLaWs * U_WsNgPoLa;
let P_LaWsSpPo = YLaWs * U_WsSpPoLa;
let P_LaWsPoFaU = YLaWs * U_WsFaUPoLa;
let P_LaWsPoFaS = YLaWs * U_WsFaSPoLa;
let P_LaFdNgPo = YLaWs * U_FdNgPoLa;
let P_LaFdSpPo = YLaWs * U_FdSpPoLa;
let P_LaFdPoFaU = YLaWs * U_FdFaUPoLa;
let P_LaFdPoFaS = YLaWs * U_FdFaSPoLa;
let P_LaSiNgPo = YLaWs * U_SiNgPoLa;
let P_LaSiSpPo = YLaWs * U_SiSpPoLa;
let P_LaSiPoFaU = YLaWs * U_SiFaUPoLa;
let P_LaSiPoFaS = YLaWs * U_SiFaSPoLa;
let P_LaSpNgPo = YLaSaPsBa * U_SpNgPoLa;
let P_LaSpPoFaU = YLaSaPsBa * U_SpFaUPoLa;
let P_LaSpPoFaS = YLaSaPsBa * U_SpFaSPoLa;
let U_LaLaEx = KFlEx * QLa;

//let U_LaLaAb = VmaxLaLaAb * Math.pow(V,0.75)/ (1+ MLaLaAb/CLa); Math.pow(
let U_LaLaAb = VmaxLaLaAb * Math.pow(V,0.75)/ (1+ MLaLaAb/CLa); 
    
let U_LaLactate = KdLa / (1 + MLaLaAb/CLa + CHplus/J_Hplus_LaLactate);
let U_LaPsBaAcPr = RLaPsBaAcPr * (U_PsBaLaAcPr/U_Ps) * QLa  / (1 +  rNAD/J_NAD_AcPr);
let U_LaPsBaAcBu = RLaPsBaAcBu * (U_PsBaLaAcBu/U_Ps) * QLa;
let U_LaAmBaAcPr = RLaAmBaAcPr * (U_AmBaLaAcPr/U_Am) * QLa  / (1 +  rNAD/J_NAD_AcPr);
let U_LaAmBaAcBu =  RLaAmBaAcBu * (U_AmBaLaAcBu/U_Am) * QLa;
let U_LaNgBaAcPr = VmaxLaBa * QBa/ (1 + MLaNgBa/CLa + CAm/JAmNgBa + CPs/JPsNgBa + rNAD/J_NAD_AcPr);
let U_LaNgBaAcBu =  VmaxLaBa * QBa/ (1 + MLaNgBa/CLa + CAm/JAmNgBa + CPs/JPsNgBa);
    
let U_LaSaBaAcPr = VmaxLaSa * QBa/ (1 + MLaSa/CLa + Math.pow((QSa/(QSa + QBa)/JSaSa),ThetaSaSaBa)  + rNAD/J_NAD_AcPr);
let U_LaSaBaAcBu = VmaxLaSa * QBa/ (1 + MLaSa/CLa + Math.pow((QSa/(QSa + QBa)/JSaSa),ThetaSaSaBa) );
    
  
let U_LaFaUBaAcPr = VmaxLaBa * QBa/ (1 + MLaNgBa/CLa + rNAD/J_NAD_AcPr);
let U_LaFaUBaAcBu = VmaxLaBa * QBa/ (1 + MLaNgBa/CLa);
let U_LaFaSBaAcPr = VmaxLaBa * QBa/ (1 + MLaNgBa/CLa + rNAD/J_NAD_AcPr);
let U_LaFaSBaAcBu =VmaxLaBa * QBa/ (1 + MLaNgBa/CLa);
let U_LaPsFnAcBu = RLaPsFn * (U_PsFnLaAcBu/U_Ps) * QLa;
let U_LaAmFnAcBu = RLaAmFn * (U_AmFnLaAcBu/U_Ps) * QLa;
let U_LaNgFnAcBu =  VmaxLaFn * QFn/ (1 + MLaFn/CLa + CAm/JAmNgFn + CPs/JPsNgFn);
let U_LaSfnFnAcBu = VmaxLaFn * QFn/ (1 + MLaFn/CLa + Math.pow((QSfn/(QSfn + QFn)/JSfnSfn),ThetaSfnSfnFn) );
let U_LaFaUFnAcBu =  VmaxLaFn * QFn/ (1 + MLaFn/CLa);
let U_LaFaSFnAcBu = VmaxLaFn * QFn/ (1 + MLaFn/CLa);
let U_LaPiPoAcBu = RLaPiPoAcBu * (U_PiPoLaAcBu/U_Pi) * QLa;
let U_LaPsPoAcBu = RLaPsPoAcBu * (U_PsPoLaAcBu/U_Ps) * QLa;
let U_LaBaPoAcBu = RLaBaPoAcBu * (U_BaPoLaAcBu/U_Ba) * QLa;
let U_LaBfPoAcBu = RLaBfPoAcBu * (U_BfPoLaAcBu/U_Bf) * QLa;
let U_LaFnPoAcBu = RLaFnPoAcBu * (U_FnPoLaAcBu/U_Fn) * QLa;
let U_LaPoPoAcBu = RLaPoPoAcBu * (U_PoPoLaAcBu/U_Po) * QLa;
let U_LaNgPoAcBu = VmaxLaPo * QPo/ (1 + MLaPo/CLa + CPi/JPsNgPo + CPs/JPsNgPo + CBa/JBaNgPo + CBf/JBfNgPo + CFn/JFnPoNg + CPo/JPoNgPo);
let U_LaSpPoAcBu = VmaxLaSp * QPo/ (1 + MLaSp/CLa + Math.pow((QSp/(QSp + QPo)/JSpSp),ThetaSpSpPo) );
let U_LaFaUPoAcBu = VmaxLaPo * QPo / (1 + MLaPo/CLa);
let U_LaFaSPoAcBu = VmaxLaPo * QPo / (1 + MLaPo/CLa);
let dQLadt = P_LaInLa + P_LaWsPsBa + P_LaWsAmBa + P_LaSaPsBa + P_LaSaAmBa + P_LaPsBaAm + P_LaWsNgBa + P_LaWsSaBa + P_LaWsBaFaU + P_LaWsBaFaS + P_LaSaNgBa + P_LaSaBaFaU + P_LaSaBaFaS + P_LaWsPsFn + P_LaWsAmFn + P_LaSfnPsFn + P_LaSfnAmFn + P_LaPsFnAm + P_LaWsNgFn + P_LaWsSfnFn + P_LaWsFnFaU + P_LaWsFnFaS + P_LaSfnNgFn + P_LaSfnFnFaU + P_LaSfnFnFaS + P_LaWsPiPo + P_LaFdPiPo + P_LaSiPiPo + P_LaSpPiPo + P_LaPiPoAm + P_LaWsPsPo + P_LaFdPsPo + P_LaSiPsPo + P_LaSpPsPo + P_LaPsPoAm + P_LaWsBaPo + P_LaFdBaPo + P_LaSiBaPo + P_LaSpBaPo + P_LaBaPoAm + P_LaWsBfPo + P_LaFdBfPo + P_LaSiBfPo + P_LaSpBfPo + P_LaBfPoAm + P_LaWsFnPo + P_LaFdFnPo + P_LaSiFnPo + P_LaSpFnPo + P_LaFnPoAm + P_LaWsPoPo + P_LaFdPoPo + P_LaSiPoPo + P_LaSpPoPo + P_LaPoPoAm + P_LaWsNgPo + P_LaWsSpPo + P_LaWsPoFaU + P_LaWsPoFaS + P_LaFdNgPo + P_LaFdSpPo + P_LaFdPoFaU + P_LaFdPoFaS + P_LaSiNgPo + P_LaSiSpPo + P_LaSiPoFaU + P_LaSiPoFaS + P_LaSpNgPo + P_LaSpPoFaU + P_LaSpPoFaS - U_LaLaEx - U_LaLaAb - U_LaLactate - U_LaPsBaAcPr - U_LaPsBaAcBu - U_LaAmBaAcPr - U_LaAmBaAcBu - U_LaNgBaAcPr - U_LaNgBaAcBu - U_LaSaBaAcPr - U_LaSaBaAcBu - U_LaFaUBaAcPr - U_LaFaUBaAcBu - U_LaFaSBaAcPr - U_LaFaSBaAcBu - U_LaPsFnAcBu - U_LaAmFnAcBu - U_LaNgFnAcBu - U_LaSfnFnAcBu - U_LaFaUFnAcBu - U_LaFaSFnAcBu - U_LaPiPoAcBu - U_LaPsPoAcBu - U_LaBaPoAcBu - U_LaBfPoAcBu - U_LaFnPoAcBu - U_LaPoPoAcBu - U_LaNgPoAcBu - U_LaSpPoAcBu - U_LaFaUPoAcBu - U_LaFaSPoAcBu;
let U_La =  U_LaLaEx + U_LaLaAb + U_LaLactate + U_LaPsBaAcPr + U_LaPsBaAcBu + U_LaAmBaAcPr + U_LaAmBaAcBu + U_LaNgBaAcPr + U_LaNgBaAcBu + U_LaSaBaAcPr + U_LaSaBaAcBu + U_LaFaUBaAcPr + U_LaFaUBaAcBu + U_LaFaSBaAcPr + U_LaFaSBaAcBu + U_LaPsFnAcBu + U_LaAmFnAcBu + U_LaNgFnAcBu + U_LaSfnFnAcBu + U_LaFaUFnAcBu + U_LaFaSFnAcBu + U_LaPiPoAcBu + U_LaPsPoAcBu + U_LaBaPoAcBu + U_LaBfPoAcBu + U_LaFnPoAcBu + U_LaPoPoAcBu + U_LaNgPoAcBu + U_LaSpPoAcBu + U_LaFaUPoAcBu + U_LaFaSPoAcBu;
let P_SaBaWsAc = YSaBaWsAc * U_WsSaBaAc;
let P_SaBaWsBu = YSaBaWsBu * U_WsSaBaBu;
let P_SaBaWsAcPr = YSaBaWsAcPr * U_WsSaBaAcPr;
let P_SaBaWsLa = YSaBaWsLa * U_WsSaBaLa;
let P_SaBaLaAcPr = YSaBaLaAcPr * U_LaSaBaAcPr;
let P_SaBaLaAcBu = YSaBaLaAcBu * U_LaSaBaAcBu;
let dQSadt = P_SaBaWsAc + P_SaBaWsBu + P_SaBaWsAcPr + P_SaBaWsLa + P_SaBaLaAcPr + P_SaBaLaAcBu - U_SaSaEx - U_SaPsBaAc - U_SaPsBaBu - U_SaPsBaAcPr - U_SaPsBaLa - U_SaAmBaAc - U_SaAmBaBu - U_SaAmBaAcPr - U_SaAmBaLa - U_SaNgBaAc - U_SaNgBaBu - U_SaNgBaAcPr - U_SaNgBaLa - U_SaFaUBaAc - U_SaFaUBaBu - U_SaFaUBaAcPr - U_SaFaUBaLa - U_SaFaSBaAc - U_SaFaSBaBu - U_SaFaSBaAcPr - U_SaFaSBaLa - U_SaPoWsAc - U_SaPoWsBu - U_SaPoWsLa - U_SaPoFdAc - U_SaPoFdBu - U_SaPoFdLa - U_SaPoSiAc - U_SaPoSiBu - U_SaPoSiLa - U_SaPoSpAc - U_SaPoSpBu - U_SaPoSpLa - U_SaPoLaAcBu - U_SaPoAmAc - U_SaPoAmBu - U_SaPoAmLa;
let P_SfnFnWsAc = YSfnWs * U_WsSfnFnAc;
let P_SfnFnWsBu = YSfnWs * U_WsSfnFnBu;
let P_SfnFnWsLa = YSfnWs * U_WsSfnFnLa;
let P_SfnFnLaAcBu = YSfnLa * U_LaSfnFnAcBu;
let dQSfndt = P_SfnFnWsAc + P_SfnFnWsBu + P_SfnFnWsLa + P_SfnFnLaAcBu - U_SfnSfnExSo - U_SfnSfnExFl - U_SfnPsFnAc - U_SfnPsFnBu - U_SfnPsFnLa - U_SfnAmFnAc - U_SfnAmFnBu - U_SfnAmFnLa - U_SfnNgFnAc - U_SfnNgFnBu - U_SfnNgFnLa - U_SfnFaUFnAc - U_SfnFaUFnBu - U_SfnFaUFnLa - U_SfnFaSFnAc - U_SfnFaSFnBu - U_SfnFaSFnLa - U_SfnPoWsAc - U_SfnPoWsBu - U_SfnPoWsLa - U_SfnPoFdAc - U_SfnPoFdBu - U_SfnPoFdLa - U_SfnPoSiAc - U_SfnPoSiBu - U_SfnPoSiLa - U_SfnPoSpAc - U_SfnPoSpBu - U_SfnPoSpLa - U_SfnPoLaAcBu - U_SfnPoAmAc - U_SfnPoAmBu - U_SfnPoAmLa;
let P_SpPoWsAc = YSpPoWsAc * U_WsSpPoAc;
let P_SpPoWsBu = YSpPoWsBu * U_WsSpPoBu;
let P_SpPoWsLa = YSpPoWsLa * U_WsSpPoLa;
let P_SpPoFdAc = YSpPoWsAc * U_FdSpPoAc;
let P_SpPoFdBu = YSpPoWsBu * U_FdSpPoBu;
let P_SpPoFdLa = YSpPoWsLa * U_FdSpPoLa;
let P_SpPoSiAc = YSpPoWsAc * U_SiSpPoAc;
let P_SpPoSiBu = YSpPoWsBu * U_SiSpPoBu;
let P_SpPoSiLa = YSpPoWsLa * U_SiSpPoLa;
let P_SpPoLaAcBu = YSpPoLaAcBu * U_LaSpPoAcBu;
let P_LactateLa = U_LaLactate;
let U_LactateLactateEx = KFlExLa * QLactate;
let U_LactateLactateAb = VmaxLactateLactateAb * Math.pow(V,0.75)/ (1+ MLactateLactateAb/CLactate);
let dQLactatedt = P_LactateLa - U_LactateLactateEx - U_LactateLactateAb;
let P_FaUInFaU = InFaU;
let P_FaUTgBa = YFaUTg * U_TgWsFaUBa;
let P_FaUTgBf = YFaUTg * U_TgWsFaUBf;
let P_FaUWsBaAc = YFaUWsBaAc * U_WsFaUBaAc;
let P_FaUWsBaBu = YFaUWsBaBu * U_WsFaUBaBu;
let P_FaUWsBaAcPr = YFaUWsBaAcPr * U_WsFaUBaAcPr;
let P_FaUWsBaLa = YFaUWsBaLa * U_WsFaUBaLa;
let P_FaUSaBaAc = YFaUSaBaAc * U_SaFaUBaAc;
let P_FaUSaBaBu = YFaUSaBaBu * U_SaFaUBaBu;
let P_FaUSaBaAcPr = YFaUSaBaAcPr * U_SaFaUBaAcPr;
let P_FaUSaBaLa = YFaUSaBaLa * U_SaFaUBaLa;
let P_FaULaBaAcPr = YFaULaBaAcPr * U_LaFaUBaAcPr;
let P_FaULaBaAcBu = YFaULaBaAcBu * U_LaFaUBaAcBu;
let P_FaUWsBfAc = YFaUWsBfAc * U_WsFaUBfAc;
let P_FaUWsBfBu = YFaUWsBfBu * U_WsFaUBfBu;
let P_FaUWsBfAcPr = YFaUWsBfAcPr * U_WsFaUBfAcPr;
let P_FaUSfBfAc = YFaUSfBfAc * U_SfFaUBfAc;
let P_FaUSfBfBu = YFaUSfBfBu * U_SfFaUBfBu;
let P_FaUSfBfAcPr = YFaUSfBfAcPr * U_SfFaUBfAcPr;
let P_FaUWsFnAc = YFaUWsFn * U_WsFaUFnAc;
let P_FaUWsFnBu = YFaUWsFn * U_WsFaUFnBu;
let P_FaUWsFnLa = YFaUWsFn * U_WsFaUFnLa;
let P_FaUSfnFnAc = YFaUSfn * U_SfnFaUFnAc;
let P_FaUSfnFnBu = YFaUSfn * U_SfnFaUFnBu;
let P_FaUSfnFnLa = YFaUSfn * U_SfnFaUFnLa;
let P_FaULaFnAcBu = YFaUSfn * U_LaFaUFnAcBu;
let P_FaUWsPoAc = YFaUWsPoAc * U_WsFaUPoAc;
let P_FaUWsPoBu = YFaUWsPoBu * U_WsFaUPoBu;
let P_FaUWsPoLa = YFaUWsPoLa * U_WsFaUPoLa;
let P_FaUFdPoAc = YFaUWsPoAc * U_FdFaUPoAc;
let P_FaUFdPoBu = YFaUWsPoBu * U_FdFaUPoBu;
let P_FaUFdPoLa = YFaUWsPoLa * U_FdFaUPoLa;
let P_FaUSiPoAc = YFaUWsPoAc * U_SiFaUPoAc;
let P_FaUSiPoBu = YFaUWsPoBu * U_SiFaUPoBu;
let P_FaUSiPoLa = YFaUWsPoLa * U_SiFaUPoLa;
let P_FaUSpPoAc = YFaUSpPoAc * U_SpFaUPoAc;
let P_FaUSpPoBu = YFaUSpPoBu * U_SpFaUPoBu;
let P_FaUSpPoLa = YFaUSpPoLa * U_SpFaUPoLa;
let P_FaULaPoAcBu = YFaULaPoAcBu * U_LaFaUPoAcBu;
let U_FaUFaUEx = KFlEx * QFaU;
let U_FaUFaSBa = VmaxFaUFaSBa * QBa / (1 + MFaUFaSBa/CFaU);
let U_FaUFaSBf = VmaxFaUFaSBf * QBf / (1 + MFaUFaSBf/CFaU);
let U_FaUFaSFn = VmaxFaUFaSFn * QFn / (1 + MFaUFaSFn/CFaU);
let U_FaUPsBaWsAc = RFaUPsBa * (U_PsBaWsAc/U_Ps) * QFaU;
let U_FaUPsBaWsBu = RFaUPsBa * (U_PsBaWsBu/U_Ps) * QFaU;
let U_FaUPsBaWsAcPr = RFaUPsBa * (U_PsBaWsAcPr/U_Ps) * QFaU;
let U_FaUPsBaWsLa = RFaUPsBa * (U_PsBaWsLa /U_Ps) * QFaU;
let U_FaUPsBaSaAc = RFaUPsBa * (U_PsBaSaAc/U_Ps) * QFaU;
let U_FaUPsBaSaBu = RFaUPsBa * (U_PsBaSaBu/U_Ps) * QFaU;
let U_FaUPsBaSaAcPr = RFaUPsBa * (U_PsBaSaAcPr/U_Ps) * QFaU;
let U_FaUPsBaSaLa = RFaUPsBa * (U_PsBaSaLa/U_Ps) * QFaU;
let U_FaUPsBaLaAcPr = RFaUPsBa * (U_PsBaLaAcPr/U_Ps) * QFaU;
let U_FaUPsBaLaAcBu = RFaUPsBa * (U_PsBaLaAcBu/U_Ps) * QFaU;
let U_FaUAmBaWsAc = RFaUAmBa * (U_AmBaWsAc/U_Am) * QFaU;
let U_FaUAmBaWsBu = RFaUAmBa * (U_AmBaWsBu/U_Am) * QFaU;
let U_FaUAmBaWsAcPr = RFaUAmBa * (U_AmBaWsAcPr/U_Am) * QFaU;
let U_FaUAmBaWsLa = RFaUAmBa * (U_AmBaWsLa/U_Am) * QFaU;
let U_FaUAmBaSaAc = RFaUAmBa * (U_AmBaSaAc/U_Am) * QFaU;
let U_FaUAmBaSaBu = RFaUAmBa * (U_AmBaSaBu/U_Am) * QFaU;
let U_FaUAmBaSaAcPr = RFaUAmBa * (U_AmBaSaAcPr/U_Am) * QFaU;
let U_FaUAmBaSaLa = RFaUAmBa * (U_AmBaSaLa/U_Am) * QFaU;
let U_FaUAmBaLaAcPr = RFaUAmBa * (U_AmBaLaAcPr/U_Am) * QFaU;
let U_FaUAmBaLaAcBu = RFaUAmBa * (U_AmBaLaAcBu/U_Am) * QFaU;
let U_FaUPsBfWsAc = RFaUPsBf * (U_PsBfWsAc/U_Ps) * QFaU;
let U_FaUPsBfWsBu = RFaUPsBf * (U_PsBfWsBu/U_Ps) * QFaU;
let U_FaUPsBfWsAcPr = RFaUPsBf * (U_PsBfWsAcPr/U_Ps) * QFaU;
let U_FaUPsBfSfAc = RFaUPsBf * (U_PsBfSfAc/U_Ps) * QFaU;
let U_FaUPsBfSfBu = RFaUPsBf * (U_PsBfSfBu/U_Ps) * QFaU;
let U_FaUPsBfSfAcPr = RFaUPsBf * (U_PsBfSfAcPr/U_Ps) * QFaU;
let U_FaUAmBfWsAc = RFaUAmBf * (U_AmBfWsAc/U_Am) * QFaU;
let U_FaUAmBfWsBu = RFaUAmBf * (U_AmBfWsBu/U_Am) * QFaU;
let U_FaUAmBfWsAcPr = RFaUAmBf * (U_AmBfWsAcPr/U_Am) * QFaU;
let U_FaUAmBfSfAc = RFaUAmBf * (U_AmBfSfAc/U_Am) * QFaU;
let U_FaUAmBfSfBu = RFaUAmBf * (U_AmBfSfBu/U_Am) * QFaU;
let U_FaUAmBfSfAcPr = RFaUAmBf * (U_AmBfSfAcPr/U_Am) * QFaU;
let U_FaUPsFnWsAc = RFaUPsFn * (U_PsFnWsAc/U_Ps) * QFaU;
let U_FaUPsFnWsBu = RFaUPsFn * (U_PsFnWsBu/U_Ps) * QFaU;
let U_FaUPsFnWsLa = RFaUPsFn * (U_PsFnWsLa/U_Ps) * QFaU;
let U_FaUPsFnSfnAc = RFaUPsFn * (U_PsFnSfnAc/U_Ps) * QFaU;
let U_FaUPsFnSfnBu = RFaUPsFn * (U_PsFnSfnBu/U_Ps) * QFaU;
let U_FaUPsFnSfnLa = RFaUPsFn * (U_PsFnSfnLa/U_Ps) * QFaU;
let U_FaUPsFnLaAcBu = RFaUPsFn * (U_PsFnLaAcBu/U_Ps) * QFaU;
let U_FaUAmFnWsAc = RFaUAmFn * (U_AmFnWsAc/U_Am) * QFaU;
let U_FaUAmFnWsBu = RFaUAmFn * (U_AmFnWsBu/U_Am) * QFaU;
let U_FaUAmFnWsLa = RFaUAmFn * (U_AmFnWsLa/U_Am) * QFaU;
let U_FaUAmFnSfnAc = RFaUAmFn * (U_AmFnSfnAc/U_Am) * QFaU;
let U_FaUAmFnSfnBu = RFaUAmFn * (U_AmFnSfnBu /U_Am) * QFaU;
let U_FaUAmFnSfnLa = RFaUAmFn * (U_AmFnSfnLa/U_Am) * QFaU;
let U_FaUAmFnLaAcBu = RFaUAmFn * (U_AmFnLaAcBu/U_Am) * QFaU;
let U_FaUPiPoWsAc = RFaUPsPo * (U_PiPoWsAc/U_Pi) * QFaU;
let U_FaUPiPoWsBu = RFaUPsPo * (U_PiPoWsBu/U_Pi) * QFaU;
let U_FaUPiPoWsLa = RFaUPsPo * (U_PiPoWsLa/U_Pi) * QFaU;
let U_FaUPiPoFdAc = RFaUPsPo * (U_PiPoFdAc/U_Pi) * QFaU;
let U_FaUPiPoFdBu = RFaUPsPo * (U_PiPoFdBu/U_Pi) * QFaU;
let U_FaUPiPoFdLa = RFaUPsPo * (U_PiPoFdLa/U_Pi) * QFaU;
let U_FaUPiPoSiAc = RFaUPsPo * (U_PiPoSiAc/U_Pi) * QFaU;
let U_FaUPiPoSiBu = RFaUPsPo * (U_PiPoSiBu/U_Pi) * QFaU;
let U_FaUPiPoSiLa = RFaUPsPo * (U_PiPoSiLa/U_Pi) * QFaU;
let U_FaUPiPoSpAc = RFaUPsPo * (U_PiPoSpAc/U_Pi) * QFaU;
let U_FaUPiPoSpBu = RFaUPsPo * (U_PiPoSpBu/U_Pi) * QFaU;
let U_FaUPiPoSpLa = RFaUPsPo * (U_PiPoSpLa/U_Pi) * QFaU;
let U_FaUPiPoLaAcBu = RFaUPsPo * (U_PiPoLaAcBu/U_Pi) * QFaU;
let U_FaUPsPoWsAc = RFaUPsPo * (U_PsPoWsAc/U_Ps) * QFaU;
let U_FaUPsPoWsBu = RFaUPsPo * (U_PsPoWsBu/U_Ps) * QFaU;
let U_FaUPsPoWsLa = RFaUPsPo * (U_PsPoWsLa/U_Ps) * QFaU;
let U_FaUPsPoFdAc = RFaUPsPo * (U_PsPoFdAc/U_Ps) * QFaU;
let U_FaUPsPoFdBu = RFaUPsPo * (U_PsPoFdBu/U_Ps) * QFaU;
let U_FaUPsPoFdLa = RFaUPsPo * (U_PsPoFdLa/U_Ps) * QFaU;
let U_FaUPsPoSiAc = RFaUPsPo * (U_PsPoSiAc/U_Ps) * QFaU;
let U_FaUPsPoSiBu = RFaUPsPo * (U_PsPoSiBu/U_Ps) * QFaU;
let U_FaUPsPoSiLa = RFaUPsPo * (U_PsPoSiLa/U_Ps) * QFaU;
let U_FaUPsPoSpAc = RFaUPsPo * (U_PsPoSpAc/U_Ps) * QFaU;
let U_FaUPsPoSpBu = RFaUPsPo * (U_PsPoSpBu/U_Ps) * QFaU;
let U_FaUPsPoSpLa = RFaUPsPo * (U_PsPoSpLa/U_Ps) * QFaU;
let U_FaUPsPoLaAcBu = RFaUPsPo * (U_PsPoLaAcBu/U_Ps) * QFaU;
let U_FaUBaPoWsAc = RFaUBaPo * (U_BaPoWsAc/U_Ba) * QFaU;
let U_FaUBaPoWsBu = RFaUBaPo * (U_BaPoWsBu/U_Ba) * QFaU;
let U_FaUBaPoWsLa = RFaUBaPo * (U_BaPoWsLa/U_Ba) * QFaU;
let U_FaUBaPoFdAc = RFaUBaPo * (U_BaPoFdAc/U_Ba) * QFaU;
let U_FaUBaPoFdBu = RFaUBaPo * (U_BaPoFdBu/U_Ba) * QFaU;
let U_FaUBaPoFdLa = RFaUBaPo * (U_BaPoFdLa/U_Ba) * QFaU;
let U_FaUBaPoSiAc = RFaUBaPo * (U_BaPoSiAc/U_Ba) * QFaU;
let U_FaUBaPoSiBu = RFaUBaPo * (U_BaPoSiBu/U_Ba) * QFaU;
let U_FaUBaPoSiLa = RFaUBaPo * (U_BaPoSiLa/U_Ba) * QFaU;
let U_FaUBaPoSpAc = RFaUBaPo * (U_BaPoSpAc/U_Ba) * QFaU;
let U_FaUBaPoSpBu = RFaUBaPo * (U_BaPoSpBu/U_Ba) * QFaU;
let U_FaUBaPoSpLa = RFaUBaPo * (U_BaPoSpLa/U_Ba) * QFaU;
let U_FaUBaPoLaAcBu = RFaUBaPo * (U_BaPoLaAcBu/U_Ba) * QFaU;
let U_FaUBfPoWsAc = RFaUBaPo * (U_BfPoWsAc/U_Bf) * QFaU;
let U_FaUBfPoWsBu = RFaUBaPo * (U_BfPoWsBu/U_Bf) * QFaU;
let U_FaUBfPoWsLa = RFaUBaPo * (U_BfPoWsLa/U_Bf) * QFaU;
let U_FaUBfPoFdAc = RFaUBaPo * (U_BfPoFdAc /U_Bf) * QFaU;
let U_FaUBfPoFdBu = RFaUBaPo * (U_BfPoFdBu/U_Bf) * QFaU;
let U_FaUBfPoFdLa = RFaUBaPo * (U_BfPoFdLa/U_Bf) * QFaU;
let U_FaUBfPoSiAc = RFaUBaPo * (U_BfPoSiAc/U_Bf) * QFaU;
let U_FaUBfPoSiBu = RFaUBaPo * (U_BfPoSiBu/U_Bf) * QFaU;
let U_FaUBfPoSiLa = RFaUBaPo * (U_BfPoSiLa/U_Bf) * QFaU;
let U_FaUBfPoSpAc = RFaUBaPo * (U_BfPoSpAc/U_Bf) * QFaU;
let U_FaUBfPoSpBu = RFaUBaPo * (U_BfPoSpBu /U_Bf) * QFaU;
let U_FaUBfPoSpLa = RFaUBaPo * (U_BfPoSpLa /U_Bf) * QFaU;
let U_FaUBfPoLaAcBu = RFaUBaPo * (U_BfPoLaAcBu/U_Bf) * QFaU;
let U_FaUFnPoWsAc = RFaUBaPo * (U_FnPoWsAc/U_Fn) * QFaU;
let U_FaUFnPoWsBu = RFaUBaPo * (U_FnPoWsBu/U_Fn) * QFaU;
let U_FaUFnPoWsLa = RFaUBaPo * (U_FnPoWsLa/U_Fn) * QFaU;
let U_FaUFnPoFdAc = RFaUBaPo * (U_FnPoFdAc/U_Fn) * QFaU;
let U_FaUFnPoFdBu = RFaUBaPo * (U_FnPoFdBu/U_Fn) * QFaU;
let U_FaUFnPoFdLa = RFaUBaPo * (U_FnPoFdLa/U_Fn) * QFaU;
let U_FaUFnPoSiAc = RFaUBaPo * (U_FnPoSiAc/U_Fn) * QFaU;
let U_FaUFnPoSiBu = RFaUBaPo * (U_FnPoSiBu/U_Fn) * QFaU;
let U_FaUFnPoSiLa = RFaUBaPo * (U_FnPoSiLa/U_Fn) * QFaU;
let U_FaUFnPoSpAc = RFaUBaPo * (U_FnPoSpAc/U_Fn) * QFaU;
let U_FaUFnPoSpBu = RFaUBaPo * (U_FnPoSpBu/U_Fn) * QFaU;
let U_FaUFnPoSpLa = RFaUBaPo * (U_FnPoSpLa/U_Fn) * QFaU;
let U_FaUFnPoLaAcBu = RFaUBaPo * (U_FnPoLaAcBu/U_Fn) * QFaU;
let U_FaUPoPoWsAc = RFaUBaPo * (U_PoPoWsAc/U_Po) * QFaU;
let U_FaUPoPoWsBu = RFaUBaPo * (U_PoPoWsBu/U_Po) * QFaU;
let U_FaUPoPoWsLa = RFaUBaPo * (U_PoPoWsLa/U_Po) * QFaU;
let U_FaUPoPoFdAc = RFaUBaPo * (U_PoPoFdAc/U_Po) * QFaU;
let U_FaUPoPoFdBu = RFaUBaPo * (U_PoPoFdBu/U_Po) * QFaU;
let U_FaUPoPoFdLa = RFaUBaPo * (U_PoPoFdLa/U_Po) * QFaU;
let U_FaUPoPoSiAc = RFaUBaPo * (U_PoPoSiAc/U_Po) * QFaU;
let U_FaUPoPoSiBu = RFaUBaPo * (U_PoPoSiBu/U_Po) * QFaU;
let U_FaUPoPoSiLa = RFaUBaPo * (U_PoPoSiLa/U_Po) * QFaU;
let U_FaUPoPoSpAc = RFaUBaPo * (U_PoPoSpAc/U_Po) * QFaU;
let U_FaUPoPoSpBu = RFaUBaPo * (U_PoPoSpBu/U_Po) * QFaU;
let U_FaUPoPoSpLa = RFaUBaPo * (U_PoPoSpLa/U_Po) * QFaU;
let U_FaUPoPoLaAcBu = RFaUBaPo * (U_PoPoLaAcBu/U_Po) * QFaU;
let U_FaU =  U_FaUFaUEx + U_FaUFaSBa + U_FaUFaSBf + U_FaUFaSFn + U_FaUPsBaWsAc + U_FaUPsBaWsBu + U_FaUPsBaWsAcPr + U_FaUPsBaWsLa + U_FaUPsBaSaAc + U_FaUPsBaSaBu + U_FaUPsBaSaAcPr + U_FaUPsBaSaLa + U_FaUPsBaLaAcPr + U_FaUPsBaLaAcBu + U_FaUAmBaWsAc + U_FaUAmBaWsBu + U_FaUAmBaWsAcPr + U_FaUAmBaWsLa + U_FaUAmBaSaAc + U_FaUAmBaSaBu + U_FaUAmBaSaAcPr + U_FaUAmBaSaLa + U_FaUAmBaLaAcPr + U_FaUAmBaLaAcBu + U_FaUPsBfWsAc + U_FaUPsBfWsBu + U_FaUPsBfWsAcPr + U_FaUPsBfSfAc + U_FaUPsBfSfBu + U_FaUPsBfSfAcPr + U_FaUAmBfWsAc + U_FaUAmBfWsBu + U_FaUAmBfWsAcPr + U_FaUAmBfSfAc + U_FaUAmBfSfBu + U_FaUAmBfSfAcPr + U_FaUPsFnWsAc + U_FaUPsFnWsBu + U_FaUPsFnWsLa + U_FaUPsFnSfnAc + U_FaUPsFnSfnBu + U_FaUPsFnSfnLa + U_FaUPsFnLaAcBu + U_FaUAmFnWsAc + U_FaUAmFnWsBu + U_FaUAmFnWsLa + U_FaUAmFnSfnAc + U_FaUAmFnSfnBu + U_FaUAmFnSfnLa + U_FaUAmFnLaAcBu + U_FaUPiPoWsAc + U_FaUPiPoWsBu + U_FaUPiPoWsLa + U_FaUPiPoFdAc + U_FaUPiPoFdBu + U_FaUPiPoFdLa + U_FaUPiPoSiAc + U_FaUPiPoSiBu + U_FaUPiPoSiLa + U_FaUPiPoSpAc + U_FaUPiPoSpBu + U_FaUPiPoSpLa + U_FaUPiPoLaAcBu + U_FaUPsPoWsAc + U_FaUPsPoWsBu + U_FaUPsPoWsLa + U_FaUPsPoFdAc + U_FaUPsPoFdBu + U_FaUPsPoFdLa + U_FaUPsPoSiAc + U_FaUPsPoSiBu + U_FaUPsPoSiLa + U_FaUPsPoSpAc + U_FaUPsPoSpBu + U_FaUPsPoSpLa + U_FaUPsPoLaAcBu + U_FaUBaPoWsAc + U_FaUBaPoWsBu + U_FaUBaPoWsLa + U_FaUBaPoFdAc + U_FaUBaPoFdBu + U_FaUBaPoFdLa + U_FaUBaPoSiAc + U_FaUBaPoSiBu + U_FaUBaPoSiLa + U_FaUBaPoSpAc + U_FaUBaPoSpBu + U_FaUBaPoSpLa + U_FaUBaPoLaAcBu + U_FaUBfPoWsAc + U_FaUBfPoWsBu + U_FaUBfPoWsLa + U_FaUBfPoFdAc + U_FaUBfPoFdBu + U_FaUBfPoFdLa + U_FaUBfPoSiAc + U_FaUBfPoSiBu + U_FaUBfPoSiLa + U_FaUBfPoSpAc + U_FaUBfPoSpBu + U_FaUBfPoSpLa + U_FaUBfPoLaAcBu + U_FaUFnPoWsAc + U_FaUFnPoWsBu + U_FaUFnPoWsLa + U_FaUFnPoFdAc + U_FaUFnPoFdBu + U_FaUFnPoFdLa + U_FaUFnPoSiAc + U_FaUFnPoSiBu + U_FaUFnPoSiLa + U_FaUFnPoSpAc + U_FaUFnPoSpBu + U_FaUFnPoSpLa + U_FaUFnPoLaAcBu + U_FaUPoPoWsAc + U_FaUPoPoWsBu + U_FaUPoPoWsLa + U_FaUPoPoFdAc + U_FaUPoPoFdBu + U_FaUPoPoFdLa + U_FaUPoPoSiAc + U_FaUPoPoSiBu + U_FaUPoPoSiLa + U_FaUPoPoSpAc + U_FaUPoPoSpBu + U_FaUPoPoSpLa + U_FaUPoPoLaAcBu;
let P_FaSInFaS = InFaS;
let P_FaSTgBa = YFaSTg * U_TgWsFaSBa;
let P_FaSTgBf = YFaSTg * U_TgWsFaSBf;
let P_FaSFaUFaSBa = YFaSFaU * U_FaUFaSBa;
let P_FaSFaUFaSBf = YFaSFaU * U_FaUFaSBf;
let P_FaSFaUFaSFn = YFaSFaU * U_FaUFaSFn;
let P_FaSWsBaAc = YFaSWsBaAc * U_WsFaSBaAc;
let P_FaSWsBaBu = YFaSWsBaBu * U_WsFaSBaBu;
let P_FaSWsBaAcPr = YFaSWsBaAcPr * U_WsFaSBaAcPr;
let P_FaSWsBaLa = YFaSWsBaLa * U_WsFaSBaLa;
let P_FaSSaBaAc = YFaSSaBaAc * U_SaFaSBaAc;
let P_FaSSaBaBu = YFaSSaBaBu * U_SaFaSBaBu;
let P_FaSSaBaAcPr = YFaSSaBaAcPr * U_SaFaSBaAcPr;
let P_FaSSaBaLa = YFaSSaBaLa * U_SaFaSBaLa;
let P_FaSLaBaAcPr = YFaSLaBaAcPr * U_LaFaSBaAcPr;
let P_FaSLaBaAcBu = YFaSLaBaAcBu * U_LaFaSBaAcBu;
let P_FaSWsBfAc = YFaSWsBfAc * U_WsFaSBfAc;
let P_FaSWsBfBu = YFaSWsBfBu * U_WsFaSBfBu;
let P_FaSWsBfAcPr = YFaSWsBfAcPr * U_WsFaSBfAcPr;
let P_FaSSfBfAc = YFaSSfBfAc * U_SfFaSBfAc;
let P_FaSSfBfBu = YFaSSfBfBu * U_SfFaSBfBu;
let P_FaSSfBfAcPr = YFaSSfBfAcPr * U_SfFaSBfAcPr;
let P_FaSWsFnAc = YFaSWsFn * U_WsFaSFnAc;
let P_FaSWsFnBu = YFaSWsFn * U_WsFaSFnBu;
let P_FaSWsFnLa = YFaSWsFn * U_WsFaSFnLa;
let P_FaSSfnFnAc = YFaSSfn * U_SfnFaSFnAc;
let P_FaSSfnFnBu = YFaSSfn * U_SfnFaSFnBu;
let P_FaSSfnFnLa = YFaSSfn * U_SfnFaSFnLa;
let P_FaSLaFnAcBu = YFaSSfn * U_LaFaSFnAcBu;
let P_FaSWsPoAc = YFaSWsPoAc * U_WsFaSPoAc;
let P_FaSWsPoBu = YFaSWsPoBu * U_WsFaSPoBu;
let P_FaSWsPoLa = YFaSWsPoLa * U_WsFaSPoLa;
let P_FaSFdPoAc = YFaSWsPoAc * U_FdFaSPoAc;
let P_FaSFdPoBu = YFaSWsPoBu * U_FdFaSPoBu;
let P_FaSFdPoLa = YFaSWsPoLa * U_FdFaSPoLa;
let P_FaSSiPoAc = YFaSWsPoAc * U_SiFaSPoAc;
let P_FaSSiPoBu = YFaSWsPoBu * U_SiFaSPoBu;
let P_FaSSiPoLa = YFaSWsPoLa * U_SiFaSPoLa;
let P_FaSSpPoAc = YFaSSpPoAc * U_SpFaSPoAc;
let P_FaSSpPoBu = YFaSSpPoBu * U_SpFaSPoBu;
let P_FaSSpPoLa = YFaSSpPoLa * U_SpFaSPoLa;
let P_FaSLaPoAcBu = YFaSLaPoAcBu * U_LaFaSPoAcBu;
let U_FaSFaSEx = KFlEx * QFaS;
let U_FaSPsBaWsAc = RFaSPsBa * (U_PsBaWsAc/U_Ps)* QFaS;
let U_FaSPsBaWsBu = RFaSPsBa * (U_PsBaWsBu/U_Ps)* QFaS;
let U_FaSPsBaWsAcPr = RFaSPsBa * (U_PsBaWsAcPr/U_Ps)* QFaS;
let U_FaSPsBaWsLa = RFaSPsBa * (U_PsBaWsLa/U_Ps)* QFaS;
let U_FaSPsBaSaAc = RFaSPsBa * (U_PsBaSaAc/U_Ps)* QFaS;
let U_FaSPsBaSaBu = RFaSPsBa * (U_PsBaSaBu/U_Ps)* QFaS;
let U_FaSPsBaSaAcPr = RFaSPsBa * (U_PsBaSaAcPr/U_Ps)* QFaS;
let U_FaSPsBaSaLa = RFaSPsBa * (U_PsBaSaLa/U_Ps)* QFaS;
let U_FaSPsBaLaAcPr = RFaSPsBa * (U_PsBaLaAcPr /U_Ps)* QFaS;
let U_FaSPsBaLaAcBu = RFaSPsBa * (U_PsBaLaAcBu/U_Ps)* QFaS;
let U_FaSAmBaWsAc = RFaSAmBa * (U_AmBaWsAc/U_Am)* QFaS;
let U_FaSAmBaWsBu = RFaSAmBa * (U_AmBaWsBu/U_Am)* QFaS;
let U_FaSAmBaWsAcPr = RFaSAmBa * (U_AmBaWsAcPr/U_Am)* QFaS;
let U_FaSAmBaWsLa = RFaSAmBa * (U_AmBaWsLa/U_Am)* QFaS;
let U_FaSAmBaSaAc = RFaSAmBa * (U_AmBaSaAc/U_Am)* QFaS;
let U_FaSAmBaSaBu = RFaSAmBa * (U_AmBaSaBu/U_Am)* QFaS;
let U_FaSAmBaSaAcPr = RFaSAmBa * (U_AmBaSaAcPr/U_Am)* QFaS;
let U_FaSAmBaSaLa = RFaSAmBa * (U_AmBaSaLa/U_Am)* QFaS;
let U_FaSAmBaLaAcPr = RFaSAmBa * (U_AmBaLaAcPr/U_Am)* QFaS;
let U_FaSAmBaLaAcBu = RFaSAmBa * (U_AmBaLaAcBu/U_Am)* QFaS;
let U_FaSPsBfWsAc = RFaSPsBf * (U_PsBfWsAc/U_Ps)* QFaS;
let U_FaSPsBfWsBu = RFaSPsBf * (U_PsBfWsBu/U_Ps)* QFaS;
let U_FaSPsBfWsAcPr = RFaSPsBf * (U_PsBfWsAcPr/U_Ps)* QFaS;
let U_FaSPsBfSfAc = RFaSPsBf * (U_PsBfSfAc/U_Ps)* QFaS;
let U_FaSPsBfSfBu = RFaSPsBf * (U_PsBfSfBu/U_Ps)* QFaS;
let U_FaSPsBfSfAcPr = RFaSPsBf * (U_PsBfSfAcPr/U_Ps)* QFaS;
let U_FaSAmBfWsAc = RFaSAmBf * (U_AmBfWsAc/U_Am)* QFaS;
let U_FaSAmBfWsBu = RFaSAmBf * (U_AmBfWsBu/U_Am)* QFaS;
let U_FaSAmBfWsAcPr = RFaSAmBf * (U_AmBfWsAcPr/U_Am)* QFaS;
let U_FaSAmBfSfAc = RFaSAmBf * (U_AmBfSfAc/U_Am)* QFaS;
let U_FaSAmBfSfBu = RFaSAmBf * (U_AmBfSfBu/U_Am)* QFaS;
let U_FaSAmBfSfAcPr = RFaSAmBf * (U_AmBfSfAcPr/U_Am)* QFaS;
let U_FaSPsFnWsAc = RFaSPsFn * (U_PsFnWsAc/U_Ps)* QFaS;
let U_FaSPsFnWsBu = RFaSPsFn * (U_PsFnWsBu/U_Ps)* QFaS;
let U_FaSPsFnWsLa = RFaSPsFn * (U_PsFnWsLa/U_Ps)* QFaS;
let U_FaSPsFnSfnAc = RFaSPsFn * (U_PsFnSfnAc/U_Ps)* QFaS;
let U_FaSPsFnSfnBu = RFaSPsFn * (U_PsFnSfnBu/U_Ps)* QFaS;
let U_FaSPsFnSfnLa = RFaSPsFn * (U_PsFnSfnLa/U_Ps)* QFaS;
let U_FaSPsFnLaAcBu = RFaSPsFn * (U_PsFnLaAcBu/U_Ps)* QFaS;
let U_FaSAmFnWsAc = RFaSAmFn * (U_AmFnWsAc/U_Am)* QFaS;
let U_FaSAmFnWsBu = RFaSAmFn * (U_AmFnWsBu/U_Am)* QFaS;
let U_FaSAmFnWsLa = RFaSAmFn * (U_AmFnWsLa/U_Am)* QFaS;
let U_FaSAmFnSfnAc = RFaSAmFn * (U_AmFnSfnAc/U_Am)* QFaS;
let U_FaSAmFnSfnBu = RFaSAmFn * (U_AmFnSfnBu/U_Am)* QFaS;
let U_FaSAmFnSfnLa = RFaSAmFn * (U_AmFnSfnLa/U_Am)* QFaS;
let U_FaSAmFnLaAcBu = RFaSAmFn * (U_AmFnLaAcBu/U_Am)* QFaS;
let U_FaSPiPoWsAc = RFaSPsPo * (U_PiPoWsAc/U_Pi)* QFaS;
let U_FaSPiPoWsBu = RFaSPsPo * (U_PiPoWsBu/U_Pi)* QFaS;
let U_FaSPiPoWsLa = RFaSPsPo * (U_PiPoWsLa/U_Pi)* QFaS;
let U_FaSPiPoFdAc = RFaSPsPo * (U_PiPoFdAc/U_Pi)* QFaS;
let U_FaSPiPoFdBu = RFaSPsPo * (U_PiPoFdBu/U_Pi)* QFaS;
let U_FaSPiPoFdLa = RFaSPsPo * (U_PiPoFdLa/U_Pi)* QFaS;
let U_FaSPiPoSiAc = RFaSPsPo * (U_PiPoSiAc/U_Pi)* QFaS;
let U_FaSPiPoSiBu = RFaSPsPo * (U_PiPoSiBu/U_Pi)* QFaS;
let U_FaSPiPoSiLa = RFaSPsPo * (U_PiPoSiLa/U_Pi)* QFaS;
let U_FaSPiPoSpAc = RFaSPsPo * (U_PiPoSpAc/U_Pi)* QFaS;
let U_FaSPiPoSpBu = RFaSPsPo * (U_PiPoSpBu/U_Pi)* QFaS;
let U_FaSPiPoSpLa = RFaSPsPo * (U_PiPoSpLa/U_Pi)* QFaS;
let U_FaSPiPoLaAcBu = RFaSPsPo * (U_PiPoLaAcBu/U_Pi)* QFaS;
let U_FaSPsPoWsAc = RFaSPsPo * (U_PsPoWsAc/U_Ps)* QFaS;
let U_FaSPsPoWsBu = RFaSPsPo * (U_PsPoWsBu/U_Ps)* QFaS;
let U_FaSPsPoWsLa = RFaSPsPo * (U_PsPoWsLa/U_Ps)* QFaS;
let U_FaSPsPoFdAc = RFaSPsPo * (U_PsPoFdAc/U_Ps)* QFaS;
let U_FaSPsPoFdBu = RFaSPsPo * (U_PsPoFdBu/U_Ps)* QFaS;
let U_FaSPsPoFdLa = RFaSPsPo * (U_PsPoFdLa/U_Ps)* QFaS;
let U_FaSPsPoSiAc = RFaSPsPo * (U_PsPoSiAc/U_Ps)* QFaS;
let U_FaSPsPoSiBu = RFaSPsPo * (U_PsPoSiBu/U_Ps)* QFaS;
let U_FaSPsPoSiLa = RFaSPsPo * (U_PsPoSiLa/U_Ps)* QFaS;
let U_FaSPsPoSpAc = RFaSPsPo * (U_PsPoSpAc/U_Ps)* QFaS;
let U_FaSPsPoSpBu = RFaSPsPo * (U_PsPoSpBu/U_Ps)* QFaS;
let U_FaSPsPoSpLa = RFaSPsPo * (U_PsPoSpLa/U_Ps)* QFaS;
let U_FaSPsPoLaAcBu = RFaSPsPo * (U_PsPoLaAcBu/U_Ps)* QFaS;
let U_FaSBaPoWsAc = RFaSBaPo * (U_BaPoWsAc/U_Ba)* QFaS;
let U_FaSBaPoWsBu = RFaSBaPo * (U_BaPoWsBu/U_Ba)* QFaS;
let U_FaSBaPoWsLa = RFaSBaPo * (U_BaPoWsLa/U_Ba)* QFaS;
let U_FaSBaPoFdAc = RFaSBaPo * (U_BaPoFdAc/U_Ba)* QFaS;
let U_FaSBaPoFdBu = RFaSBaPo * (U_BaPoFdBu /U_Ba)* QFaS;
let U_FaSBaPoFdLa = RFaSBaPo * (U_BaPoFdLa/U_Ba)* QFaS;
let U_FaSBaPoSiAc = RFaSBaPo * (U_BaPoSiAc/U_Ba)* QFaS;
let U_FaSBaPoSiBu = RFaSBaPo * (U_BaPoSiBu/U_Ba)* QFaS;
let U_FaSBaPoSiLa = RFaSBaPo * (U_BaPoSiLa/U_Ba)* QFaS;
let U_FaSBaPoSpAc = RFaSBaPo * (U_BaPoSpAc/U_Ba)* QFaS;
let U_FaSBaPoSpBu = RFaSBaPo * (U_BaPoSpBu/U_Ba)* QFaS;
let U_FaSBaPoSpLa = RFaSBaPo * (U_BaPoSpLa/U_Ba)* QFaS;
let U_FaSBaPoLaAcBu = RFaSBaPo * (U_BaPoLaAcBu/U_Ba)* QFaS;
let U_FaSBfPoWsAc = RFaSBaPo * (U_BfPoWsAc/U_Bf)* QFaS;
let U_FaSBfPoWsBu = RFaSBaPo * (U_BfPoWsBu/U_Bf)* QFaS;
let U_FaSBfPoWsLa = RFaSBaPo * (U_BfPoWsLa/U_Bf)* QFaS;
let U_FaSBfPoFdAc = RFaSBaPo * (U_BfPoFdAc/U_Bf)* QFaS;
let U_FaSBfPoFdBu = RFaSBaPo * (U_BfPoFdBu/U_Bf)* QFaS;
let U_FaSBfPoFdLa = RFaSBaPo * (U_BfPoFdLa/U_Bf)* QFaS;
let U_FaSBfPoSiAc = RFaSBaPo * (U_BfPoSiAc/U_Bf)* QFaS;
let U_FaSBfPoSiBu = RFaSBaPo * (U_BfPoSiBu/U_Bf)* QFaS;
let U_FaSBfPoSiLa = RFaSBaPo * (U_BfPoSiLa/U_Bf)* QFaS;
let U_FaSBfPoSpAc = RFaSBaPo * (U_BfPoSpAc/U_Bf)* QFaS;
let U_FaSBfPoSpBu = RFaSBaPo * (U_BfPoSpBu/U_Bf)* QFaS;
let U_FaSBfPoSpLa = RFaSBaPo * (U_BfPoSpLa/U_Bf)* QFaS;
let U_FaSBfPoLaAcBu = RFaSBaPo * (U_BfPoLaAcBu/U_Bf)* QFaS;
let U_FaSFnPoWsAc = RFaSBaPo * (U_FnPoWsAc/U_Fn)* QFaS;
let U_FaSFnPoWsBu = RFaSBaPo * (U_FnPoWsBu/U_Fn)* QFaS;
let U_FaSFnPoWsLa = RFaSBaPo * (U_FnPoWsLa/U_Fn)* QFaS;
let U_FaSFnPoFdAc = RFaSBaPo * (U_FnPoFdAc/U_Fn)* QFaS;
let U_FaSFnPoFdBu = RFaSBaPo * (U_FnPoFdBu/U_Fn)* QFaS;
let U_FaSFnPoFdLa = RFaSBaPo * (U_FnPoFdLa/U_Fn)* QFaS;
let U_FaSFnPoSiAc = RFaSBaPo * (U_FnPoSiAc/U_Fn)* QFaS;
let U_FaSFnPoSiBu = RFaSBaPo * (U_FnPoSiBu/U_Fn)* QFaS;
let U_FaSFnPoSiLa = RFaSBaPo * (U_FnPoSiLa/U_Fn)* QFaS;
let U_FaSFnPoSpAc = RFaSBaPo * (U_FnPoSpAc/U_Fn)* QFaS;
let U_FaSFnPoSpBu = RFaSBaPo * (U_FnPoSpBu/U_Fn)* QFaS;
let U_FaSFnPoSpLa = RFaSBaPo * (U_FnPoSpLa /U_Fn)* QFaS;
let U_FaSFnPoLaAcBu = RFaSBaPo * (U_FnPoLaAcBu/U_Fn)* QFaS;
let U_FaSPoPoWsAc = RFaSBaPo * (U_PoPoWsAc/U_Po)* QFaS;
let U_FaSPoPoWsBu = RFaSBaPo * (U_PoPoWsBu/U_Po)* QFaS;
let U_FaSPoPoWsLa = RFaSBaPo * (U_PoPoWsLa/U_Po)* QFaS;
let U_FaSPoPoFdAc = RFaSBaPo * (U_PoPoFdAc/U_Po)* QFaS;
let U_FaSPoPoFdBu = RFaSBaPo * (U_PoPoFdBu/U_Po)* QFaS;
let U_FaSPoPoFdLa = RFaSBaPo * (U_PoPoFdLa/U_Po)* QFaS;
let U_FaSPoPoSiAc = RFaSBaPo * (U_PoPoSiAc/U_Po)* QFaS;
let U_FaSPoPoSiBu = RFaSBaPo * (U_PoPoSiBu/U_Po)* QFaS;
let U_FaSPoPoSiLa = RFaSBaPo * (U_PoPoSiLa/U_Po)* QFaS;
let U_FaSPoPoSpAc = RFaSBaPo * (U_PoPoSpAc/U_Po)* QFaS;
let U_FaSPoPoSpBu = RFaSBaPo * (U_PoPoSpBu/U_Po)* QFaS;
let U_FaSPoPoSpLa = RFaSBaPo * (U_PoPoSpLa/U_Po)* QFaS;
let U_FaSPoPoLaAcBu = RFaSBaPo * (U_PoPoLaAcBu/U_Po)* QFaS;
let U_FaS = U_FaSFaSEx + U_FaSPsBaWsAc + U_FaSPsBaWsBu + U_FaSPsBaWsAcPr + U_FaSPsBaWsLa + U_FaSPsBaSaAc + U_FaSPsBaSaBu + U_FaSPsBaSaAcPr + U_FaSPsBaSaLa + U_FaSPsBaLaAcPr + U_FaSPsBaLaAcBu + U_FaSAmBaWsAc + U_FaSAmBaWsBu + U_FaSAmBaWsAcPr + U_FaSAmBaWsLa + U_FaSAmBaSaAc + U_FaSAmBaSaBu + U_FaSAmBaSaAcPr + U_FaSAmBaSaLa + U_FaSAmBaLaAcPr + U_FaSAmBaLaAcBu + U_FaSPsBfWsAc + U_FaSPsBfWsBu + U_FaSPsBfWsAcPr + U_FaSPsBfSfAc + U_FaSPsBfSfBu + U_FaSPsBfSfAcPr + U_FaSAmBfWsAc + U_FaSAmBfWsBu + U_FaSAmBfWsAcPr + U_FaSAmBfSfAc + U_FaSAmBfSfBu + U_FaSAmBfSfAcPr + U_FaSPsFnWsAc + U_FaSPsFnWsBu + U_FaSPsFnWsLa + U_FaSPsFnSfnAc + U_FaSPsFnSfnBu + U_FaSPsFnSfnLa + U_FaSPsFnLaAcBu + U_FaSAmFnWsAc + U_FaSAmFnWsBu + U_FaSAmFnWsLa + U_FaSAmFnSfnAc + U_FaSAmFnSfnBu + U_FaSAmFnSfnLa + U_FaSAmFnLaAcBu + U_FaSPiPoWsAc + U_FaSPiPoWsBu + U_FaSPiPoWsLa + U_FaSPiPoFdAc + U_FaSPiPoFdBu + U_FaSPiPoFdLa + U_FaSPiPoSiAc + U_FaSPiPoSiBu + U_FaSPiPoSiLa + U_FaSPiPoSpAc + U_FaSPiPoSpBu + U_FaSPiPoSpLa + U_FaSPiPoLaAcBu + U_FaSPsPoWsAc + U_FaSPsPoWsBu + U_FaSPsPoWsLa + U_FaSPsPoFdAc + U_FaSPsPoFdBu + U_FaSPsPoFdLa + U_FaSPsPoSiAc + U_FaSPsPoSiBu + U_FaSPsPoSiLa + U_FaSPsPoSpAc + U_FaSPsPoSpBu + U_FaSPsPoSpLa + U_FaSPsPoLaAcBu + U_FaSBaPoWsAc + U_FaSBaPoWsBu + U_FaSBaPoWsLa + U_FaSBaPoFdAc + U_FaSBaPoFdBu + U_FaSBaPoFdLa + U_FaSBaPoSiAc + U_FaSBaPoSiBu + U_FaSBaPoSiLa + U_FaSBaPoSpAc + U_FaSBaPoSpBu + U_FaSBaPoSpLa + U_FaSBaPoLaAcBu + U_FaSBfPoWsAc + U_FaSBfPoWsBu + U_FaSBfPoWsLa + U_FaSBfPoFdAc + U_FaSBfPoFdBu + U_FaSBfPoFdLa + U_FaSBfPoSiAc + U_FaSBfPoSiBu + U_FaSBfPoSiLa + U_FaSBfPoSpAc + U_FaSBfPoSpBu + U_FaSBfPoSpLa + U_FaSBfPoLaAcBu + U_FaSFnPoWsAc + U_FaSFnPoWsBu + U_FaSFnPoWsLa + U_FaSFnPoFdAc + U_FaSFnPoFdBu + U_FaSFnPoFdLa + U_FaSFnPoSiAc + U_FaSFnPoSiBu + U_FaSFnPoSiLa + U_FaSFnPoSpAc + U_FaSFnPoSpBu + U_FaSFnPoSpLa + U_FaSFnPoLaAcBu + U_FaSPoPoWsAc + U_FaSPoPoWsBu + U_FaSPoPoWsLa + U_FaSPoPoFdAc + U_FaSPoPoFdBu + U_FaSPoPoFdLa + U_FaSPoPoSiAc + U_FaSPoPoSiBu + U_FaSPoPoSiLa + U_FaSPoPoSpAc + U_FaSPoPoSpBu + U_FaSPoPoSpLa + U_FaSPoPoLaAcBu;
let P_AcInAc = InAc;
let P_AcPiPoAmAc = YAcWs * YWsPsFerm * U_PiPoAmAc;
let P_AcPsBaAmAc = YAcWs * YWsPsFerm * U_PsBaAmAc;
let P_AcPsBaAmAcPr = YAcPrWs * YWsPsFerm * U_PsBaAmAcPr;
let P_AcPsBfAmAc = YAcWs * YWsPsFerm * U_PsBfAmAc;
let P_AcPsBfAmAcPr = YAcPrWs * YWsPsFerm * U_PsBfAmAcPr;
let P_AcPsFnAmAc = YAcWs * YWsPsFerm * U_PsFnAmAc;
let P_AcPsPoAmAc = YAcWs * YWsPsFerm * U_PsPoAmAc;
let P_AcBaPoAmAc = YAcWs * YWsPsFerm * YPsBaDe * U_BaPoAmAc;
let P_AcBfPoAmAc = YAcWs * YWsPsFerm * YPsBfDe * U_BfPoAmAc;
let P_AcFnPoAmAc = YAcWs * YWsPsFerm * YPsFnDe * U_FnPoAmAc;
let P_AcPoPoAmAc = YAcWs * YWsPsFerm * YPsPoDe * U_PoPoAmAc;
let P_AcWsPsBaAc = YAcWs * U_WsPsBaAc;
let P_AcWsPsBaAcPr = YAcPrWs * U_WsPsBaAcPr;
let P_AcWsAmBaAc = YAcWs * U_WsAmBaAc;
let P_AcWsAmBaAcPr = YAcPrWs * U_WsAmBaAcPr;
let P_AcWsNgBaAc = YAcWs * U_WsNgBaAc;
let P_AcWsNgBaAcPr = YAcPrWs * U_WsNgBaAcPr;
let P_AcWsSaBaAc = YAcWs * U_WsSaBaAc;
let P_AcWsSaBaAcPr = YAcPrWs * U_WsSaBaAcPr;
let P_AcWsFaUBaAc = YAcWs * U_WsFaUBaAc;
let P_AcWsFaUBaAcPr = YAcPrWs * U_WsFaUBaAcPr;
let P_AcWsFaSBaAc = YAcWs * U_WsFaSBaAc;
let P_AcWsFaSBaAcPr = YAcPrWs * U_WsFaSBaAcPr;
let P_AcWsPsBfAc = YAcWs * U_WsPsBfAc;
let P_AcWsPsBfAcPr = YAcPrWs * U_WsPsBfAcPr;
let P_AcWsAmBfAc = YAcWs * U_WsAmBfAc;
let P_AcWsAmBfAcPr = YAcPrWs * U_WsAmBfAcPr;
let P_AcWsNgBfAc = YAcWs * U_WsNgBfAc;
let P_AcWsNgBfAcPr = YAcPrWs * U_WsNgBfAcPr;
let P_AcWsSfBfAc = YAcWs * U_WsSfBfAc;
let P_AcWsSfBfAcPr = YAcPrWs * U_WsSfBfAcPr;
let P_AcWsFaUBfAc = YAcWs * U_WsFaUBfAc;
let P_AcWsFaUBfAcPr = YAcPrWs * U_WsFaUBfAcPr;
let P_AcWsFaSBfAc = YAcWs * U_WsFaSBfAc;
let P_AcWsFaSBfAcPr = YAcPrWs * U_WsFaSBfAcPr;
let P_AcWsPsFnAc = YAcWs * U_WsPsFnAc;
let P_AcWsAmFnAc = YAcWs * U_WsAmFnAc;
let P_AcWsNgFnAc = YAcWs * U_WsNgFnAc;
let P_AcWsSfnFnAc = YAcWs * U_WsSfnFnAc;
let P_AcWsFaUFnAc = YAcWs * U_WsFaUFnAc;
let P_AcWsFaSFnAc = YAcWs * U_WsFaSFnAc;
let P_AcWsPiPoAc = YAcWs * U_WsPiPoAc;
let P_AcWsPsPoAc = YAcWs * U_WsPsPoAc;
let P_AcWsBaPoAc = YAcWs * U_WsBaPoAc;
let P_AcWsBfPoAc = YAcWs * U_WsBfPoAc;
let P_AcWsFnPoAc = YAcWs * U_WsFnPoAc;
let P_AcWsPoPoAc = YAcWs * U_WsPoPoAc;
let P_AcWsNgPoAc = YAcWs * U_WsNgPoAc;
let P_AcWsSpPoAc = YAcWs * U_WsSpPoAc;
let P_AcWsFaUPoAc = YAcWs * U_WsFaUPoAc;
let P_AcWsFaSPoAc = YAcWs * U_WsFaSPoAc;
let P_AcFdPiPoAc = YAcWs * U_FdPiPoAc;
let P_AcFdPsPoAc = YAcWs * U_FdPsPoAc;
let P_AcFdBaPoAc = YAcWs * U_FdBaPoAc;
let P_AcFdBfPoAc = YAcWs * U_FdBfPoAc;
let P_AcFdFnPoAc = YAcWs * U_FdFnPoAc;
let P_AcFdPoPoAc = YAcWs * U_FdPoPoAc;
let P_AcFdNgPoAc = YAcWs * U_FdNgPoAc;
let P_AcFdSpPoAc = YAcWs * U_FdSpPoAc;
let P_AcFdFaUPoAc = YAcWs * U_FdFaUPoAc;
let P_AcFdFaSPoAc = YAcWs * U_FdFaSPoAc;
let P_AcSiPiPoAc = YAcWs * U_SiPiPoAc;
let P_AcSiPsPoAc = YAcWs * U_SiPsPoAc;
let P_AcSiBaPoAc = YAcWs * U_SiBaPoAc;
let P_AcSiBfPoAc = YAcWs * U_SiBfPoAc;
let P_AcSiFnPoAc = YAcWs * U_SiFnPoAc;
let P_AcSiPoPoAc = YAcWs * U_SiPoPoAc;
let P_AcSiNgPoAc = YAcWs * U_SiNgPoAc;
let P_AcSiSpPoAc = YAcWs * U_SiSpPoAc;
let P_AcSiFaUPoAc = YAcWs * U_SiFaUPoAc;
let P_AcSiFaSPoAc = YAcWs * U_SiFaSPoAc;
let P_AcSaPsBaAc = YAcSaPsBaAc * U_SaPsBaAc;
let P_AcSaPsBaAcPr = YAcSaPsBaAcPr * U_SaPsBaAcPr;
let P_AcSaAmBaAc = YAcSaPsBaAc * U_SaAmBaAc;
let P_AcSaAmBaAcPr = YAcSaPsBaAcPr * U_SaAmBaAcPr;
let P_AcSaNgBaAc = YAcSaPsBaAc * U_SaNgBaAc;
let P_AcSaNgBaAcPr = YAcSaPsBaAcPr * U_SaNgBaAcPr;
let P_AcSaFaUBaAc = YAcSaPsBaAc * U_SaFaUBaAc;
let P_AcSaFaUBaAcPr = YAcSaPsBaAcPr * U_SaFaUBaAcPr;
let P_AcSaFaSBaAc = YAcSaPsBaAc * U_SaFaSBaAc;
let P_AcSaFaSBaAcPr = YAcSaPsBaAcPr * U_SaFaSBaAcPr;
let P_AcSfPsBfAc = YAcSfPsBfAc * U_SfPsBfAc;
let P_AcSfPsBfAcPr = YAcSfPsBfAcPr * U_SfPsBfAcPr;
let P_AcSfAmBfAc = YAcSfPsBfAc * U_SfAmBfAc;
let P_AcSfAmBfAcPr = YAcSfPsBfAcPr * U_SfAmBfAcPr;
let P_AcSfNgBfAc = YAcSfPsBfAc * U_SfNgBfAc;
let P_AcSfNgBfAcPr = YAcSfPsBfAcPr * U_SfNgBfAcPr;
let P_AcSfFaUBfAc = YAcSfPsBfAc * U_SfFaUBfAc;
let P_AcSfFaUBfAcPr = YAcSfPsBfAcPr * U_SfFaUBfAcPr;
let P_AcSfFaSBfAc = YAcSfPsBfAc * U_SfFaSBfAc;
let P_AcSfFaSBfAcPr = YAcSfPsBfAcPr * U_SfFaSBfAcPr;
let P_AcSfnPsFnAc = YAcSfn * U_SfnPsFnAc;
let P_AcSfnAmFnAc = YAcSfn * U_SfnAmFnAc;
let P_AcSfnNgFnAc = YAcSfn * U_SfnNgFnAc;
let P_AcSfnFaUFnAc = YAcSfn * U_SfnFaUFnAc;
let P_AcSfnFaSFnAc = YAcSfn * U_SfnFaSFnAc;
let P_AcSpPiPoAc = YAcSpPiPoAc * U_SpPiPoAc;
let P_AcSpPsPoAc = YAcSpPiPoAc * U_SpPsPoAc;
let P_AcSpBaPoAc = YAcSpPiPoAc * U_SpBaPoAc;
let P_AcSpBfPoAc = YAcSpPiPoAc * U_SpBfPoAc;
let P_AcSpFnPoAc = YAcSpPiPoAc * U_SpFnPoAc;
let P_AcSpPoPoAc = YAcSpPiPoAc * U_SpPoPoAc;
let P_AcSpNgPoAc = YAcSpPiPoAc * U_SpNgPoAc;
let P_AcSpFaUPoAc = YAcSpPiPoAc * U_SpFaUPoAc;
let P_AcSpFaSPoAc = YAcSpPiPoAc * U_SpFaSPoAc;
let P_AcLaPsBaAcPr = YAcLa * U_LaPsBaAcPr;
let P_AcLaAmBaAcPr = YAcLa * U_LaAmBaAcPr;
let P_AcLaNgBaAcPr = YAcLa * U_LaNgBaAcPr;
let P_AcLaSaBaAcPr = YAcLa * U_LaSaBaAcPr;
let P_AcLaFaUBaAcPr = YAcLa * U_LaFaUBaAcPr;
let P_AcLaFaSBaAcPr = YAcLa * U_LaFaSBaAcPr;
let U_AcAcEx = KFlEx * QAc;
let U_AcAcAb = VmaxAcAcAb * Math.pow(V,0.75)/ (1+ MAcAcAb/CAc);
let U_AcAcetate = KdAc/(1 + MAcAcAb/CAc + CHplus/J_Hplus_AcAcetate);
let U_AcPsBaLaBu = RAcLaBu * (U_LaPsBaAcBu/U_La) * QAc;
let U_AcAmBaLaBu = RAcLaBu * (U_LaAmBaAcBu/U_La) * QAc;
let U_AcNgBaLaBu = RAcLaBu * (U_LaNgBaAcBu/U_La) * QAc;
let U_AcSaBaLaBu = RAcLaBu * (U_LaSaBaAcBu/U_La) * QAc;
let U_AcFaUBaLaBu = RAcLaBu * (U_LaFaUBaAcBu/U_La) * QAc;
let U_AcFaSBaLaBu = RAcLaBu * (U_LaFaSBaAcBu/U_La) * QAc;
let U_AcPsFnLaBu = RAcLaBu * (U_LaPsFnAcBu/U_La) * QAc;
let U_AcAmFnLaBu = RAcLaBu * (U_LaAmFnAcBu/U_La) * QAc;
let U_AcNgFnLaBu = RAcLaBu * (U_LaNgFnAcBu/U_La) * QAc;
let U_AcSfnFnLaBu = RAcLaBu * (U_LaSfnFnAcBu/U_La) * QAc;
let U_AcFaUFnLaBu = RAcLaBu * (U_LaFaUFnAcBu/U_La) * QAc;
let U_AcFaSFnLaBu = RAcLaBu * (U_LaFaSFnAcBu/U_La) * QAc;
let U_AcPiPoLaBu = RAcLaBu * (U_LaPiPoAcBu/U_La) * QAc;
let U_AcPsPoLaBu = RAcLaBu * (U_LaPsPoAcBu/U_La) * QAc;
let U_AcBaPoLaBu = RAcLaBu * (U_LaBaPoAcBu/U_La) * QAc;
let U_AcBfPoLaBu = RAcLaBu * (U_LaBfPoAcBu/U_La) * QAc;
let U_AcFnPoLaBu = RAcLaBu * (U_LaFnPoAcBu/U_La) * QAc;
let U_AcPoPoLaBu = RAcLaBu * (U_LaPoPoAcBu/U_La) * QAc;
let U_AcNgPoLaBu = RAcLaBu * (U_LaNgPoAcBu/U_La) * QAc;
let U_AcSpPoLaBu = RAcLaBu * (U_LaSpPoAcBu/U_La) * QAc;
let U_AcFaUPoLaBu = RAcLaBu * (U_LaFaUPoAcBu/U_La) * QAc;
  
let U_AcPoFaSLaBu = RAcLaBu * (U_LaFaSPoAcBu/U_La) * QAc;
let dQAcdt = P_AcInAc + P_AcPiPoAmAc + P_AcPsBaAmAc + P_AcPsBaAmAcPr + P_AcPsBfAmAc + P_AcPsBfAmAcPr + P_AcPsFnAmAc + P_AcPsPoAmAc + P_AcBaPoAmAc + P_AcBfPoAmAc + P_AcFnPoAmAc + P_AcPoPoAmAc + P_AcWsPsBaAc + P_AcWsPsBaAcPr + P_AcWsAmBaAc + P_AcWsAmBaAcPr + P_AcWsNgBaAc + P_AcWsNgBaAcPr + P_AcWsSaBaAc + P_AcWsSaBaAcPr + P_AcWsFaUBaAc + P_AcWsFaUBaAcPr + P_AcWsFaSBaAc + P_AcWsFaSBaAcPr + P_AcWsPsBfAc + P_AcWsPsBfAcPr + P_AcWsAmBfAc + P_AcWsAmBfAcPr + P_AcWsNgBfAc + P_AcWsNgBfAcPr + P_AcWsSfBfAc + P_AcWsSfBfAcPr + P_AcWsFaUBfAc + P_AcWsFaUBfAcPr + P_AcWsFaSBfAc + P_AcWsFaSBfAcPr + P_AcWsPsFnAc + P_AcWsAmFnAc + P_AcWsNgFnAc + P_AcWsSfnFnAc + P_AcWsFaUFnAc + P_AcWsFaSFnAc + P_AcWsPiPoAc + P_AcWsPsPoAc + P_AcWsBaPoAc + P_AcWsBfPoAc + P_AcWsFnPoAc + P_AcWsPoPoAc + P_AcWsNgPoAc + P_AcWsSpPoAc + P_AcWsFaUPoAc + P_AcWsFaSPoAc + P_AcFdPiPoAc + P_AcFdPsPoAc + P_AcFdBaPoAc + P_AcFdBfPoAc + P_AcFdFnPoAc + P_AcFdPoPoAc + P_AcFdNgPoAc + P_AcFdSpPoAc + P_AcFdFaUPoAc + P_AcFdFaSPoAc + P_AcSiPiPoAc + P_AcSiPsPoAc + P_AcSiBaPoAc + P_AcSiBfPoAc + P_AcSiFnPoAc + P_AcSiPoPoAc + P_AcSiNgPoAc + P_AcSiSpPoAc + P_AcSiFaUPoAc + P_AcSiFaSPoAc + P_AcSaPsBaAc + P_AcSaPsBaAcPr + P_AcSaAmBaAc + P_AcSaAmBaAcPr + P_AcSaNgBaAc + P_AcSaNgBaAcPr + P_AcSaFaUBaAc + P_AcSaFaUBaAcPr + P_AcSaFaSBaAc + P_AcSaFaSBaAcPr + P_AcSfPsBfAc + P_AcSfPsBfAcPr + P_AcSfAmBfAc + P_AcSfAmBfAcPr + P_AcSfNgBfAc + P_AcSfNgBfAcPr + P_AcSfFaUBfAc + P_AcSfFaUBfAcPr + P_AcSfFaSBfAc + P_AcSfFaSBfAcPr + P_AcSfnPsFnAc + P_AcSfnAmFnAc + P_AcSfnNgFnAc + P_AcSfnFaUFnAc + P_AcSfnFaSFnAc + P_AcSpPiPoAc + P_AcSpPsPoAc + P_AcSpBaPoAc + P_AcSpBfPoAc + P_AcSpFnPoAc + P_AcSpPoPoAc + P_AcSpNgPoAc + P_AcSpFaUPoAc + P_AcSpFaSPoAc + P_AcLaPsBaAcPr + P_AcLaAmBaAcPr + P_AcLaNgBaAcPr + P_AcLaSaBaAcPr + P_AcLaFaUBaAcPr + P_AcLaFaSBaAcPr - U_AcAcEx - U_AcAcAb - U_AcAcetate - U_AcPsBaLaBu - U_AcAmBaLaBu - U_AcNgBaLaBu - U_AcSaBaLaBu - U_AcFaUBaLaBu - U_AcFaSBaLaBu - U_AcPsFnLaBu - U_AcAmFnLaBu - U_AcNgFnLaBu - U_AcSfnFnLaBu - U_AcFaUFnLaBu - U_AcFaSFnLaBu - U_AcPiPoLaBu - U_AcPsPoLaBu - U_AcBaPoLaBu - U_AcBfPoLaBu - U_AcFnPoLaBu - U_AcPoPoLaBu - U_AcNgPoLaBu - U_AcSpPoLaBu - U_AcFaUPoLaBu - U_AcPoFaSLaBu;
let P_AcetateAc = U_AcAcetate;
let U_AcetateAcetateEx = KFlExAc * QAcetate;
let U_AcetateAcetateAb = VmaxAcetateAcetateAb * Math.pow(V,0.75)/ (1+ MAcetateAcetateAb/CAcetate);
let dQAcetatedt = U_AcAcetate - U_AcetateAcetateEx - U_AcetateAcetateAb;
let P_BuInBu = InBu;
let P_BuPiPoAmBu = YBuWs * YWsPsFerm * U_PiPoAmBu;
let P_BuPsBaAmBu = YBuWs * YWsPsFerm * U_PsBaAmBu;
let P_BuPsBfAmBu = YBuWs * YWsPsFerm * U_PsBfAmBu;
let P_BuPsFnAmBu = YBuWs * YWsPsFerm * U_PsFnAmBu;
let P_BuPsPoAmBu = YBuWs * YWsPsFerm * U_PsPoAmBu;
let P_BuBaPoAmBu = YBuWs * YWsPsFerm * YPsBaDe * U_BaPoAmBu;
let P_BuBfPoAmBu = YBuWs * YWsPsFerm * YPsBfDe * U_BfPoAmBu;
let P_BuFnPoAmBu = YBuWs * YWsPsFerm * YPsFnDe * U_FnPoAmBu;
let P_BuPoPoAmBu = YBuWs * YWsPsFerm * YPsPoDe * U_PoPoAmBu;
let P_BuWsPsBaBu = YBuWs * U_WsPsBaBu;
let P_BuWsAmBaBu = YBuWs * U_WsAmBaBu;
let P_BuWsNgBaBu = YBuWs * U_WsNgBaBu;
let P_BuWsSaBaBu = YBuWs * U_WsSaBaBu;
let P_BuWsFaUBaBu = YBuWs * U_WsFaUBaBu;
let P_BuWsFaSBaBu = YBuWs * U_WsFaSBaBu;
let P_BuWsPsBfBu = YBuWs * U_WsPsBfBu;
let P_BuWsAmBfBu = YBuWs * U_WsAmBfBu;
let P_BuWsNgBfBu = YBuWs * U_WsNgBfBu;
let P_BuWsSfBfBu = YBuWs * U_WsSfBfBu;
let P_BuWsFaUBfBu = YBuWs * U_WsFaUBfBu;
let P_BuWsFaSBfBu = YBuWs * U_WsFaSBfBu;
let P_BuWsPsFnBu = YBuWs * U_WsPsFnBu;
let P_BuWsAmFnBu = YBuWs * U_WsAmFnBu;
let P_BuWsNgFnBu = YBuWs * U_WsNgFnBu;
let P_BuWsSfnFnBu = YBuWs * U_WsSfnFnBu;
let P_BuWsFaUFnBu = YBuWs * U_WsFaUFnBu;
let P_BuWsFaSFnBu = YBuWs * U_WsFaSFnBu;
let P_BuWsPiPoBu = YBuWs * U_WsPiPoBu;
let P_BuWsPsPoBu = YBuWs * U_WsPsPoBu;
let P_BuWsBaPoBu = YBuWs * U_WsBaPoBu;
let P_BuWsBfPoBu = YBuWs * U_WsBfPoBu;
let P_BuWsFnPoBu = YBuWs * U_WsFnPoBu;
let P_BuWsPoPoBu = YBuWs * U_WsPoPoBu;
let P_BuWsNgPoBu = YBuWs * U_WsNgPoBu;
let P_BuWsSpPoBu = YBuWs * U_WsSpPoBu;
let P_BuWsFaUPoBu = YBuWs * U_WsFaUPoBu;
let P_BuWsFaSPoBu = YBuWs * U_WsFaSPoBu;
let P_BuFdPiPoBu = YBuWs * U_FdPiPoBu;
let P_BuFdPsPoBu = YBuWs * U_FdPsPoBu;
let P_BuFdBaPoBu = YBuWs * U_FdBaPoBu;
let P_BuFdBfPoBu = YBuWs * U_FdBfPoBu;
let P_BuFdFnPoBu = YBuWs * U_FdFnPoBu;
let P_BuFdPoPoBu = YBuWs * U_FdPoPoBu;
let P_BuFdNgPoBu = YBuWs * U_FdNgPoBu;
let P_BuFdSpPoBu = YBuWs * U_FdSpPoBu;
let P_BuFdFaUPoBu = YBuWs * U_FdFaUPoBu;
let P_BuFdFaSPoBu = YBuWs * U_FdFaSPoBu;
let P_BuSiPiPoBu = YBuWs * U_SiPiPoBu;
let P_BuSiPsPoBu = YBuWs * U_SiPsPoBu;
let P_BuSiBaPoBu = YBuWs * U_SiBaPoBu;
let P_BuSiBfPoBu = YBuWs * U_SiBfPoBu;
let P_BuSiFnPoBu = YBuWs * U_SiFnPoBu;
let P_BuSiPoPoBu = YBuWs * U_SiPoPoBu;
let P_BuSiNgPoBu = YBuWs * U_SiNgPoBu;
let P_BuSiSpPoBu = YBuWs * U_SiSpPoBu;
let P_BuSiFaUPoBu = YBuWs * U_SiFaUPoBu;
let P_BuSiFaSPoBu = YBuWs * U_SiFaSPoBu;
let P_BuSaPsBaBu = YBuSaPsBaBu * U_SaPsBaBu;
let P_BuSaAmBaBu = YBuSaPsBaBu * U_SaAmBaBu;
let P_BuSaNgBaBu = YBuSaPsBaBu * U_SaNgBaBu;
let P_BuSaFaUBaBu = YBuSaPsBaBu * U_SaFaUBaBu;
let P_BuSaFaSBaBu = YBuSaPsBaBu * U_SaFaSBaBu;
let P_BuSfPsBfBu = YBuSfPsBfBu * U_SfPsBfBu;
let P_BuSfAmBfBu = YBuSfPsBfBu * U_SfAmBfBu;
let P_BuSfNgBfBu = YBuSfPsBfBu * U_SfNgBfBu;
let P_BuSfFaUBfBu = YBuSfPsBfBu * U_SfFaUBfBu;
let P_BuSfFaSBfBu = YBuSfPsBfBu * U_SfFaSBfBu;
let P_BuSfnPsFnBu = YBuSfPsBfBu * U_SfnPsFnBu;
let P_BuSfnAmFnBu = YBuSfnPsFnBu * U_SfnAmFnBu;
let P_BuSfnNgFnBu = YBuSfnPsFnBu * U_SfnNgFnBu;
let P_BuSfnFaUFnBu = YBuSfnPsFnBu * U_SfnFaUFnBu;
let P_BuSfnFaSFnBu = YBuSfnPsFnBu * U_SfnFaSFnBu;
let P_BuSpPiPoBu = YBuSpPsBaPo * U_SpPiPoBu;
let P_BuSpPsPoBu = YBuSpPsBaPo * U_SpPsPoBu;
let P_BuSpBaPoBu = YBuSpPsBaPo * U_SpBaPoBu;
let P_BuSpBfPoBu = YBuSpPsBaPo * U_SpBfPoBu;
let P_BuSpFnPoBu = YBuSpPsBaPo * U_SpFnPoBu;
let P_BuSpPoPoBu = YBuSpPsBaPo * U_SpPoPoBu;
let P_BuSpNgPoBu = YBuSpPsBaPo * U_SpNgPoBu;
let P_BuSpFaUPoBu = YBuSpPsBaPo * U_SpFaUPoBu;
let P_BuSpFaSPoBu = YBuSpPsBaPo * U_SpFaSPoBu;
let P_BuLaPsBaAcBu = YBuLa * U_LaPsBaAcBu;
let P_BuLaAmBaAcBu = YBuLa * U_LaAmBaAcBu;
let P_BuLaNgBaAcBu = YBuLa * U_LaNgBaAcBu;
let P_BuLaSaBaAcBu = YBuLa * U_LaSaBaAcBu;
let P_BuLaFaUBaAcBu = YBuLa * U_LaFaUBaAcBu;
let P_BuLaFaSBaAcBu = YBuLa * U_LaFaSBaAcBu;
let P_BuLaPsFnAcBu = YBuLa * U_LaPsFnAcBu;
let P_BuLaAmFnAcBu = YBuLa * U_LaAmFnAcBu;
let P_BuLaNgFnAcBu = YBuLa * U_LaNgFnAcBu;
let P_BuLaSfnFnAcBu = YBuLa * U_LaSfnFnAcBu;
let P_BuLaFaUFnAcBu = YBuLa * U_LaFaUFnAcBu;
let P_BuLaFaSFnAcBu = YBuLa * U_LaFaSFnAcBu;
let P_BuLaPiPoAcBu = YBuLa * U_LaPiPoAcBu;
let P_BuLaPsPoAcBu = YBuLa * U_LaPsPoAcBu;
let P_BuLaNgPoAcBu = YBuLa * U_LaNgPoAcBu;
let P_BuLaSpPoAcBu = YBuLa * U_LaSpPoAcBu;
let P_BuLaFaUPoAcBu = YBuLa * U_LaFaUPoAcBu;
let P_BuLaFaSPoAcBu = YBuLa * U_LaFaSPoAcBu;
let P_BuLaBaPoAcBu = YBuLa * U_LaBaPoAcBu;
let P_BuLaBfPoAcBu = YBuLa * U_LaBfPoAcBu;
let P_BuLaFnPoAcBu = YBuLa * U_LaFnPoAcBu;
let P_BuLaPoPoAcBu = YBuLa * U_LaPoPoAcBu;
let U_BuBuEx = KFlEx * QBu;
let U_BuBuAb = VmaxBuBuAb * Math.pow(V,0.75)/ (1+ MBuBuAb/CBu);
let U_BuButyrate = KdBu /(1 + MBuBuAb/CBu + CHplus/J_Hplus_BuButyrate);
let dQBudt = P_BuInBu + P_BuPiPoAmBu + P_BuPsBaAmBu + P_BuPsBfAmBu + P_BuPsFnAmBu + P_BuPsPoAmBu + P_BuBaPoAmBu + P_BuBfPoAmBu + P_BuFnPoAmBu + P_BuPoPoAmBu + P_BuWsPsBaBu + P_BuWsAmBaBu + P_BuWsNgBaBu + P_BuWsSaBaBu + P_BuWsFaUBaBu + P_BuWsFaSBaBu + P_BuWsPsBfBu + P_BuWsAmBfBu + P_BuWsNgBfBu + P_BuWsSfBfBu + P_BuWsFaUBfBu + P_BuWsFaSBfBu + P_BuWsPsFnBu + P_BuWsAmFnBu + P_BuWsNgFnBu + P_BuWsSfnFnBu + P_BuWsFaUFnBu + P_BuWsFaSFnBu + P_BuWsPiPoBu + P_BuWsPsPoBu + P_BuWsBaPoBu + P_BuWsBfPoBu + P_BuWsFnPoBu + P_BuWsPoPoBu + P_BuWsNgPoBu + P_BuWsSpPoBu + P_BuWsFaUPoBu + P_BuWsFaSPoBu + P_BuFdPiPoBu + P_BuFdPsPoBu + P_BuFdBaPoBu + P_BuFdBfPoBu + P_BuFdFnPoBu + P_BuFdPoPoBu + P_BuFdNgPoBu + P_BuFdSpPoBu + P_BuFdFaUPoBu + P_BuFdFaSPoBu + P_BuSiPiPoBu + P_BuSiPsPoBu + P_BuSiBaPoBu + P_BuSiBfPoBu + P_BuSiFnPoBu + P_BuSiPoPoBu + P_BuSiNgPoBu + P_BuSiSpPoBu + P_BuSiFaUPoBu + P_BuSiFaSPoBu + P_BuSaPsBaBu + P_BuSaAmBaBu + P_BuSaNgBaBu + P_BuSaFaUBaBu + P_BuSaFaSBaBu + P_BuSfPsBfBu + P_BuSfAmBfBu + P_BuSfNgBfBu + P_BuSfFaUBfBu + P_BuSfFaSBfBu + P_BuSfnPsFnBu + P_BuSfnAmFnBu + P_BuSfnNgFnBu + P_BuSfnFaUFnBu + P_BuSfnFaSFnBu + P_BuSpPiPoBu + P_BuSpPsPoBu + P_BuSpBaPoBu + P_BuSpBfPoBu + P_BuSpFnPoBu + P_BuSpPoPoBu + P_BuSpNgPoBu + P_BuSpFaUPoBu + P_BuSpFaSPoBu + P_BuLaPsBaAcBu + P_BuLaAmBaAcBu + P_BuLaNgBaAcBu + P_BuLaSaBaAcBu + P_BuLaFaUBaAcBu + P_BuLaFaSBaAcBu + P_BuLaPsFnAcBu + P_BuLaAmFnAcBu + P_BuLaNgFnAcBu + P_BuLaSfnFnAcBu + P_BuLaFaUFnAcBu + P_BuLaFaSFnAcBu + P_BuLaPiPoAcBu + P_BuLaPsPoAcBu + P_BuLaNgPoAcBu + P_BuLaSpPoAcBu + P_BuLaFaUPoAcBu + P_BuLaFaSPoAcBu + P_BuLaBaPoAcBu + P_BuLaBfPoAcBu + P_BuLaFnPoAcBu + P_BuLaPoPoAcBu - U_BuBuEx - U_BuBuAb - U_BuButyrate;
let P_ButyrateBu = U_BuButyrate;
let U_ButyrateButyrateEx = KFlExBu * QButyrate;
let U_ButyrateButyrateAb = VmaxButyrateButyrateAb * Math.pow(V,0.75)/ (1+ MButyrateButyrateAb/CButyrate);
let dQButyratedt = P_ButyrateBu - U_ButyrateButyrateEx - U_ButyrateButyrateAb;
let P_PrInPr = InPr;
let P_PrPsBaAmAcPr = YPrWs * YWsPsFerm * U_PsBaAmAcPr;
let P_PrPsBfAmAcPr = YPrWs *  YWsPsFerm * U_PsBfAmAcPr;
let P_PrWsPsBaAcPr = YPrWs * U_WsPsBaAcPr;
let P_PrWsAmBaAcPr = YPrWs * U_WsAmBaAcPr;
let P_PrWsNgBaAcPr = YPrWs * U_WsNgBaAcPr;
let P_PrWsSaBaAcPr = YPrWs * U_WsSaBaAcPr;
let P_PrWsFaUBaAcPr = YPrWs * U_WsFaUBaAcPr;
let P_PrWsFaSBaAcPr = YPrWs * U_WsFaSBaAcPr;
let P_PrWsPsBfAcPr = YPrWs * U_WsPsBfAcPr;
let P_PrWsAmBfAcPr = YPrWs * U_WsAmBfAcPr;
let P_PrWsNgBfAcPr = YPrWs * U_WsNgBfAcPr;
let P_PrWsSfBfAcPr = YPrWs * U_WsSfBfAcPr;
let P_PrWsFaUBfAcPr = YPrWs * U_WsFaUBfAcPr;
let P_PrWsFaSBfAcPr = YPrWs * U_WsFaSBfAcPr;
let P_PrSaPsBaAcPr = YPrSaPsBaAcPr * U_SaPsBaAcPr;
let P_PrSaAmBaAcPr = YPrSaPsBaAcPr * U_SaAmBaAcPr;
let P_PrSaNgBaAcPr = YPrSaPsBaAcPr * U_SaNgBaAcPr;
let P_PrSaFaUBaAcPr = YPrSaPsBaAcPr * U_SaFaUBaAcPr;
let P_PrSaFaSBaAcPr = YPrSaPsBaAcPr * U_SaFaSBaAcPr;
let P_PrSfPsBfAcPr = YPrSfPsBfAcPr * U_SfPsBfAcPr;
let P_PrSfAmBfAcPr = YPrSfPsBfAcPr * U_SfAmBfAcPr;
let P_PrSfNgBfAcPr = YPrSfPsBfAcPr * U_SfNgBfAcPr;
let P_PrSfFaUBfAcPr = YPrSfPsBfAcPr * U_SfFaUBfAcPr;
let P_PrSfFaSBfAcPr = YPrSfPsBfAcPr * U_SfFaSBfAcPr;
let P_PrLaPsBaAcPr = YPrLa * U_LaPsBaAcPr;
let P_PrLaAmBaAcPr = YPrLa * U_LaAmBaAcPr;
let P_PrLaNgBaAcPr = YPrLa * U_LaNgBaAcPr;
let P_PrLaSaBaAcPr = YPrLa * U_LaSaBaAcPr;
let P_PrLaFaUBaAcPr = YPrLa * U_LaFaUBaAcPr;
let P_PrLaFaSBaAcPr = YPrLa * U_LaFaSBaAcPr;
let U_PrPrEx = KFlEx * QPr;
let U_PrPrAb = VmaxPrPrAb * Math.pow(V,0.75)/ (1+ MPrPrAb/CPr);
let U_PrPropionate = KdPr/(1 + MPrPrAb/CPr + CHplus/J_Hplus_PrPropionate);
let dQPrdt = P_PrInPr + P_PrPsBaAmAcPr + P_PrPsBfAmAcPr + P_PrWsPsBaAcPr + P_PrWsAmBaAcPr + P_PrWsNgBaAcPr + P_PrWsSaBaAcPr + P_PrWsFaUBaAcPr + P_PrWsFaSBaAcPr + P_PrWsPsBfAcPr + P_PrWsAmBfAcPr + P_PrWsNgBfAcPr + P_PrWsSfBfAcPr + P_PrWsFaUBfAcPr + P_PrWsFaSBfAcPr + P_PrSaPsBaAcPr + P_PrSaAmBaAcPr + P_PrSaNgBaAcPr + P_PrSaFaUBaAcPr + P_PrSaFaSBaAcPr + P_PrSfPsBfAcPr + P_PrSfAmBfAcPr + P_PrSfNgBfAcPr + P_PrSfFaUBfAcPr + P_PrSfFaSBfAcPr + P_PrLaPsBaAcPr + P_PrLaAmBaAcPr + P_PrLaNgBaAcPr + P_PrLaSaBaAcPr + P_PrLaFaUBaAcPr + P_PrLaFaSBaAcPr - U_PrPrEx - U_PrPrAb - U_PrPropionate;
let P_PropionatePr = U_PrPropionate;
let U_PropionatePropionateEx = KFlExPr * QPropionate;
let U_PropionatePropionateAb = VmaxPropionatePropionateAb * Math.pow(V,0.75)/ (1+ MPropionatePropionateAb/CPropionate);
let dQPropionatedt = P_PropionatePr - U_PropionatePropionateEx - U_PropionatePropionateAb;
let P_BrInBr = InBr;
let U_BrBrAb = KBrBrAb * QBr;
let U_BrBrEx = KFlEx * QBr;
let dQBrdt = P_BrInBr - U_BrBrAb - U_BrBrEx;
let P_NOPInNOP = InNOP;
let U_NOPNOPAb = KNOPNOPAb * QNOP;
let U_NOPNOPEx = KFlEx * QNOP;
let U_NOP_NOP_NO3 = KNOP_NO3 * QMe * QNOP;
let U_NOP_NOP_NO2 = KNOP_NO2 * QMe * QNOP;
let dQNOPdt = P_NOPInNOP - U_NOPNOPAb - U_NOPNOPEx - U_NOP_NOP_NO3 - U_NOP_NOP_NO2;
let P_NO3_FWIH2O = frNO3H2O * P_H2OFWIH2O;
let P_NO3_3NOP_NO3 = U_NOP_NOP_NO3;
let U_NO3_NO3_Ab = KNOxAb * QNO3;
let U_NO3_NO3_Ex = KFlEx * QNO3;
let U_NO3_NO3_NO2  = KNO3NO2 * QNO3;
let dQNO3dt = P_NO3_FWIH2O + P_NO3_3NOP_NO3 - U_NO3_NO3_Ab - U_NO3_NO3_Ex - U_NO3_NO3_NO2;
let U_NO3 = U_NO3_NO3_Ab + U_NO3_NO3_Ex + U_NO3_NO3_NO2;
let P_NO2_3NOP_NO2 = U_NOP_NOP_NO2;
let P_NO2_NO3_NO2 = U_NO3_NO3_NO2;
let U_NO2NO2Ab = KNOxAb * QNO2;
let U_NO2_NO2_Ex = KFlEx * QNO2;
let U_NO2_NO2_Am = P_AmNO2Am;
let U_NO2_NO2_N2O = KNO2_N2O * QNO2;
let dQNO2dt = P_NO2_3NOP_NO2 + P_NO2_NO3_NO2 - U_NO2NO2Ab - U_NO2_NO2_Ex - U_NO2_NO2_Am - U_NO2_NO2_N2O;
let U_NO2 = U_NO2NO2Ab + U_NO2_NO2_Ex + U_NO2_NO2_Am + U_NO2_NO2_N2O;
let P_N2O_N2O_NO2 = 0.5 * U_NO2_NO2_N2O;
let U_N2ON2OEm = KH2Em * QN2O;
let U_N2ON2OEx = ((V * KFlEx * VmolCO2)/(Vheadspace * hN2O)) * QN2O;
let U_N2ON2OAb = ((Fb * VmolCO2)/(Vheadspace * hN2O)) * QN2O;
let dQN2Odt = P_N2O_N2O_NO2 - U_N2ON2OEm - U_N2ON2OEx - U_N2ON2OAb;
    
//let pH2 = 0 if QH2 < 0 else QH2 * (1e3 * R * Temp / p0) / Vheadspace;
let pH2 = QH2 < 0
    ? 0
    : (QH2 * (1e3 * R * Temp / p0)) / Vheadspace;
  
let pHcell = 6.43 + 3.62 * 1e-8 *Math.exp(2.4 * pH);
//let F_T_Fd = 1 - (((rFr*pH2**2)/(9*(10**(-1*pHcell))**3)))**(1/2) *Math.exp( (deltaG0*1e3)/(chi*R*Temp) );
let F_T_Fd = 1 - (Math.pow((rFr * Math.pow(pH2, 2)) / (9 * Math.pow(10, -1 * pHcell) ** 3), 0.5 ) * Math.exp((deltaG0 * 1e3) / (chi * R * Temp)));
    
//let U_NADH_FrredFrox = 0 if Math.isnan(F_T_Fd) or F_T_Fd <= 0 else K_NADH_FrredFrox * QNADH * F_T_Fd;
let U_NADH_FrredFrox = Number.isNaN(F_T_Fd) || F_T_Fd <= 0
    ? 0
    : K_NADH_FrredFrox * QNADH * F_T_Fd;
    
let P_NADH_WsAc = Y_NADHWsAc * (YWsPsFerm * U_PiPoAmAc + YWsPsFerm * U_PsBaAmAc + YWsPsFerm * U_PsBfAmAc + YWsPsFerm * U_PsFnAmAc + YWsPsFerm * U_PsPoAmAc + YWsPsFerm * YPsBaDe * U_BaPoAmAc + YWsPsFerm * YPsBfDe * U_BfPoAmAc + YWsPsFerm * YPsFnDe * U_FnPoAmAc + YWsPsFerm * YPsPoDe * U_PoPoAmAc + U_WsPsBaAc + U_WsAmBaAc + U_WsNgBaAc +  U_WsSaBaAc + U_WsFaUBaAc + U_WsFaSBaAc + U_WsPsBfAc + U_WsAmBfAc + U_WsNgBfAc + U_WsSfBfAc + U_WsFaUBfAc + U_WsFaSBfAc + U_WsPsFnAc + U_WsAmFnAc + U_WsNgFnAc +  U_WsSfnFnAc + U_WsFaUFnAc + U_WsFaSFnAc + U_WsPiPoAc + U_WsPsPoAc + U_WsBaPoAc + U_WsBfPoAc + U_WsFnPoAc + U_WsPoPoAc + U_WsNgPoAc + U_WsSpPoAc + U_WsFaUPoAc + U_WsFaSPoAc + U_FdPiPoAc + U_FdPsPoAc + U_FdBaPoAc + U_FdBfPoAc + U_FdFnPoAc +  U_FdPoPoAc + U_FdNgPoAc + U_FdSpPoAc + U_FdFaUPoAc + U_FdFaSPoAc + U_SiPiPoAc + U_SiPsPoAc + U_SiBaPoAc + U_SiBfPoAc + U_SiFnPoAc + U_SiPoPoAc + U_SiNgPoAc + U_SiSpPoAc + U_SiFaUPoAc + U_SiFaSPoAc + (1/YSaBaWsAc) * U_SaPsBaAc + (1/YSaBaWsAc) * U_SaAmBaAc + (1/YSaBaWsAc) * U_SaNgBaAc + (1/YSaBaWsAc) * U_SaFaUBaAc + (1/YSaBaWsAc) * U_SaFaSBaAc + (1/YSfBfWsAc) * U_SfPsBfAc + (1/YSfBfWsAc) * U_SfAmBfAc + (1/YSfBfWsAc) * U_SfNgBfAc + (1/YSfBfWsAc) * U_SfFaUBfAc + (1/YSfBfWsAc) * U_SfFaSBfAc + (1/YSfnWs) * U_SfnPsFnAc + (1/YSfnWs) * U_SfnAmFnAc + (1/YSfnWs) * U_SfnNgFnAc + (1/YSfnWs) * U_SfnFaUFnAc + (1/YSfnWs) * U_SfnFaSFnAc + (1/YSpPoWsAc )* U_SpPiPoAc + (1/YSpPoWsAc )* U_SpPsPoAc + (1/YSpPoWsAc )* U_SpBaPoAc + (1/YSpPoWsAc )* U_SpBfPoAc + (1/YSpPoWsAc )* U_SpFnPoAc + (1/YSpPoWsAc )* U_SpPoPoAc + (1/YSpPoWsAc )* U_SpNgPoAc + (1/YSpPoWsAc )* U_SpFaUPoAc + (1/YSpPoWsAc )* U_SpFaSPoAc);
let U_NADH_WsAcPr = R_NADHWsAcPr * QNADH * (YWsPsFerm *(U_PsBaAmAcPr/U_Ps) + YWsPsFerm *(U_PsBfAmAcPr/U_Ps) + (U_WsPsBaAcPr/U_Ws) + (U_WsAmBaAcPr/U_Ws) + (U_WsNgBaAcPr/U_Ws) + (U_WsSaBaAcPr/U_Ws) + (U_WsFaUBaAcPr/U_Ws) + (U_WsFaSBaAcPr/U_Ws) + (U_WsPsBfAcPr/U_Ws) + (U_WsAmBfAcPr/U_Ws) + (U_WsNgBfAcPr/U_Ws) + (U_WsSfBfAcPr/U_Ws) + (U_WsFaUBfAcPr/U_Ws) + (U_WsFaSBfAcPr/U_Ws) + (1/YSaBaWsAcPr) * (U_SaPsBaAcPr/U_Sa) + (1/YSaBaWsAcPr) * (U_SaAmBaAcPr/U_Sa) + (1/YSaBaWsAcPr) * (U_SaNgBaAcPr/U_Sa) + (1/YSaBaWsAcPr) * (U_SaFaUBaAcPr/U_Sa) + (1/YSaBaWsAcPr) * (U_SaFaSBaAcPr/U_Sa) + (1/YSfBfWsAcPr) * (U_SfPsBfAcPr/U_Sf) + (1/YSfBfWsAcPr) * (U_SfAmBfAcPr/U_Sf) + (1/YSfBfWsAcPr) *(U_SfNgBfAcPr/U_Sf) + (1/YSfBfWsAcPr) * (U_SfFaUBfAcPr/U_Sf) + (1/YSfBfWsAcPr) * (U_SfFaSBfAcPr/U_Sf));
let U_NADH_LaAcPr = R_NADHLaAcPr * QNADH * ((U_LaPsBaAcPr/U_La) + (U_LaAmBaAcPr/U_La) + (U_LaNgBaAcPr/U_La) + (U_LaSaBaAcPr/U_La) + (U_LaFaUBaAcPr/U_La) + (U_LaFaSBaAcPr/U_La) );
let dQNADHdt = P_NADH_WsAc - U_NADH_WsAcPr - U_NADH_LaAcPr - U_NADH_FrredFrox;
let U_NADH = U_NADH_WsAcPr + U_NADH_LaAcPr + U_NADH_FrredFrox;
let P_H2WsAc = Y_H2WsAc * (YWsPsFerm * U_PiPoAmAc + YWsPsFerm *U_PsBaAmAc + YWsPsFerm *U_PsBfAmAc + YWsPsFerm *U_PsFnAmAc + YWsPsFerm * U_PsPoAmAc + YWsPsFerm * YPsBaDe * U_BaPoAmAc + YWsPsFerm * YPsBfDe * U_BfPoAmAc + YWsPsFerm * YPsFnDe * U_FnPoAmAc + YWsPsFerm * YPsPoDe * U_PoPoAmAc + U_WsPsBaAc + U_WsAmBaAc + U_WsNgBaAc +  U_WsSaBaAc + U_WsFaUBaAc + U_WsFaSBaAc + U_WsPsBfAc + U_WsAmBfAc + U_WsNgBfAc + U_WsSfBfAc + U_WsFaUBfAc + U_WsFaSBfAc + U_WsPsFnAc + U_WsAmFnAc + U_WsNgFnAc +  U_WsSfnFnAc + U_WsFaUFnAc + U_WsFaSFnAc + U_WsPiPoAc + U_WsPsPoAc + U_WsBaPoAc + U_WsBfPoAc + U_WsFnPoAc + U_WsPoPoAc + U_WsNgPoAc + U_WsSpPoAc + U_WsFaUPoAc + U_WsFaSPoAc + U_FdPiPoAc + U_FdPsPoAc + U_FdBaPoAc + U_FdBfPoAc + U_FdFnPoAc +  U_FdPoPoAc + U_FdNgPoAc + U_FdSpPoAc + U_FdFaUPoAc + U_FdFaSPoAc + U_SiPiPoAc + U_SiPsPoAc + U_SiBaPoAc + U_SiBfPoAc + U_SiFnPoAc + U_SiPoPoAc + U_SiNgPoAc + U_SiSpPoAc + U_SiFaUPoAc + U_SiFaSPoAc + (1/YSaBaWsAc)* U_SaPsBaAc + (1/YSaBaWsAc)* U_SaAmBaAc + (1/YSaBaWsAc)* U_SaNgBaAc + (1/YSaBaWsAc)* U_SaFaUBaAc + (1/YSaBaWsAc)*U_SaFaSBaAc + (1/YSfBfWsAc)*U_SfPsBfAc + (1/YSfBfWsAc)*U_SfAmBfAc + (1/YSfBfWsAc)*U_SfNgBfAc + (1/YSfBfWsAc)*U_SfFaUBfAc + (1/YSfBfWsAc)*U_SfFaSBfAc + (1/YSfnWs) * U_SfnPsFnAc + (1/YSfnWs) * U_SfnAmFnAc + (1/YSfnWs) * U_SfnNgFnAc + (1/YSfnWs) * U_SfnFaUFnAc + (1/YSfnWs) * U_SfnFaSFnAc + (1/YSpPoWsAc) * U_SpPiPoAc + (1/YSpPoWsAc) * U_SpPsPoAc + (1/YSpPoWsAc) * U_SpBaPoAc + (1/YSpPoWsAc) * U_SpBfPoAc + (1/YSpPoWsAc) * U_SpFnPoAc + (1/YSpPoWsAc) * U_SpPoPoAc + (1/YSpPoWsAc) * U_SpNgPoAc + (1/YSpPoWsAc) * U_SpFaUPoAc + (1/YSpPoWsAc) * U_SpFaSPoAc);
let P_H2WsBu = Y_H2WsBu * (YWsPsFerm *U_PiPoAmBu + YWsPsFerm *U_PsBaAmBu + YWsPsFerm *U_PsBfAmBu + YWsPsFerm *U_PsFnAmBu + YWsPsFerm *U_PsPoAmBu + YWsPsFerm * YPsBaDe * U_BaPoAmBu + YWsPsFerm * YPsBfDe * U_BfPoAmBu + YWsPsFerm * YPsFnDe *U_FnPoAmBu + YWsPsFerm * YPsPoDe * U_PoPoAmBu + U_WsPsBaBu + U_WsAmBaBu + U_WsNgBaBu + U_WsSaBaBu + U_WsFaUBaBu + U_WsFaSBaBu + U_WsPsBfBu + U_WsAmBfBu + U_WsNgBfBu + U_WsSfBfBu + U_WsFaUBfBu + U_WsFaSBfBu + U_WsPsFnBu + U_WsAmFnBu + U_WsNgFnBu + U_WsSfnFnBu + U_WsFaUFnBu + U_WsFaSFnBu + U_WsPiPoBu + U_WsPsPoBu + U_WsBaPoBu + U_WsBfPoBu + U_WsFnPoBu + U_WsPoPoBu + U_WsNgPoBu + U_WsSpPoBu + U_WsFaUPoBu + U_WsFaSPoBu + U_FdPiPoBu + U_FdPsPoBu + U_FdBaPoBu + U_FdBfPoBu + U_FdFnPoBu + U_FdPoPoBu + U_FdNgPoBu + U_FdSpPoBu + U_FdFaUPoBu + U_FdFaSPoBu + U_SiPiPoBu + U_SiPsPoBu + U_SiBaPoBu + U_SiBfPoBu + U_SiFnPoBu + U_SiPoPoBu + U_SiNgPoBu + U_SiSpPoBu + U_SiFaUPoBu + U_SiFaSPoBu + (1/YSaBaWsBu) * U_SaPsBaBu + (1/YSaBaWsBu) *U_SaAmBaBu + (1/YSaBaWsBu) * U_SaNgBaBu + (1/YSaBaWsBu) * U_SaFaUBaBu + (1/YSaBaWsBu) * U_SaFaSBaBu + (1/YSaBaWsBu) * U_SfPsBfBu + (1/YSfBfWsBu) * U_SfAmBfBu + (1/YSfBfWsBu) * U_SfNgBfBu + (1/YSfBfWsBu) * U_SfFaUBfBu + (1/YSfBfWsBu) * U_SfFaSBfBu + (1/YSfnWs) * U_SfnPsFnBu + (1/YSfnWs) * U_SfnAmFnBu + (1/YSfnWs) * U_SfnNgFnBu + (1/YSfnWs) * U_SfnFaUFnBu + (1/YSfnWs) * U_SfnFaSFnBu + (1/YSpPoWsBu) * U_SpPiPoBu + (1/YSpPoWsBu) * U_SpPsPoBu + (1/YSpPoWsBu) * U_SpBaPoBu + (1/YSpPoWsBu) * U_SpBfPoBu + (1/YSpPoWsBu) * U_SpFnPoBu + (1/YSpPoWsBu) * U_SpPoPoBu + (1/YSpPoWsBu) * U_SpNgPoBu + (1/YSpPoWsBu) * U_SpFaUPoBu + (1/YSpPoWsBu) * U_SpFaSPoBu);
let P_H2LaAcBu = Y_H2LaAcBu * (U_LaPsBaAcBu + U_LaAmBaAcBu + U_LaNgBaAcBu + U_LaSaBaAcBu + U_LaFaUBaAcBu + U_LaFaSBaAcBu + U_LaPsFnAcBu + U_LaAmFnAcBu + U_LaNgFnAcBu + U_LaSfnFnAcBu + U_LaFaUFnAcBu + U_LaFaSFnAcBu + U_LaPiPoAcBu + U_LaPsPoAcBu + U_LaNgPoAcBu + U_LaSpPoAcBu + U_LaFaUPoAcBu + U_LaFaSPoAcBu + U_LaBaPoAcBu + U_LaBfPoAcBu + U_LaFnPoAcBu + U_LaPoPoAcBu);
let P_H2_Mi_AA = YH2MiAA * (P_BaPsWsAc + P_BaPsWsBu + P_BaPsWsAcPr + P_BaPsWsLa + P_BaPsSaAc + P_BaPsSaBu + P_BaPsSaAcPr + P_BaPsSaLa + P_BaPsLaAcPr + P_BaPsLaAcBu + P_BfPsWsAc + P_BfPsWsBu + P_BfPsWsAcPr + P_BfPsSfAc + P_BfPsSfBu + P_BfPsSfAcPr + P_FnPsWsAc + P_FnPsWsBu + P_FnPsWsLa + P_FnPsSfnAc + P_FnPsSfnBu + P_FnPsSfnLa + P_FnPsLaAcBu + P_PoPiWsAc + P_PoPiWsBu + P_PoPiWsLa + P_PoPiFdAc + P_PoPiFdBu + P_PoPiFdLa + P_PoPiSiAc + P_PoPiSiBu + P_PoPiSiLa + P_PoPiSpAc + P_PoPiSpBu + P_PoPiSpLa + P_PoPsWsAc + P_PoPsWsBu + P_PoPsWsLa + P_PoPsFdAc + P_PoPsFdBu + P_PoPsFdLa + P_PoPsSiAc + P_PoPsSiBu + P_PoPsSiLa + P_PoPsSpAc + P_PoPsSpBu + P_PoPsSpLa + P_PoBaWsAc + P_PoBaWsBu + P_PoBaWsLa + P_PoBaFdAc + P_PoBaFdBu + P_PoBaFdLa + P_PoBaSiAc + P_PoBaSiBu + P_PoBaSiLa + P_PoBaSpAc + P_PoBaSpBu + P_PoBaSpLa + P_PoBfWsAc + P_PoBfWsBu + P_PoBfWsLa + P_PoBfFdAc + P_PoBfFdBu + P_PoBfFdLa + P_PoBfSiAc + P_PoBfSiBu + P_PoBfSiLa + P_PoBfSpAc + P_PoBfSpBu + P_PoBfSpLa + P_PoFnWsAc + P_PoFnWsBu + P_PoFnWsLa + P_PoFnFdAc + P_PoFnFdBu + P_PoFnFdLa + P_PoFnSiAc + P_PoFnSiBu + P_PoFnSiLa + P_PoFnSpAc + P_PoFnSpBu + P_PoFnSpLa + P_PoPoWsAc + P_PoPoWsBu + P_PoPoWsLa + P_PoPoFdAc + P_PoPoFdBu + P_PoPoFdLa + P_PoPoSiAc + P_PoPoSiBu + P_PoPoSiLa + P_PoPoSpAc + P_PoPoSpBu + P_PoPoSpLa + P_PoPiLaAcBu + P_PoPsLaAcBu + P_PoBaLaAcBu + P_PoBfLaAcBu + P_PoFnLaAcBu + P_PoPoLaAcBu);
let U_H2H2Em = KH2Em * QH2;
let U_H2H2Ex = ((V * KFlEx * VmolH2)/(Vheadspace * hH2)) * QH2;
let U_H2H2Ab = ((Fb * VmolH2)/(Vheadspace * hH2)) * QH2;
let U_H2MeCH4 = VmaxH2MeCH4 * QMe/ (1 + (MH2MeCH4/CH2)+ (CBr/J_Br_H2MeCH4) + (CNOP/J_NOP_MCR_H2MeCH4) + (CNO2/J_NO2_MCR_H2MeCH4));
let U_H2_NO3_NO2 = QH2 * (U_NO3_NO3_NO2/U_NO3);
let U_H2_NO2_H2 = 3 * QH2 * (U_NO2_NO2_Am/U_NO2);
let U_H2_NO2_N2O = 1.5 * QH2 * (U_NO2_NO2_N2O/U_NO2);
let U_H2_FaU_FaS = RH2FaUFaS * QH2 * ((U_FaUFaSBa/U_FaU) +  (U_FaUFaSBf/U_FaU) + (U_FaUFaSFn/U_FaU));
let U_H2AmAA =  RH2AmAA * QH2 * ((U_AmBaWsAc/U_Am) + (U_AmBaWsBu/U_Am) + (U_AmBaWsAcPr/U_Am) + (U_AmBaWsLa/U_Am) + (U_AmBaSaAc/U_Am) + (U_AmBaSaBu/U_Am) + (U_AmBaSaAcPr/U_Am) + (U_AmBaSaLa/U_Am) + (U_AmBaLaAcPr/U_Am) + (U_AmBaLaAcBu/U_Am) + (U_AmBfWsAc/U_Am) + (U_AmBfWsBu/U_Am) + (U_AmBfWsAcPr/U_Am)+ (U_AmBfSfAc/U_Am) + (U_AmBfSfBu/U_Am) + (U_AmBfSfAcPr /U_Am)+ (U_AmFnWsAc/U_Am) + (U_AmFnWsBu/U_Am) + (U_AmFnWsLa /U_Am)+ (U_AmFnSfnAc/U_Am) + (U_AmFnSfnBu/U_Am) + (U_AmFnSfnLa/U_Am) + (U_AmFnLaAcBu/U_Am));
let dQH2dt = P_H2WsAc + P_H2WsBu + P_H2LaAcBu + P_H2_Mi_AA - U_H2H2Em - U_H2H2Ex - U_H2H2Ab - U_H2MeCH4 - U_H2_NO3_NO2 - U_H2_NO2_H2 - U_H2_NO2_N2O - U_H2_FaU_FaS - U_H2AmAA;
let U_H2 =  U_H2H2Em + U_H2H2Ex + U_H2H2Ab + U_H2MeCH4 + U_H2_NO3_NO2 + U_H2_NO2_H2 + U_H2_NO2_N2O + U_H2_FaU_FaS + U_H2AmAA;
let P_MeH2CH4 = YMeH2CH4 * U_H2MeCH4;
let U_MeMeExPo = YMEPo * (U_PoFlPoFlEx/U_Po) * QMe;
let U_MeMeExFn = YMEPo * (U_FnFnExFl + U_FnFnExSo)/U_Fn * QMe;
let dQMedt = P_MeH2CH4 - U_MeMeExPo - U_MeMeExFn;
let U_Me = U_MeMeExPo + U_MeMeExFn;
let pCH4 = QCH4 * (1e3*R*Temp/p0) / Vheadspace;
let P_CH4H2Me = YCH4H2ME * U_H2MeCH4;
let dQCH4dt = P_CH4H2Me;
let P_BicarbInBicarb = InBicarb;
let P_BicarbSalBicarb = YBicarbSalBicarb * RateSal;
let P_BicarbdVFAAbs = U_LactateLactateAb + U_AcetateAcetateAb + U_ButyrateButyrateAb + U_PropionatePropionateAb;
let U_BicarbBicarbEx = KFlExBicarb * QBicarb;
let pCO2 = QCO2 * (1e3*R*Temp/p0) / Vheadspace;
let P_CO2WsAc = Y_CO2WsAc * (YWsPsFerm *U_PiPoAmAc + YWsPsFerm *U_PsBaAmAc + YWsPsFerm *U_PsBfAmAc + YWsPsFerm *U_PsFnAmAc + YWsPsFerm *U_PsPoAmAc + YWsPsFerm * YPsPoDe *U_BaPoAmAc + YWsPsFerm * YPsBfDe *U_BfPoAmAc + YWsPsFerm * YPsFnDe *U_FnPoAmAc + YWsPsFerm * YPsPoDe * U_PoPoAmAc + U_WsPsBaAc + U_WsAmBaAc + U_WsNgBaAc +  U_WsSaBaAc + U_WsFaUBaAc + U_WsFaSBaAc + U_WsPsBfAc + U_WsAmBfAc + U_WsNgBfAc + U_WsSfBfAc + U_WsFaUBfAc + U_WsFaSBfAc + U_WsPsFnAc + U_WsAmFnAc + U_WsNgFnAc +  U_WsSfnFnAc + U_WsFaUFnAc + U_WsFaSFnAc + U_WsPiPoAc + U_WsPsPoAc + U_WsBaPoAc + U_WsBfPoAc + U_WsFnPoAc + U_WsPoPoAc + U_WsNgPoAc + U_WsSpPoAc + U_WsFaUPoAc + U_WsFaSPoAc + U_FdPiPoAc + U_FdPsPoAc + U_FdBaPoAc + U_FdBfPoAc + U_FdFnPoAc +  U_FdPoPoAc + U_FdNgPoAc + U_FdSpPoAc + U_FdFaUPoAc + U_FdFaSPoAc + U_SiPiPoAc + U_SiPsPoAc + U_SiBaPoAc + U_SiBfPoAc + U_SiFnPoAc + U_SiPoPoAc + U_SiNgPoAc + U_SiSpPoAc + U_SiFaUPoAc + U_SiFaSPoAc + (1/YSaBaWsAc) * U_SaPsBaAc + (1/YSaBaWsAc) * U_SaAmBaAc + (1/YSaBaWsAc) * U_SaNgBaAc + (1/YSaBaWsAc) * U_SaFaUBaAc + (1/YSaBaWsAc) * U_SaFaSBaAc + (1/YSfBfWsAc) * U_SfPsBfAc + (1/YSfBfWsAc) * U_SfAmBfAc + (1/YSfBfWsAc) * U_SfNgBfAc + (1/YSfBfWsAc) * U_SfFaUBfAc + (1/YSfBfWsAc) * U_SfFaSBfAc + (1/YSfnWs) * U_SfnPsFnAc + (1/YSfnWs) * U_SfnAmFnAc + (1/YSfnWs) * U_SfnNgFnAc + (1/YSfnWs) * U_SfnFaUFnAc + (1/YSfnWs) * U_SfnFaSFnAc + (1/YSpPoWsAc) * U_SpPiPoAc + (1/YSpPoWsAc ) * U_SpPsPoAc + (1/YSpPoWsAc ) * U_SpBaPoAc + (1/YSpPoWsAc ) * U_SpBfPoAc + (1/YSpPoWsAc ) * U_SpFnPoAc + (1/YSpPoWsAc ) * U_SpPoPoAc + (1/YSpPoWsAc ) * U_SpNgPoAc + (1/YSpPoWsAc ) * U_SpFaUPoAc + (1/YSpPoWsAc ) * U_SpFaSPoAc);
let P_CO2WsBu = Y_CO2WsBu * (YWsPsFerm *U_PiPoAmBu + YWsPsFerm *U_PsBaAmBu + YWsPsFerm *U_PsBfAmBu + YWsPsFerm *U_PsFnAmBu + YWsPsFerm *U_PsPoAmBu + YWsPsFerm * YPsBaDe *U_BaPoAmBu + YWsPsFerm * YPsBfDe *U_BfPoAmBu + YWsPsFerm * YPsFnDe *U_FnPoAmBu + YWsPsFerm * YPsPoDe * U_PoPoAmBu + U_WsPsBaBu + U_WsAmBaBu + U_WsNgBaBu + U_WsSaBaBu + U_WsFaUBaBu + U_WsFaSBaBu + U_WsPsBfBu + U_WsAmBfBu + U_WsNgBfBu + U_WsSfBfBu + U_WsFaUBfBu + U_WsFaSBfBu + U_WsPsFnBu + U_WsAmFnBu + U_WsNgFnBu + U_WsSfnFnBu + U_WsFaUFnBu + U_WsFaSFnBu + U_WsPiPoBu + U_WsPsPoBu + U_WsBaPoBu + U_WsBfPoBu + U_WsFnPoBu + U_WsPoPoBu + U_WsNgPoBu + U_WsSpPoBu + U_WsFaUPoBu + U_WsFaSPoBu + U_FdPiPoBu + U_FdPsPoBu + U_FdBaPoBu + U_FdBfPoBu + U_FdFnPoBu + U_FdPoPoBu + U_FdNgPoBu + U_FdSpPoBu + U_FdFaUPoBu + U_FdFaSPoBu + U_SiPiPoBu + U_SiPsPoBu + U_SiBaPoBu + U_SiBfPoBu + U_SiFnPoBu + U_SiPoPoBu + U_SiNgPoBu + U_SiSpPoBu + U_SiFaUPoBu + U_SiFaSPoBu + (1/YSaBaWsBu) * U_SaPsBaBu + (1/YSaBaWsBu) *U_SaAmBaBu + (1/YSaBaWsBu) *U_SaNgBaBu + (1/YSaBaWsBu) *U_SaFaUBaBu + (1/YSaBaWsBu) *U_SaFaSBaBu +(1/YSfBfWsBu) * U_SfPsBfBu + (1/YSfBfWsBu) *U_SfAmBfBu + (1/YSfBfWsBu) *U_SfNgBfBu + (1/YSfBfWsBu) *U_SfFaUBfBu + (1/YSfBfWsBu) *U_SfFaSBfBu + (1/YSfnWs) *U_SfnPsFnBu + (1/YSfnWs) *U_SfnAmFnBu + (1/YSfnWs) *U_SfnNgFnBu + (1/YSfnWs) * U_SfnFaUFnBu + (1/YSfnWs) * U_SfnFaSFnBu + (1/YSpPoWsBu) * U_SpPiPoBu + (1/YSpPoWsBu) *U_SpPsPoBu + (1/YSpPoWsBu) *U_SpBaPoBu + (1/YSpPoWsBu) *U_SpBfPoBu + (1/YSpPoWsBu) *U_SpFnPoBu + (1/YSpPoWsBu) *U_SpPoPoBu + (1/YSpPoWsBu) *U_SpNgPoBu + (1/YSpPoWsBu) *U_SpFaUPoBu + (1/YSpPoWsBu) *U_SpFaSPoBu);
let P_CO2WsAcPr = Y_CO2WsAcPr * (YWsPsFerm *U_PsBaAmAcPr + YWsPsFerm *U_PsBfAmAcPr + U_WsPsBaAcPr + U_WsAmBaAcPr + U_WsNgBaAcPr + U_WsSaBaAcPr + U_WsFaUBaAcPr + U_WsFaSBaAcPr + U_WsPsBfAcPr + U_WsAmBfAcPr + U_WsNgBfAcPr + U_WsSfBfAcPr + U_WsFaUBfAcPr + U_WsFaSBfAcPr + (1/YSaBaWsAcPr ) * U_SaPsBaAcPr + (1/YSaBaWsAcPr ) * U_SaAmBaAcPr + (1/YSaBaWsAcPr ) *U_SaNgBaAcPr + (1/YSaBaWsAcPr ) *U_SaFaUBaAcPr + (1/YSaBaWsAcPr ) *U_SaFaSBaAcPr + (1/YSfBfWsAcPr ) *U_SfPsBfAcPr + (1/YSfBfWsAcPr ) *U_SfAmBfAcPr + (1/YSfBfWsAcPr ) *U_SfNgBfAcPr + (1/YSfBfWsAcPr ) *U_SfFaUBfAcPr + (1/YSfBfWsAcPr ) *U_SfFaSBfAcPr);
let P_CO2LaAcPr = Y_CO2LaAcPr * (U_LaPsBaAcPr + U_LaAmBaAcPr + U_LaNgBaAcPr + U_LaSaBaAcPr + U_LaFaUBaAcPr + U_LaFaSBaAcPr );
let P_CO2LaAcBu = Y_CO2LaAcBu * (U_LaPsBaAcBu + U_LaAmBaAcBu + U_LaNgBaAcBu + U_LaSaBaAcBu + U_LaFaUBaAcBu + U_LaFaSBaAcBu + U_LaPsFnAcBu + U_LaAmFnAcBu + U_LaNgFnAcBu + U_LaSfnFnAcBu + U_LaFaUFnAcBu + U_LaFaSFnAcBu + U_LaPiPoAcBu + U_LaPsPoAcBu + U_LaNgPoAcBu + U_LaSpPoAcBu + U_LaFaUPoAcBu + U_LaFaSPoAcBu + U_LaBaPoAcBu + U_LaBfPoAcBu + U_LaFnPoAcBu + U_LaPoPoAcBu);
let U_CO2MeCH4 = RCO2CH4H2Me * (U_H2MeCH4/U_H2) * QCO2;
let U_CO2CO2Ex = ((V * KFlEx * VmolCO2)/(Vheadspace * hCO2)) * QCO2;
let U_CO2CO2Em = KCO2Em * QCO2;
let U_CO2CO2Ab = ((Fb * VmolCO2)/(Vheadspace * hCO2)) * QCO2;
let U_CO2BicarbHplus = KdCO2/(1 + MCO2CO2Bicarb/CCO2 + CHplus/J_Hplus_CO2Bicarb);
let dQCO2dt = P_CO2WsAc + P_CO2WsBu + P_CO2WsAcPr + P_CO2LaAcPr + P_CO2LaAcBu - U_CO2MeCH4 - U_CO2CO2Ex - U_CO2CO2Em - U_CO2CO2Ab - U_CO2BicarbHplus;
let P_BicarbCO2Hplus = U_CO2BicarbHplus;
let dQBicarbdt = P_BicarbInBicarb + P_BicarbSalBicarb + P_BicarbdVFAAbs + P_BicarbCO2Hplus - U_BicarbBicarbEx;
let P_HplusLaLactate = YHplusLaLactate * U_LaLactate;
let P_HplusAcAcetate = YHplusAcAcetate * U_AcAcetate;
let P_HplusBuButyrate = YHplusBuButyrate * U_BuButyrate;
let P_HplusPrPropionate = YHplusPrPropionate * U_PrPropionate;
let P_HplusCO2Bicarb = YHplusCO2Bicarb * U_CO2BicarbHplus;
let U_HplusHplusEx = KFlExHplus * QHplus;
let U_Hplus_NADH_FrredFrox = RHplus_NADH_FrredFrox * QHplus * (U_NADH_FrredFrox/U_NADH);
let dQHplusdt = P_HplusLaLactate + P_HplusAcAcetate + P_HplusBuButyrate + P_HplusPrPropionate + P_HplusCO2Bicarb - U_HplusHplusEx - U_Hplus_NADH_FrredFrox;
    
//let U_tsubpH = 1 if pH < pH_crit else 0;

U_tsubpH = pH < pH_crit ? 1 : 0;
 
//let UQmaxHplusdt = 0 if Math.isnan(QHplus) or Math.isnan(dQHplusdt) or not (QHplus + (dQHplusdt * 0.002) > QHplus) else dQHplusdt;
let UQmaxHplusdt = Number.isNaN(QHplus) || Number.isNaN(dQHplusdt) || !(QHplus + (dQHplusdt * 0.002) > QHplus)
    ? 0
    : dQHplusdt;

let dtsubpHdt = U_tsubpH;

tsubpH = dtsubpHdt;
    
let dQmaxHplusdt = UQmaxHplusdt;
let P_H2_Ferm_Insol =   Y_H2WsAc * (YWsPsFerm *U_PiPoAmAc +  YWsPsFerm *U_PsBfAmAc +  YWsPsFerm *U_PsFnAmAc +  YWsPsFerm *U_PsPoAmAc + YWsPsFerm * YPsBfDe * U_BfPoAmAc + YWsPsFerm * YPsFnDe *U_FnPoAmAc + YWsPsFerm * YPsPoDe *U_PoPoAmAc + U_WsPsBfAc + U_WsAmBfAc + U_WsNgBfAc + U_WsSfBfAc + U_WsFaUBfAc + U_WsFaSBfAc + U_WsPsFnAc + U_WsAmFnAc + U_WsNgFnAc +  U_WsSfnFnAc + U_WsFaUFnAc + U_WsFaSFnAc + U_WsPiPoAc + U_WsPsPoAc + U_WsBfPoAc + U_WsFnPoAc + U_WsPoPoAc + U_WsNgPoAc + U_WsSpPoAc + U_WsFaUPoAc + U_WsFaSPoAc + U_FdPiPoAc + U_FdPsPoAc + U_FdBfPoAc + U_FdFnPoAc +  U_FdPoPoAc + U_FdNgPoAc + U_FdSpPoAc + U_FdFaUPoAc + U_FdFaSPoAc + U_SiPiPoAc + U_SiPsPoAc + U_SiBfPoAc + U_SiFnPoAc + U_SiPoPoAc + U_SiNgPoAc + U_SiSpPoAc + U_SiFaUPoAc + U_SiFaSPoAc + (1/YSfBfWsAc)*U_SfPsBfAc + (1/YSfBfWsAc)*U_SfAmBfAc + (1/YSfBfWsAc)*U_SfNgBfAc + (1/YSfBfWsAc)*U_SfFaUBfAc + (1/YSfBfWsAc)*U_SfFaSBfAc + (1/YSfnWs) * U_SfnPsFnAc + (1/YSfnWs) * U_SfnAmFnAc + (1/YSfnWs) * U_SfnNgFnAc + (1/YSfnWs) * U_SfnFaUFnAc + (1/YSfnWs) * U_SfnFaSFnAc + (1/YSpPoWsAc) *U_SpPiPoAc + (1/YSpPoWsAc) *U_SpPsPoAc + (1/YSpPoWsAc) *U_SpBfPoAc + (1/YSpPoWsAc) *U_SpFnPoAc + (1/YSpPoWsAc) *U_SpPoPoAc + (1/YSpPoWsAc) *U_SpNgPoAc + (1/YSpPoWsAc) *U_SpFaUPoAc + (1/YSpPoWsAc) *U_SpFaSPoAc) + Y_H2WsBu * ( YWsPsFerm *U_PiPoAmBu +  YWsPsFerm *U_PsBfAmBu +  YWsPsFerm *U_PsFnAmBu +  YWsPsFerm *U_PsPoAmBu + YWsPsFerm * YPsPoDe *U_BfPoAmBu + YWsPsFerm * YPsPoDe *U_FnPoAmBu + YWsPsFerm * YPsPoDe *U_PoPoAmBu + U_WsPsBfBu + U_WsAmBfBu + U_WsNgBfBu + U_WsSfBfBu + U_WsFaUBfBu + U_WsFaSBfBu + U_WsPsFnBu + U_WsAmFnBu + U_WsNgFnBu + U_WsSfnFnBu + U_WsFaUFnBu + U_WsFaSFnBu + U_WsPiPoBu + U_WsPsPoBu + U_WsBfPoBu + U_WsFnPoBu + U_WsPoPoBu + U_WsNgPoBu + U_WsSpPoBu + U_WsFaUPoBu + U_WsFaSPoBu + U_FdPiPoBu + U_FdPsPoBu + U_FdBfPoBu + U_FdFnPoBu + U_FdPoPoBu + U_FdNgPoBu + U_FdSpPoBu + U_FdFaUPoBu + U_FdFaSPoBu + U_SiPiPoBu + U_SiPsPoBu + U_SiBfPoBu + U_SiFnPoBu + U_SiPoPoBu + U_SiNgPoBu + U_SiSpPoBu +  U_SiFaUPoBu + U_SiFaSPoBu + (1/YSfBfWsBu) *U_SfPsBfBu + (1/YSfBfWsBu) *U_SfAmBfBu + (1/YSfBfWsBu) *U_SfNgBfBu + (1/YSfBfWsBu) *U_SfFaUBfBu + (1/YSfBfWsBu) *U_SfFaSBfBu + (1/YSfnWs) * U_SfnPsFnBu + (1/YSfnWs) *U_SfnAmFnBu + (1/YSfnWs) *U_SfnNgFnBu + (1/YSfnWs) *U_SfnFaUFnBu + (1/YSfnWs) *U_SfnFaSFnBu + (1/YSpPoWsBu) * U_SpPiPoBu + (1/YSpPoWsBu) *U_SpPsPoBu + (1/YSpPoWsBu) *U_SpBfPoBu + (1/YSpPoWsBu) *U_SpFnPoBu + (1/YSpPoWsBu) *U_SpPoPoBu + (1/YSpPoWsBu) *U_SpNgPoBu + (1/YSpPoWsBu) *U_SpFaUPoBu + (1/YSpPoWsBu) *U_SpFaSPoBu) + Y_H2LaAcBu * (U_LaPsFnAcBu + U_LaAmFnAcBu + U_LaNgFnAcBu + U_LaSfnFnAcBu + U_LaFaUFnAcBu + U_LaFaSFnAcBu + U_LaPiPoAcBu + U_LaPsPoAcBu + U_LaNgPoAcBu + U_LaSpPoAcBu + U_LaFaUPoAcBu + U_LaFaSPoAcBu + U_LaBfPoAcBu + U_LaFnPoAcBu + U_LaPoPoAcBu);
let P_CO2_Ferm_Insol = Y_CO2WsAc * (YWsPsFerm *U_PiPoAmAc + YWsPsFerm *U_PsBfAmAc + YWsPsFerm *U_PsFnAmAc + YWsPsFerm *U_PsPoAmAc +  YWsPsFerm * YPsBfDe * U_BfPoAmAc + YWsPsFerm * YPsFnDe * U_FnPoAmAc + YWsPsFerm * YPsPoDe * U_PoPoAmAc  + U_WsPsBfAc + U_WsAmBfAc + U_WsNgBfAc + U_WsSfBfAc + U_WsFaUBfAc + U_WsFaSBfAc + U_WsPsFnAc + U_WsAmFnAc + U_WsNgFnAc +  U_WsSfnFnAc + U_WsFaUFnAc + U_WsFaSFnAc + U_WsPiPoAc + U_WsPsPoAc + U_WsBfPoAc + U_WsFnPoAc + U_WsPoPoAc + U_WsNgPoAc + U_WsSpPoAc + U_WsFaUPoAc + U_WsFaSPoAc + U_FdPiPoAc + U_FdPsPoAc + U_FdBfPoAc + U_FdFnPoAc +  U_FdPoPoAc + U_FdNgPoAc + U_FdSpPoAc + U_FdFaUPoAc + U_FdFaSPoAc + U_SiPiPoAc + U_SiPsPoAc + U_SiBfPoAc + U_SiFnPoAc + U_SiPoPoAc + U_SiNgPoAc + U_SiSpPoAc + U_SiFaUPoAc + U_SiFaSPoAc + (1/YSfBfWsAc)*U_SfPsBfAc + (1/YSfBfWsAc)*U_SfAmBfAc + (1/YSfBfWsAc)*U_SfNgBfAc + (1/YSfBfWsAc)*U_SfFaUBfAc + (1/YSfBfWsAc)*U_SfFaSBfAc + (1/YSfnWs) *U_SfnPsFnAc + (1/YSfnWs) *U_SfnAmFnAc + (1/YSfnWs) *U_SfnNgFnAc + (1/YSfnWs) *U_SfnFaUFnAc + (1/YSfnWs) *U_SfnFaSFnAc + (1/YSpPoWsAc) *U_SpPiPoAc + (1/YSpPoWsAc) *U_SpPsPoAc + (1/YSpPoWsAc) *U_SpBfPoAc + (1/YSpPoWsAc) *U_SpFnPoAc + (1/YSpPoWsAc) *U_SpPoPoAc + (1/YSpPoWsAc) *U_SpNgPoAc + (1/YSpPoWsAc) *U_SpFaUPoAc + (1/YSpPoWsAc) *U_SpFaSPoAc) + Y_CO2WsBu * (YWsPsFerm *U_PiPoAmBu + YWsPsFerm *U_PsBfAmBu + YWsPsFerm *U_PsFnAmBu + YWsPsFerm *U_PsPoAmBu + YWsPsFerm * YPsPoDe * U_BfPoAmBu + YWsPsFerm * YPsPoDe * U_FnPoAmBu + YWsPsFerm * YPsPoDe * U_PoPoAmBu + U_WsPsBfBu + U_WsAmBfBu + U_WsNgBfBu + U_WsSfBfBu + U_WsFaUBfBu + U_WsFaSBfBu + U_WsPsFnBu + U_WsAmFnBu + U_WsNgFnBu + U_WsSfnFnBu + U_WsFaUFnBu + U_WsFaSFnBu + U_WsPiPoBu + U_WsPsPoBu + U_WsBfPoBu + U_WsFnPoBu + U_WsPoPoBu + U_WsNgPoBu + U_WsSpPoBu + U_WsFaUPoBu + U_WsFaSPoBu + U_FdPiPoBu + U_FdPsPoBu + U_FdBfPoBu + U_FdFnPoBu + U_FdPoPoBu + U_FdNgPoBu + U_FdSpPoBu + U_FdFaUPoBu + U_FdFaSPoBu + U_SiPiPoBu + U_SiPsPoBu + U_SiBfPoBu + U_SiFnPoBu + U_SiPoPoBu + U_SiNgPoBu + U_SiSpPoBu + U_SiFaUPoBu + U_SiFaSPoBu + (1/YSfBfWsBu) *U_SfPsBfBu + (1/YSfBfWsBu) *U_SfAmBfBu + (1/YSfBfWsBu) *U_SfNgBfBu + (1/YSfBfWsBu) *U_SfFaUBfBu + (1/YSfBfWsBu) *U_SfFaSBfBu + (1/YSfnWs) *U_SfnPsFnBu + (1/YSfnWs) *U_SfnAmFnBu + (1/YSfnWs) *U_SfnNgFnBu + (1/YSfnWs) *U_SfnFaUFnBu + (1/YSfnWs) *U_SfnFaSFnBu + (1/YSpPoWsBu) *U_SpPiPoBu + (1/YSpPoWsBu) *U_SpPsPoBu + (1/YSpPoWsBu) *U_SpBfPoBu + (1/YSpPoWsBu) *U_SpFnPoBu + (1/YSpPoWsBu) *U_SpPoPoBu + (1/YSpPoWsBu) *U_SpNgPoBu + (1/YSpPoWsBu) *U_SpFaUPoBu + (1/YSpPoWsBu)* U_SpFaSPoBu) + Y_CO2WsAcPr * ( YWsPsFerm *U_PsBfAmAcPr + U_WsPsBfAcPr + U_WsAmBfAcPr + U_WsNgBfAcPr + U_WsSfBfAcPr + U_WsFaUBfAcPr + U_WsFaSBfAcPr + (1/YSfBfWsAcPr ) * U_SfPsBfAcPr + (1/YSfBfWsAcPr ) *U_SfAmBfAcPr + (1/YSfBfWsAcPr ) *U_SfNgBfAcPr + (1/YSfBfWsAcPr ) *U_SfFaUBfAcPr + (1/YSfBfWsAcPr ) *U_SfFaSBfAcPr) + Y_CO2LaAcBu * ( U_LaPsFnAcBu + U_LaAmFnAcBu + U_LaNgFnAcBu + U_LaSfnFnAcBu + U_LaFaUFnAcBu + U_LaFaSFnAcBu + U_LaPiPoAcBu + U_LaPsPoAcBu + U_LaNgPoAcBu + U_LaSpPoAcBu + U_LaFaUPoAcBu + U_LaFaSPoAcBu);
let U_Insol_Sol = ((U_PiPiPsBa + U_PiPiPsBf + U_PiPiPsFn)*mrPi + (U_TgWsFaUBa + U_TgWsFaUBf + U_TgWsFaSBa + U_TgWsFaSBf)*mrTg + (U_FdFdBfWs + U_FdFdFnWs)*mrFd + (U_SiSiBaWs + U_SiSiFnWs)*mrSi)/DMI;
let P_InsolFSG_Eat = (DurationEat/24)*maxInsolFSGperminEat;
let P_InsolFSG_Rum = (DurationRum/24)*maxInsolFSGperminRum /(1 + MInsolFSGRumFn/CFn);
let P_InsolFSG_Hydrolysis = U_Insol_Sol *  maxInsolFSGpermolInsol;
let U_InsolFSG_Ferm_Gas = (P_H2_Ferm_Insol + P_CO2_Ferm_Insol)/DMI *  maxInsolFSGpermolGas;
let dQInsolFSGdt = P_InsolFSG_Eat + P_InsolFSG_Rum + P_InsolFSG_Hydrolysis - U_InsolFSG_Ferm_Gas;
let P_OMHind_OMHind_Ex = (U_FuFuEx * mrFu + U_FdFdEx * mrFd + U_SiSiEx * mrSi + U_TgTgEx * mrTg + U_FaUFaUEx * mrFaU + U_FaSFaSEx * mrFaS + U_PiPiEx * mrPi + YPsMi * mrPs * (U_BaBaEx + U_BfBfEx + U_FnFnExFl + U_FnFnExSo + U_PoPoExFl + U_MeMeExPo + U_MeMeExFn));
let U_OMHind_OMHind_Fecal = KHindEx * QOMHind;
let U_OMHind_OMHind_Ferm = QOMHind * (((1 - 1) * U_FuFuEx/U_Fu * mrFu) + (1 * U_FdFdEx/U_Fd * mrFd) +((1- fSdHindEx) * U_SiSiEx/U_Si * mrSi) + ((1-fTgHindEx) * U_TgTgEx/U_Tg * mrTg) + ((1-fFaUHindEx) * U_FaUFaUEx/U_FaU * mrFaU) + ((1-fFaSHindEx) * U_FaSFaSEx/U_FaS * mrFaS) + ((1-fPiHindEx) * ( U_PiPiEx/U_Pi * mrPi + U_AmAmEx/U_Am * mrAm + U_PsPsEx/U_Ps * mrPs + YPsMi * mrPs * (U_BaBaEx/U_Ba + U_BfBfEx/U_Bf + U_FnFnExFl/U_Fn + U_FnFnExSo/U_Fn + U_PoPoExFl/U_Po + U_MeMeExPo/U_Me + U_MeMeExFn/U_Me))));
let dQOMHinddt = P_OMHind_OMHind_Ex - U_OMHind_OMHind_Fecal - U_OMHind_OMHind_Ferm;
let P_OMFecal_OMFecal_OMHind = U_OMHind_OMHind_Fecal;
let dQOMFecaldt = P_OMFecal_OMFecal_OMHind;
let P_CH4_Hind_Ferm = Y_CH4_Hind_Ferm * U_OMHind_OMHind_Ferm;
let dQCH4_hinddt = P_CH4_Hind_Ferm;
let P_fecalH2OHind = U_H2OH2OEx;
let U_fecalH2O_fecalH2OAb = KAbH2OHind * QfecalH2O;
let dQfecalH2Odt = P_fecalH2OHind - U_fecalH2O_fecalH2OAb;
let P_fecalNHind = (U_PiPiEx*YNPi) + (U_PsPsEx*YNPs) + (U_AmAmEx*YNAm) + (U_NOPNOPEx * YNNOP) + (YNPs * YPsMi * (U_BaBaEx + U_BfBfEx + U_FnFnExFl + U_FnFnExSo + U_PoPoExFl + U_MeMeExPo + U_MeMeExFn)) + (U_NO2_NO2_Ex) + (U_NO3_NO3_Ex);
let U_fecalN_fecalNAb = KAbNHind * QfecalN;
let dQfecalNdt = P_fecalNHind - U_fecalN_fecalNAb;
let P_fecalCHind = (U_PiPiEx*YCPi) + (U_PsPsEx*YCPs) + (U_TgTgEx * YCTg)  + (U_FuFuEx * YCFu) + (U_FdFdEx * YCFd) + (U_SiSiEx * YCSi) + (U_WsWsEx * YCWs) + (U_LaLaEx * YCLa) + (U_FaUFaUEx * YCFaU) + (U_FaSFaSEx * YCFaS) + (YCMi * (U_BaBaEx + U_BfBfEx + U_FnFnExFl + U_FnFnExSo + U_PoPoExFl + U_MeMeExPo + U_MeMeExFn)) + (YCStorage * (U_SaSaEx + U_SfSfEx + U_SfnSfnExFl + U_SfnSfnExSo + U_SpFlSpFlEx )) + (YCAc * U_AcAcEx) + (YCBu * U_BuBuEx) + (YCPr * U_PrPrEx) + (YCNOP * U_NOPNOPEx) + (YCBr * U_BrBrEx) + (YCCO2 * U_CO2CO2Ex) + (YCBicarb * U_BicarbBicarbEx) + (YCLactate * U_LactateLactateEx) + (YCAcetate * U_AcetateAcetateEx) + (YCButyrate * U_ButyrateButyrateEx) + (YCPropionate * U_PropionatePropionateEx);
let U_fecalC_fecalCAb = KAbCHind * QfecalC;
let dQfecalCdt = P_fecalCHind - U_fecalC_fecalCAb;
let P_DpInDp = FrDp * InP;
let P_DpEpDp = KEpEpSal * QEp;
let U_DpDpGp = KFlEx * QDp;
let U_DpDpMi = (YDpBaDp * U_BaBaEx) + (YDpBfDp * U_BfBfEx) + (YDpPoDp * U_PoPoExFl) + (YDpFnDp * (U_FnFnExFl + U_FnFnExSo));
let dQDpdt = P_DpInDp + P_DpEpDp - U_DpDpGp - U_DpDpMi;
let P_IpInIp = (1-FrDp) * InP;
let U_IpIpNp = KSoEx * QIp;
let dQIpdt = P_IpInIp - U_IpIpNp;
let P_RMpDpRMp = U_DpDpMi;
let U_RMpRMpNp = YRMpRMpNp * U_DpDpMi;
let U_RMpRMpGp = (1 - YRMpRMpNp) * U_DpDpMi;
let dQRMpdt = P_RMpDpRMp - U_RMpRMpNp - U_RMpRMpGp;
let P_GpDpGp = U_DpDpGp;
let P_GpRMpGp = U_RMpRMpGp;
let P_GpEpGp = KEpEpBile * QEp;
let U_GpGpEp = VmaxGpEp / (1 + MGpGpEp/(QGp/VSi));
let U_GpGpLp = 2.5 * KFlEx * QGp;
let dQGpdt = P_GpDpGp + P_GpRMpGp + P_GpEpGp - U_GpGpEp - U_GpGpLp;
let P_NpIpNp = U_IpIpNp;
let P_NpRMpNp = U_RMpRMpNp;
let U_NpNpTp = 2.5 * KSoEx * QNp;
let dQNpdt = P_NpIpNp + P_NpRMpNp - U_NpNpTp;
let P_LBaBaExLBa = 2.5 * KFlEx * U_BaBaEx;
let ULBaLBaEx = KLBaEx * QLBa;
let dQLBadt = P_LBaBaExLBa - ULBaLBaEx;
let P_LBfBfExLBf = 2.5 * KSoEx * U_BfBfEx;
let ULBfLBfEx = KLBfEx * QLBf;
let dQLBfdt = P_LBfBfExLBf - ULBfLBfEx;
let P_LpGpLp = U_GpGpLp;
let U_LpLpEp = KLpLpEp * QLp;
let U_LpLpLMp = (YDpBaDp * ULBaLBaEx) + (YDpBfDp * ULBfLBfEx);
let U_LpLpFp = KLpEx * QLp;
let dQLpdt = P_LpGpLp - U_LpLpEp - U_LpLpLMp - U_LpLpFp;
let P_LMpLpLMp = U_LpLpLMp;
let U_LMpLMpFp = KLBaEx * (QLBa/(QLBa + QLBf)) * QLMp + KLBfEx * (QLBf/(QLBa + QLBf)) * QLMp;
let dQLMpdt = P_LMpLpLMp - U_LMpLMpFp;
let P_TpNpTp = U_NpNpTp;
let U_TpTpFp = KLpEx * QTp;
let dQTpdt = P_TpNpTp - U_TpTpFp;
let P_EpGpEp = U_GpGpEp;
let P_EpLpEp = U_LpLpEp;
let U_EpEpBile = P_GpEpGp;
let U_EpEpMilk = YEpEpMilk * milk/ 24;
let U_EpEpUp = 0.0095 *Math.exp(0.071 * QEp);
let U_EpEpSal = P_DpEpDp;
let dQEpdt = P_EpGpEp + P_EpLpEp - U_EpEpBile - U_EpEpMilk - U_EpEpUp - U_EpEpSal;
let P_FpLpFp = U_LpLpFp;
let P_FpLMpFp = U_LMpLMpFp;
let P_FpFpTp = U_TpTpFp;
let dQFpdt = P_FpLpFp + P_FpLMpFp + P_FpFpTp;
let P_UpEpUp = U_EpEpUp;
let dQUpdt = P_UpEpUp;
let P_VaLaPoFlDe = P_LaWsPiPo + P_LaFdPiPo + P_LaSiPiPo + P_LaSpPiPo + P_LaPiPoAm + P_LaWsPsPo + P_LaFdPsPo + P_LaSiPsPo + P_LaSpPsPo + P_LaPsPoAm + P_LaWsBaPo + P_LaFdBaPo + P_LaSiBaPo + P_LaSpBaPo + P_LaBaPoAm + P_LaWsBfPo + P_LaFdBfPo + P_LaSiBfPo + P_LaSpBfPo + P_LaBfPoAm + P_LaWsFnPo + P_LaFdFnPo + P_LaSiFnPo + P_LaSpFnPo + P_LaFnPoAm + P_LaWsPoPo + P_LaFdPoPo + P_LaSiPoPo + P_LaSpPoPo + P_LaPoPoAm + P_LaWsNgPo + P_LaWsSpPo + P_LaWsPoFaU + P_LaWsPoFaS + P_LaFdNgPo + P_LaFdSpPo + P_LaFdPoFaU + P_LaFdPoFaS + P_LaSiNgPo + P_LaSiSpPo + P_LaSiPoFaU + P_LaSiPoFaS + P_LaSpNgPo + P_LaSpPoFaU + P_LaSpPoFaS + P_AcPiPoAmAc+ P_AcPsPoAmAc + P_AcBaPoAmAc + P_AcBfPoAmAc + P_AcFnPoAmAc + P_AcPoPoAmAc + P_AcWsPiPoAc + P_AcWsPsPoAc + P_AcWsBaPoAc + P_AcWsBfPoAc + P_AcWsFnPoAc + P_AcWsPoPoAc + P_AcWsNgPoAc + P_AcWsSpPoAc + P_AcWsFaUPoAc + P_AcWsFaSPoAc + P_AcFdPiPoAc + P_AcFdPsPoAc + P_AcFdBaPoAc + P_AcFdBfPoAc + P_AcFdFnPoAc + P_AcFdPoPoAc + P_AcFdNgPoAc + P_AcFdSpPoAc + P_AcFdFaUPoAc + P_AcFdFaSPoAc + P_AcSiPiPoAc + P_AcSiPsPoAc + P_AcSiBaPoAc + P_AcSiBfPoAc + P_AcSiFnPoAc + P_AcSiPoPoAc + P_AcSiNgPoAc + P_AcSiSpPoAc + P_AcSiFaUPoAc + P_AcSiFaSPoAc+ P_AcSpPiPoAc + P_AcSpPsPoAc + P_AcSpBaPoAc + P_AcSpBfPoAc + P_AcSpFnPoAc + P_AcSpPoPoAc + P_AcSpNgPoAc + P_AcSpFaUPoAc + P_AcSpFaSPoAc + P_BuPiPoAmBu+ P_BuPsPoAmBu + P_BuBaPoAmBu + P_BuBfPoAmBu + P_BuFnPoAmBu + P_BuPoPoAmBu + P_BuWsPiPoBu + P_BuWsPsPoBu + P_BuWsBaPoBu + P_BuWsBfPoBu + P_BuWsFnPoBu + P_BuWsPoPoBu + P_BuWsNgPoBu + P_BuWsSpPoBu + P_BuWsFaUPoBu + P_BuWsFaSPoBu + P_BuFdPiPoBu + P_BuFdPsPoBu + P_BuFdBaPoBu + P_BuFdBfPoBu + P_BuFdFnPoBu + P_BuFdPoPoBu + P_BuFdNgPoBu + P_BuFdSpPoBu + P_BuFdFaUPoBu + P_BuFdFaSPoBu + P_BuSiPiPoBu + P_BuSiPsPoBu + P_BuSiBaPoBu + P_BuSiBfPoBu + P_BuSiFnPoBu + P_BuSiPoPoBu + P_BuSiNgPoBu + P_BuSiSpPoBu + P_BuSiFaUPoBu + P_BuSiFaSPoBu + P_BuSpPiPoBu + P_BuSpPsPoBu + P_BuSpBaPoBu + P_BuSpBfPoBu + P_BuSpFnPoBu + P_BuSpPoPoBu + P_BuSpNgPoBu + P_BuSpFaUPoBu + P_BuSpFaSPoBu+ P_BuLaPiPoAcBu + P_BuLaPsPoAcBu + P_BuLaNgPoAcBu + P_BuLaSpPoAcBu + P_BuLaFaUPoAcBu + P_BuLaFaSPoAcBu +  P_BuLaBaPoAcBu + P_BuLaBfPoAcBu + P_BuLaFnPoAcBu + P_BuLaPoPoAcBu;

//let U_PoFlPoFlDe = VmaxPoFlPoFlDe * QPoFl/ (1 +         (MVaLaPoFlDe/(P_VaLaPoFlDe/(QPoFl)))**ThetaVaLaPoFlDe);
let U_PoFlPoFlDe = VmaxPoFlPoFlDe * QPoFl /  (1 + (Math.pow(MVaLaPoFlDe/(P_VaLaPoFlDe/(QPoFl))), ThetaVaLaPoFlDe));    
    
//let U_SpFlSpFlDe = VmaxPoFlPoFlDe * QSpFl/ (1 + (MVaLaPoFlDe/(P_VaLaPoFlDe/(QPoFl)))**ThetaVaLaPoFlDe);
let U_SpFlSpFlDe = VmaxPoFlPoFlDe * QSpFl/   (1 + (Math.pow(MVaLaPoFlDe/(P_VaLaPoFlDe/(QPoFl))), ThetaVaLaPoFlDe));
   
let U_PoPoDe = U_PoFlPoFlDe;
let U_SpPoDe = U_SpFlSpFlDe;
let dQPodt = P_PoPiWsAc + P_PoPiWsBu + P_PoPiWsLa + P_PoPiFdAc + P_PoPiFdBu + P_PoPiFdLa + P_PoPiSiAc + P_PoPiSiBu + P_PoPiSiLa + P_PoPiSpAc + P_PoPiSpBu + P_PoPiSpLa + P_PoPsWsAc + P_PoPsWsBu + P_PoPsWsLa + P_PoPsFdAc + P_PoPsFdBu + P_PoPsFdLa + P_PoPsSiAc + P_PoPsSiBu + P_PoPsSiLa + P_PoPsSpAc + P_PoPsSpBu + P_PoPsSpLa + P_PoBaWsAc + P_PoBaWsBu + P_PoBaWsLa + P_PoBaFdAc + P_PoBaFdBu + P_PoBaFdLa + P_PoBaSiAc + P_PoBaSiBu + P_PoBaSiLa + P_PoBaSpAc + P_PoBaSpBu + P_PoBaSpLa + P_PoBfWsAc + P_PoBfWsBu + P_PoBfWsLa + P_PoBfFdAc + P_PoBfFdBu + P_PoBfFdLa + P_PoBfSiAc + P_PoBfSiBu + P_PoBfSiLa + P_PoBfSpAc + P_PoBfSpBu + P_PoBfSpLa + P_PoFnWsAc + P_PoFnWsBu + P_PoFnWsLa + P_PoFnFdAc + P_PoFnFdBu + P_PoFnFdLa + P_PoFnSiAc + P_PoFnSiBu + P_PoFnSiLa + P_PoFnSpAc + P_PoFnSpBu + P_PoFnSpLa + P_PoPoWsAc + P_PoPoWsBu + P_PoPoWsLa + P_PoPoFdAc + P_PoPoFdBu + P_PoPoFdLa + P_PoPoSiAc + P_PoPoSiBu + P_PoPoSiLa + P_PoPoSpAc + P_PoPoSpBu + P_PoPoSpLa + P_PoPiLaAcBu + P_PoPsLaAcBu + P_PoBaLaAcBu + P_PoBfLaAcBu + P_PoFnLaAcBu + P_PoPoLaAcBu - U_PoPoExFl - U_PoPoWsAc - U_PoPoWsBu - U_PoPoWsLa - U_PoPoFdAc - U_PoPoFdBu - U_PoPoFdLa - U_PoPoSiAc - U_PoPoSiBu - U_PoPoSiLa - U_PoPoSpAc - U_PoPoSpBu - U_PoPoSpLa - U_PoPoLaAcBu - U_PoPoAmAc - U_PoPoAmBu - U_PoPoAmLa - U_PoPoDe;
let dQSpdt = P_SpPoWsAc + P_SpPoWsBu + P_SpPoWsLa + P_SpPoFdAc + P_SpPoFdBu + P_SpPoFdLa + P_SpPoSiAc + P_SpPoSiBu + P_SpPoSiLa + P_SpPoLaAcBu - U_SpPoDe - U_SpPoExFl - U_SpPiPoAc - U_SpPiPoBu - U_SpPiPoLa - U_SpPsPoAc - U_SpPsPoBu - U_SpPsPoLa - U_SpBaPoAc - U_SpBaPoBu - U_SpBaPoLa - U_SpBfPoAc - U_SpBfPoBu - U_SpBfPoLa - U_SpFnPoAc - U_SpFnPoBu - U_SpFnPoLa - U_SpPoPoAc - U_SpPoPoBu - U_SpPoPoLa - U_SpNgPoAc - U_SpNgPoBu - U_SpNgPoLa - U_SpFaUPoAc - U_SpFaUPoBu - U_SpFaUPoLa - U_SpFaSPoAc - U_SpFaSPoBu - U_SpFaSPoLa - U_SpPoWsAc - U_SpPoWsBu - U_SpPoWsLa - U_SpPoFdAc - U_SpPoFdBu - U_SpPoFdLa - U_SpPoSiAc - U_SpPoSiBu - U_SpPoSiLa - U_SpPoSpAc - U_SpPoSpBu - U_SpPoSpLa - U_SpPoLaAcBu - U_SpPoAmAc - U_SpPoAmBu - U_SpPoAmLa;
let P_PsPoDe = YPsPoDe * U_PoPoDe;
let dQPsdt = P_PsInPs + P_PsSalPs + P_PsPiBa + P_PsPiBf + P_PsPiFn + P_PsPoDe - U_PsPsEx - U_PsBaWsAc- U_PsBaWsBu - U_PsBaWsAcPr - U_PsBaWsLa - U_PsBaSaAc - U_PsBaSaBu - U_PsBaSaAcPr - U_PsBaSaLa - U_PsBaLaAcPr - U_PsBaLaAcBu - U_PsBaAmAc - U_PsBaAmBu - U_PsBaAmAcPr - U_PsBaAmLa - U_PsBfWsAc - U_PsBfWsBu - U_PsBfWsAcPr - U_PsBfSfAc - U_PsBfSfBu - U_PsBfSfAcPr - U_PsBfAmAc - U_PsBfAmBu - U_PsBfAmAcPr - U_PsFnWsAc - U_PsFnWsBu - U_PsFnWsLa - U_PsFnSfnAc - U_PsFnSfnBu - U_PsFnSfnLa - U_PsFnLaAcBu - U_PsFnAmAc - U_PsFnAmBu - U_PsFnAmLa - U_PsPoWsAc - U_PsPoWsBu - U_PsPoWsLa - U_PsPoFdAc - U_PsPoFdBu - U_PsPoFdLa - U_PsPoSiAc - U_PsPoSiBu - U_PsPoSiLa - U_PsPoSpAc - U_PsPoSpBu - U_PsPoSpLa - U_PsPoLaAcBu - U_PsPoAmAc - U_PsPoAmBu - U_PsPoAmLa;
let P_WsPoDeWs = YWsPoDe * U_PoPoDe;
let P_WsSpDeWs = YWsSpDe * U_SpPoDe;
let dQWsdt = P_WsInWs + P_WsFdBfWs + P_WsFdFnWs + P_WsSiBaWs + P_WsSiFnWs + P_WsTgFaUBaWs + P_WsTgFaUBfWs + P_WsTgFaSBaWs + P_WsTgFaSBfWs + P_WsPoDeWs + P_WsSpDeWs - U_WsWsEx - U_WsPsBaAc - U_WsPsBaBu - U_WsPsBaAcPr - U_WsPsBaLa - U_WsAmBaAc - U_WsAmBaBu - U_WsAmBaAcPr - U_WsAmBaLa - U_WsNgBaAc - U_WsNgBaBu - U_WsNgBaAcPr - U_WsNgBaLa - U_WsSaBaAc - U_WsSaBaBu - U_WsSaBaAcPr - U_WsSaBaLa - U_WsFaUBaAc - U_WsFaUBaBu - U_WsFaUBaAcPr - U_WsFaUBaLa - U_WsFaSBaAc - U_WsFaSBaBu - U_WsFaSBaAcPr - U_WsFaSBaLa - U_WsPsBfAc - U_WsPsBfBu - U_WsPsBfAcPr - U_WsAmBfAc - U_WsAmBfBu - U_WsAmBfAcPr - U_WsNgBfAc - U_WsNgBfBu - U_WsNgBfAcPr - U_WsSfBfAc - U_WsSfBfBu - U_WsSfBfAcPr - U_WsFaUBfAc  - U_WsFaUBfBu - U_WsFaUBfAcPr - U_WsFaSBfAc - U_WsFaSBfBu - U_WsFaSBfAcPr - U_WsPsFnAc - U_WsPsFnBu - U_WsPsFnLa - U_WsAmFnAc - U_WsAmFnBu - U_WsAmFnLa - U_WsNgFnAc - U_WsNgFnBu - U_WsNgFnLa - U_WsSfnFnAc - U_WsSfnFnBu - U_WsSfnFnLa - U_WsFaUFnAc - U_WsFaUFnBu - U_WsFaUFnLa - U_WsFaSFnAc - U_WsFaSFnBu - U_WsFaSFnLa - U_WsPiPoAc - U_WsPiPoBu - U_WsPiPoLa - U_WsPsPoAc - U_WsPsPoBu - U_WsPsPoLa - U_WsBaPoAc - U_WsBaPoBu - U_WsBaPoLa - U_WsBfPoAc - U_WsBfPoBu - U_WsBfPoLa - U_WsFnPoAc - U_WsFnPoBu - U_WsFnPoLa - U_WsPoPoAc - U_WsPoPoBu - U_WsPoPoLa - U_WsNgPoAc - U_WsNgPoBu - U_WsNgPoLa - U_WsSpPoAc - U_WsSpPoBu - U_WsSpPoLa - U_WsFaUPoAc - U_WsFaUPoBu - U_WsFaUPoLa - U_WsFaSPoAc - U_WsFaSPoBu - U_WsFaSPoLa;
let P_FaUPoDe = YFaUPoDe * U_PoPoDe;
let dQFaUdt = P_FaUInFaU + P_FaUTgBa + P_FaUTgBf + P_FaUPoDe + P_FaUWsBaAc + P_FaUWsBaBu + P_FaUWsBaAcPr + P_FaUWsBaLa + P_FaUSaBaAc + P_FaUSaBaBu + P_FaUSaBaAcPr + P_FaUSaBaLa + P_FaULaBaAcPr + P_FaULaBaAcBu + P_FaUWsBfAc + P_FaUWsBfBu + P_FaUWsBfAcPr + P_FaUSfBfAc + P_FaUSfBfBu + P_FaUSfBfAcPr + P_FaUWsFnAc + P_FaUWsFnBu + P_FaUWsFnLa + P_FaUSfnFnAc + P_FaUSfnFnBu + P_FaUSfnFnLa + P_FaULaFnAcBu + P_FaUWsPoAc + P_FaUWsPoBu + P_FaUWsPoLa + P_FaUFdPoAc + P_FaUFdPoBu + P_FaUFdPoLa + P_FaUSiPoAc + P_FaUSiPoBu + P_FaUSiPoLa + P_FaUSpPoAc + P_FaUSpPoBu + P_FaUSpPoLa + P_FaULaPoAcBu - U_FaUFaUEx - U_FaUFaSBa - U_FaUFaSBf - U_FaUFaSFn - U_FaUPsBaWsAc - U_FaUPsBaWsBu - U_FaUPsBaWsAcPr - U_FaUPsBaWsLa - U_FaUPsBaSaAc - U_FaUPsBaSaBu - U_FaUPsBaSaAcPr - U_FaUPsBaSaLa - U_FaUPsBaLaAcPr - U_FaUPsBaLaAcBu - U_FaUAmBaWsAc - U_FaUAmBaWsBu - U_FaUAmBaWsAcPr - U_FaUAmBaWsLa - U_FaUAmBaSaAc - U_FaUAmBaSaBu - U_FaUAmBaSaAcPr - U_FaUAmBaSaLa - U_FaUAmBaLaAcPr - U_FaUAmBaLaAcBu - U_FaUPsBfWsAc - U_FaUPsBfWsBu - U_FaUPsBfWsAcPr - U_FaUPsBfSfAc - U_FaUPsBfSfBu - U_FaUPsBfSfAcPr - U_FaUAmBfWsAc - U_FaUAmBfWsBu - U_FaUAmBfWsAcPr - U_FaUAmBfSfAc - U_FaUAmBfSfBu - U_FaUAmBfSfAcPr - U_FaUPsFnWsAc - U_FaUPsFnWsBu - U_FaUPsFnWsLa - U_FaUPsFnSfnAc - U_FaUPsFnSfnBu - U_FaUPsFnSfnLa - U_FaUPsFnLaAcBu - U_FaUAmFnWsAc - U_FaUAmFnWsBu - U_FaUAmFnWsLa - U_FaUAmFnSfnAc - U_FaUAmFnSfnBu - U_FaUAmFnSfnLa - U_FaUAmFnLaAcBu - U_FaUPiPoWsAc - U_FaUPiPoWsBu - U_FaUPiPoWsLa - U_FaUPiPoFdAc - U_FaUPiPoFdBu - U_FaUPiPoFdLa - U_FaUPiPoSiAc - U_FaUPiPoSiBu - U_FaUPiPoSiLa - U_FaUPiPoSpAc - U_FaUPiPoSpBu - U_FaUPiPoSpLa - U_FaUPiPoLaAcBu - U_FaUPsPoWsAc - U_FaUPsPoWsBu - U_FaUPsPoWsLa - U_FaUPsPoFdAc - U_FaUPsPoFdBu - U_FaUPsPoFdLa - U_FaUPsPoSiAc - U_FaUPsPoSiBu - U_FaUPsPoSiLa - U_FaUPsPoSpAc - U_FaUPsPoSpBu - U_FaUPsPoSpLa - U_FaUPsPoLaAcBu - U_FaUBaPoWsAc - U_FaUBaPoWsBu - U_FaUBaPoWsLa - U_FaUBaPoFdAc - U_FaUBaPoFdBu - U_FaUBaPoFdLa - U_FaUBaPoSiAc - U_FaUBaPoSiBu - U_FaUBaPoSiLa - U_FaUBaPoSpAc - U_FaUBaPoSpBu - U_FaUBaPoSpLa - U_FaUBaPoLaAcBu - U_FaUBfPoWsAc - U_FaUBfPoWsBu - U_FaUBfPoWsLa - U_FaUBfPoFdAc - U_FaUBfPoFdBu - U_FaUBfPoFdLa - U_FaUBfPoSiAc - U_FaUBfPoSiBu - U_FaUBfPoSiLa - U_FaUBfPoSpAc - U_FaUBfPoSpBu - U_FaUBfPoSpLa - U_FaUBfPoLaAcBu - U_FaUFnPoWsAc - U_FaUFnPoWsBu - U_FaUFnPoWsLa - U_FaUFnPoFdAc - U_FaUFnPoFdBu - U_FaUFnPoFdLa - U_FaUFnPoSiAc - U_FaUFnPoSiBu - U_FaUFnPoSiLa - U_FaUFnPoSpAc - U_FaUFnPoSpBu - U_FaUFnPoSpLa - U_FaUFnPoLaAcBu - U_FaUPoPoWsAc - U_FaUPoPoWsBu - U_FaUPoPoWsLa - U_FaUPoPoFdAc - U_FaUPoPoFdBu - U_FaUPoPoFdLa - U_FaUPoPoSiAc - U_FaUPoPoSiBu - U_FaUPoPoSiLa - U_FaUPoPoSpAc - U_FaUPoPoSpBu - U_FaUPoPoSpLa - U_FaUPoPoLaAcBu;
let P_FaSPoDe = YFaSPoDe * U_PoPoDe;
let dQFaSdt = P_FaSInFaS + P_FaSTgBa + P_FaSTgBf + P_FaSFaUFaSBa + P_FaSFaUFaSBf + P_FaSFaUFaSFn + P_FaSPoDe + P_FaSWsBaAc + P_FaSWsBaBu + P_FaSWsBaAcPr + P_FaSWsBaLa + P_FaSSaBaAc + P_FaSSaBaBu + P_FaSSaBaAcPr + P_FaSSaBaLa + P_FaSLaBaAcPr + P_FaSLaBaAcBu + P_FaSWsBfAc + P_FaSWsBfBu + P_FaSWsBfAcPr + P_FaSSfBfAc + P_FaSSfBfBu + P_FaSSfBfAcPr + P_FaSWsFnAc + P_FaSWsFnBu + P_FaSWsFnLa + P_FaSSfnFnAc + P_FaSSfnFnBu + P_FaSSfnFnLa + P_FaSLaFnAcBu + P_FaSWsPoAc + P_FaSWsPoBu + P_FaSWsPoLa + P_FaSFdPoAc + P_FaSFdPoBu + P_FaSFdPoLa + P_FaSSiPoAc + P_FaSSiPoBu + P_FaSSiPoLa + P_FaSSpPoAc + P_FaSSpPoBu + P_FaSSpPoLa + P_FaSLaPoAcBu - U_FaSFaSEx - U_FaSPsBaWsAc - U_FaSPsBaWsBu - U_FaSPsBaWsAcPr - U_FaSPsBaWsLa - U_FaSPsBaSaAc - U_FaSPsBaSaBu - U_FaSPsBaSaAcPr - U_FaSPsBaSaLa - U_FaSPsBaLaAcPr - U_FaSPsBaLaAcBu - U_FaSAmBaWsAc - U_FaSAmBaWsBu - U_FaSAmBaWsAcPr - U_FaSAmBaWsLa - U_FaSAmBaSaAc - U_FaSAmBaSaBu - U_FaSAmBaSaAcPr - U_FaSAmBaSaLa - U_FaSAmBaLaAcPr - U_FaSAmBaLaAcBu - U_FaSPsBfWsAc - U_FaSPsBfWsBu - U_FaSPsBfWsAcPr - U_FaSPsBfSfAc - U_FaSPsBfSfBu - U_FaSPsBfSfAcPr - U_FaSAmBfWsAc - U_FaSAmBfWsBu - U_FaSAmBfWsAcPr - U_FaSAmBfSfAc - U_FaSAmBfSfBu - U_FaSAmBfSfAcPr - U_FaSPsFnWsAc - U_FaSPsFnWsBu - U_FaSPsFnWsLa - U_FaSPsFnSfnAc - U_FaSPsFnSfnBu - U_FaSPsFnSfnLa - U_FaSPsFnLaAcBu - U_FaSAmFnWsAc - U_FaSAmFnWsBu - U_FaSAmFnWsLa - U_FaSAmFnSfnAc - U_FaSAmFnSfnBu - U_FaSAmFnSfnLa - U_FaSAmFnLaAcBu - U_FaSPiPoWsAc - U_FaSPiPoWsBu - U_FaSPiPoWsLa - U_FaSPiPoFdAc - U_FaSPiPoFdBu - U_FaSPiPoFdLa - U_FaSPiPoSiAc - U_FaSPiPoSiBu - U_FaSPiPoSiLa - U_FaSPiPoSpAc - U_FaSPiPoSpBu - U_FaSPiPoSpLa - U_FaSPiPoLaAcBu - U_FaSPsPoWsAc - U_FaSPsPoWsBu - U_FaSPsPoWsLa - U_FaSPsPoFdAc - U_FaSPsPoFdBu - U_FaSPsPoFdLa - U_FaSPsPoSiAc - U_FaSPsPoSiBu - U_FaSPsPoSiLa - U_FaSPsPoSpAc - U_FaSPsPoSpBu - U_FaSPsPoSpLa - U_FaSPsPoLaAcBu - U_FaSBaPoWsAc - U_FaSBaPoWsBu - U_FaSBaPoWsLa - U_FaSBaPoFdAc - U_FaSBaPoFdBu - U_FaSBaPoFdLa - U_FaSBaPoSiAc - U_FaSBaPoSiBu - U_FaSBaPoSiLa - U_FaSBaPoSpAc - U_FaSBaPoSpBu - U_FaSBaPoSpLa - U_FaSBaPoLaAcBu - U_FaSBfPoWsAc - U_FaSBfPoWsBu - U_FaSBfPoWsLa - U_FaSBfPoFdAc - U_FaSBfPoFdBu - U_FaSBfPoFdLa - U_FaSBfPoSiAc - U_FaSBfPoSiBu - U_FaSBfPoSiLa - U_FaSBfPoSpAc - U_FaSBfPoSpBu - U_FaSBfPoSpLa - U_FaSBfPoLaAcBu - U_FaSFnPoWsAc - U_FaSFnPoWsBu - U_FaSFnPoWsLa - U_FaSFnPoFdAc - U_FaSFnPoFdBu - U_FaSFnPoFdLa - U_FaSFnPoSiAc - U_FaSFnPoSiBu - U_FaSFnPoSiLa - U_FaSFnPoSpAc - U_FaSFnPoSpBu - U_FaSFnPoSpLa - U_FaSFnPoLaAcBu - U_FaSPoPoWsAc - U_FaSPoPoWsBu - U_FaSPoPoWsLa - U_FaSPoPoFdAc - U_FaSPoPoFdBu - U_FaSPoPoFdLa - U_FaSPoPoSiAc - U_FaSPoPoSiBu - U_FaSPoPoSiLa - U_FaSPoPoSpAc - U_FaSPoPoSpBu - U_FaSPoPoSpLa - U_FaSPoPoLaAcBu;

    
//let zeroValues = new Array(50).fill(0);


return [
    dintakedt, dQH2Odt, dQPidt, dQAmdt, dQBadt, dQBfdt,
    dQFndt, dQPoFldt, dQSpFldt, dQTgdt, dQFudt, dQFddt,
    dQSidt, dQSfdt, dQLadt, dQSadt, dQSfndt, dQLactatedt,
    dQAcdt, dQAcetatedt, dQBudt, dQButyratedt, dQPrdt, dQPropionatedt,
    dQBrdt, dQNOPdt, dQNO3dt, dQNO2dt, dQN2Odt, dQNADHdt,
    dQH2dt, dQMedt, dQCH4dt, dQCO2dt, dQBicarbdt, dQHplusdt,
    dQmaxHplusdt, dQInsolFSGdt, dQOMHinddt, dQOMFecaldt, dQCH4_hinddt,
    dQfecalH2Odt, dQfecalNdt, dQfecalCdt, dQDpdt, dQIpdt, dQRMpdt,
    dQGpdt, dQNpdt, dQLBadt, dQLBfdt, dQLpdt, dQLMpdt,
    dQTpdt, dQEpdt, dQFpdt, dQUpdt, dQPodt, dQSpdt,
    dQPsdt, dQWsdt, dQFaUdt, dQFaSdt
];
};

